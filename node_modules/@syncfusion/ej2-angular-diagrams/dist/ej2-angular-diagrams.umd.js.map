{"version":3,"file":"ej2-angular-diagrams.umd.js","sources":["~/@syncfusion/ej2-angular-diagrams/src/overview/overview-all.module.ts","~/@syncfusion/ej2-angular-diagrams/src/overview/overview.module.ts","~/@syncfusion/ej2-angular-diagrams/src/overview/overview.component.ts","~/@syncfusion/ej2-angular-diagrams/src/symbol-palette/symbolpalette-all.module.ts","~/@syncfusion/ej2-angular-diagrams/src/symbol-palette/symbolpalette.module.ts","~/@syncfusion/ej2-angular-diagrams/src/symbol-palette/symbolpalette.component.ts","~/@syncfusion/ej2-angular-diagrams/src/symbol-palette/palettes.directive.ts","~/@syncfusion/ej2-angular-diagrams/src/diagram/diagram-all.module.ts","~/@syncfusion/ej2-angular-diagrams/src/diagram/diagram.module.ts","~/@syncfusion/ej2-angular-diagrams/src/diagram/diagram.component.ts","~/@syncfusion/ej2-angular-diagrams/src/diagram/nodes.directive.ts","~/@syncfusion/ej2-angular-diagrams/src/diagram/ports.directive.ts","~/@syncfusion/ej2-angular-diagrams/src/diagram/node-annotation.directive.ts","~/@syncfusion/ej2-angular-diagrams/src/diagram/node-fixeduserhandle.directive.ts","~/@syncfusion/ej2-angular-diagrams/src/diagram/connectors.directive.ts","~/@syncfusion/ej2-angular-diagrams/src/diagram/connector-annotation.directive.ts","~/@syncfusion/ej2-angular-diagrams/src/diagram/connector-fixeduserhandle.directive.ts","~/@syncfusion/ej2-angular-diagrams/src/diagram/customcursor.directive.ts","~/@syncfusion/ej2-angular-diagrams/src/diagram/layers.directive.ts"],"sourcesContent":["import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OverviewComponent } from './overview.component';\nimport { OverviewModule } from './overview.module';\n/**\n * NgModule definition for the Overview component with providers.\n */\nexport class OverviewAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, OverviewModule],\n    exports: [\n        OverviewModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OverviewAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nOverviewAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverviewAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OverviewComponent } from './overview.component';\n/**\n * NgModule definition for the Overview component.\n */\nexport class OverviewModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        OverviewComponent\n    ],\n    exports: [\n        OverviewComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OverviewModule_tsickle_Closure_declarations() {\n/** @type {?} */\nOverviewModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverviewModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { Overview } from '@syncfusion/ej2-diagrams';\n\n\n\nexport const /** @type {?} */ inputs: string[] = ['enablePersistence','enableRtl','height','locale','sourceID','width'];\nexport const /** @type {?} */ outputs: string[] = ['created'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * Overview Component\n * ```html\n * <ej-overview></ej-overview>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class OverviewComponent extends Overview implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\npublic created: any;\npublic tags: string[] = [''];\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        \n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-overview',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        \n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction OverviewComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nOverviewComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverviewComponent.ctorParameters;\n/** @type {?} */\nOverviewComponent.prototype.context;\n/** @type {?} */\nOverviewComponent.prototype.tagObjects;\n/** @type {?} */\nOverviewComponent.prototype.created;\n/** @type {?} */\nOverviewComponent.prototype.tags;\n/** @type {?} */\nOverviewComponent.prototype.registerEvents;\n/** @type {?} */\nOverviewComponent.prototype.addTwoWay;\n/** @type {?} */\nOverviewComponent.prototype.ngEle;\n/** @type {?} */\nOverviewComponent.prototype.srenderer;\n/** @type {?} */\nOverviewComponent.prototype.viewContainerRef;\n/** @type {?} */\nOverviewComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PaletteDirective, PalettesDirective } from './palettes.directive';\nimport { SymbolPaletteComponent } from './symbolpalette.component';\nimport { SymbolPaletteModule } from './symbolpalette.module';\n/**\n * NgModule definition for the SymbolPalette component with providers.\n */\nexport class SymbolPaletteAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, SymbolPaletteModule],\n    exports: [\n        SymbolPaletteModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SymbolPaletteAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSymbolPaletteAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSymbolPaletteAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PaletteDirective, PalettesDirective } from './palettes.directive';\nimport { SymbolPaletteComponent } from './symbolpalette.component';\n/**\n * NgModule definition for the SymbolPalette component.\n */\nexport class SymbolPaletteModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        SymbolPaletteComponent,\n        PaletteDirective,\n        PalettesDirective\n    ],\n    exports: [\n        SymbolPaletteComponent,\n        PaletteDirective,\n        PalettesDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SymbolPaletteModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSymbolPaletteModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSymbolPaletteModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { SymbolPalette } from '@syncfusion/ej2-diagrams';\n\nimport { PalettesDirective } from './palettes.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['accessKey','allowDrag','connectorDefaults','enableAnimation','enablePersistence','enableRtl','enableSearch','expandMode','filterSymbols','getConnectorDefaults','getNodeDefaults','getSymbolInfo','getSymbolTemplate','height','ignoreSymbolsOnSearch','locale','nodeDefaults','palettes','symbolDragSize','symbolHeight','symbolInfo','symbolMargin','symbolPreview','symbolWidth','width'];\nexport const /** @type {?} */ outputs: string[] = ['paletteExpanding','paletteSelectionChange'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * SymbolPalette Component\n * ```html\n * <ej-symbol-palette></ej-symbol-palette>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class SymbolPaletteComponent extends SymbolPalette implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\n\tpaletteExpanding: any;\npublic paletteSelectionChange: any;\npublic childPalettes: QueryList<PalettesDirective>;\npublic tags: string[] = ['palettes'];\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('DiagramsBpmnDiagrams');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childPalettes;\n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-symbolpalette',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childPalettes: new ContentChild(PalettesDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction SymbolPaletteComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nSymbolPaletteComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSymbolPaletteComponent.ctorParameters;\n/** @type {?} */\nSymbolPaletteComponent.prototype.context;\n/** @type {?} */\nSymbolPaletteComponent.prototype.tagObjects;\n/** @type {?} */\nSymbolPaletteComponent.prototype.paletteExpanding;\n/** @type {?} */\nSymbolPaletteComponent.prototype.paletteSelectionChange;\n/** @type {?} */\nSymbolPaletteComponent.prototype.childPalettes;\n/** @type {?} */\nSymbolPaletteComponent.prototype.tags;\n/** @type {?} */\nSymbolPaletteComponent.prototype.registerEvents;\n/** @type {?} */\nSymbolPaletteComponent.prototype.addTwoWay;\n/** @type {?} */\nSymbolPaletteComponent.prototype.ngEle;\n/** @type {?} */\nSymbolPaletteComponent.prototype.srenderer;\n/** @type {?} */\nSymbolPaletteComponent.prototype.viewContainerRef;\n/** @type {?} */\nSymbolPaletteComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['expanded', 'height', 'iconCss', 'id', 'symbols', 'title'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Palette Directive\n * ```html\n * <e-palettes><e-palette></e-palette><e-palettes>\n * ```\n */\nexport class PaletteDirective extends ComplexBase<PaletteDirective> {\npublic directivePropList: any;\n/**\n * Sets whether the palette items to be expanded or not\n * \\@default true\n */\npublic expanded: any;\n/**\n * Sets the height of the symbol group\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic height: any;\n/**\n * Defines the content of the symbol group\n * \\@default ''\n */\npublic iconCss: any;\n/**\n * Defines the unique id of a symbol group\n * \\@default ''\n */\npublic id: any;\n/**\n * Defines the collection of predefined symbols\n * \\@asptype object\n */\npublic symbols: any;\n/**\n * Defines the title of the symbol group\n * \\@default ''\n */\npublic title: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-palettes>e-palette',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction PaletteDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPaletteDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPaletteDirective.ctorParameters;\n/** @type {?} */\nPaletteDirective.prototype.directivePropList;\n/**\n * Sets whether the palette items to be expanded or not\n * \\@default true\n * @type {?}\n */\nPaletteDirective.prototype.expanded;\n/**\n * Sets the height of the symbol group\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nPaletteDirective.prototype.height;\n/**\n * Defines the content of the symbol group\n * \\@default ''\n * @type {?}\n */\nPaletteDirective.prototype.iconCss;\n/**\n * Defines the unique id of a symbol group\n * \\@default ''\n * @type {?}\n */\nPaletteDirective.prototype.id;\n/**\n * Defines the collection of predefined symbols\n * \\@asptype object\n * @type {?}\n */\nPaletteDirective.prototype.symbols;\n/**\n * Defines the title of the symbol group\n * \\@default ''\n * @type {?}\n */\nPaletteDirective.prototype.title;\n/** @type {?} */\nPaletteDirective.prototype.viewContainerRef;\n}\n\n/**\n * Palette Array Directive\n */\nexport class PalettesDirective extends ArrayBase<PalettesDirective> {\nconstructor() {\n        super('palettes');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-symbolpalette>e-palettes',\n    queries: {\n        children: new ContentChildren(PaletteDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PalettesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPalettesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPalettesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LayerDirective, LayersDirective } from './layers.directive';\nimport { CustomCursorDirective, CustomCursorsDirective } from './customcursor.directive';\nimport { ConnectorFixedUserHandleDirective, ConnectorFixedUserHandlesDirective } from './connector-fixeduserhandle.directive';\nimport { ConnectorAnnotationDirective, ConnectorAnnotationsDirective } from './connector-annotation.directive';\nimport { ConnectorDirective, ConnectorsDirective } from './connectors.directive';\nimport { NodeFixedUserHandleDirective, NodeFixedUserHandlesDirective } from './node-fixeduserhandle.directive';\nimport { NodeAnnotationDirective, NodeAnnotationsDirective } from './node-annotation.directive';\nimport { PortDirective, PortsDirective } from './ports.directive';\nimport { NodeDirective, NodesDirective } from './nodes.directive';\nimport { DiagramComponent } from './diagram.component';\nimport { DiagramModule } from './diagram.module';\nimport {HierarchicalTree, MindMap, RadialTree, ComplexHierarchicalTree, DataBinding, Snapping, PrintAndExport, BpmnDiagrams, SymmetricLayout, ConnectorBridging, UndoRedo, LayoutAnimation, DiagramContextMenu, LineRouting, ConnectorEditing, BlazorTooltip, LineDistribution} from '@syncfusion/ej2-diagrams';\n\n\nexport const /** @type {?} */ HierarchicalTreeService: ValueProvider = { provide: 'DiagramsHierarchicalTree', useValue: HierarchicalTree};\nexport const /** @type {?} */ MindMapService: ValueProvider = { provide: 'DiagramsMindMap', useValue: MindMap};\nexport const /** @type {?} */ RadialTreeService: ValueProvider = { provide: 'DiagramsRadialTree', useValue: RadialTree};\nexport const /** @type {?} */ ComplexHierarchicalTreeService: ValueProvider = { provide: 'DiagramsComplexHierarchicalTree', useValue: ComplexHierarchicalTree};\nexport const /** @type {?} */ DataBindingService: ValueProvider = { provide: 'DiagramsDataBinding', useValue: DataBinding};\nexport const /** @type {?} */ SnappingService: ValueProvider = { provide: 'DiagramsSnapping', useValue: Snapping};\nexport const /** @type {?} */ PrintAndExportService: ValueProvider = { provide: 'DiagramsPrintAndExport', useValue: PrintAndExport};\nexport const /** @type {?} */ BpmnDiagramsService: ValueProvider = { provide: 'DiagramsBpmnDiagrams', useValue: BpmnDiagrams};\nexport const /** @type {?} */ SymmetricLayoutService: ValueProvider = { provide: 'DiagramsSymmetricLayout', useValue: SymmetricLayout};\nexport const /** @type {?} */ ConnectorBridgingService: ValueProvider = { provide: 'DiagramsConnectorBridging', useValue: ConnectorBridging};\nexport const /** @type {?} */ UndoRedoService: ValueProvider = { provide: 'DiagramsUndoRedo', useValue: UndoRedo};\nexport const /** @type {?} */ LayoutAnimationService: ValueProvider = { provide: 'DiagramsLayoutAnimation', useValue: LayoutAnimation};\nexport const /** @type {?} */ DiagramContextMenuService: ValueProvider = { provide: 'DiagramsDiagramContextMenu', useValue: DiagramContextMenu};\nexport const /** @type {?} */ LineRoutingService: ValueProvider = { provide: 'DiagramsLineRouting', useValue: LineRouting};\nexport const /** @type {?} */ ConnectorEditingService: ValueProvider = { provide: 'DiagramsConnectorEditing', useValue: ConnectorEditing};\nexport const /** @type {?} */ BlazorTooltipService: ValueProvider = { provide: 'DiagramsBlazorTooltip', useValue: BlazorTooltip};\nexport const /** @type {?} */ LineDistributionService: ValueProvider = { provide: 'DiagramsLineDistribution', useValue: LineDistribution};\n/**\n * NgModule definition for the Diagram component with providers.\n */\nexport class DiagramAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, DiagramModule],\n    exports: [\n        DiagramModule\n    ],\n    providers:[\n        HierarchicalTreeService,\n        MindMapService,\n        RadialTreeService,\n        ComplexHierarchicalTreeService,\n        DataBindingService,\n        SnappingService,\n        PrintAndExportService,\n        BpmnDiagramsService,\n        SymmetricLayoutService,\n        ConnectorBridgingService,\n        UndoRedoService,\n        LayoutAnimationService,\n        DiagramContextMenuService,\n        LineRoutingService,\n        ConnectorEditingService,\n        BlazorTooltipService,\n        LineDistributionService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DiagramAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nDiagramAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDiagramAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LayerDirective, LayersDirective } from './layers.directive';\nimport { CustomCursorDirective, CustomCursorsDirective } from './customcursor.directive';\nimport { ConnectorFixedUserHandleDirective, ConnectorFixedUserHandlesDirective } from './connector-fixeduserhandle.directive';\nimport { ConnectorAnnotationDirective, ConnectorAnnotationsDirective } from './connector-annotation.directive';\nimport { ConnectorDirective, ConnectorsDirective } from './connectors.directive';\nimport { NodeFixedUserHandleDirective, NodeFixedUserHandlesDirective } from './node-fixeduserhandle.directive';\nimport { NodeAnnotationDirective, NodeAnnotationsDirective } from './node-annotation.directive';\nimport { PortDirective, PortsDirective } from './ports.directive';\nimport { NodeDirective, NodesDirective } from './nodes.directive';\nimport { DiagramComponent } from './diagram.component';\n/**\n * NgModule definition for the Diagram component.\n */\nexport class DiagramModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        DiagramComponent,\n        LayerDirective,\n        LayersDirective,\n        CustomCursorDirective,\n        CustomCursorsDirective,\n        ConnectorFixedUserHandleDirective,\n        ConnectorFixedUserHandlesDirective,\n        ConnectorAnnotationDirective,\n        ConnectorAnnotationsDirective,\n        ConnectorDirective,\n        ConnectorsDirective,\n        NodeFixedUserHandleDirective,\n        NodeFixedUserHandlesDirective,\n        NodeAnnotationDirective,\n        NodeAnnotationsDirective,\n        PortDirective,\n        PortsDirective,\n        NodeDirective,\n        NodesDirective\n    ],\n    exports: [\n        DiagramComponent,\n        LayerDirective,\n        LayersDirective,\n        CustomCursorDirective,\n        CustomCursorsDirective,\n        ConnectorFixedUserHandleDirective,\n        ConnectorFixedUserHandlesDirective,\n        ConnectorAnnotationDirective,\n        ConnectorAnnotationsDirective,\n        ConnectorDirective,\n        ConnectorsDirective,\n        NodeFixedUserHandleDirective,\n        NodeFixedUserHandlesDirective,\n        NodeAnnotationDirective,\n        NodeAnnotationsDirective,\n        PortDirective,\n        PortsDirective,\n        NodeDirective,\n        NodesDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DiagramModule_tsickle_Closure_declarations() {\n/** @type {?} */\nDiagramModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDiagramModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { Diagram } from '@syncfusion/ej2-diagrams';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { LayersDirective } from './layers.directive';\nimport { CustomCursorsDirective } from './customcursor.directive';\nimport { ConnectorsDirective } from './connectors.directive';\nimport { NodesDirective } from './nodes.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['addInfo','annotationTemplate','backgroundColor','bridgeDirection','commandManager','connectorDefaults','connectors','constraints','contextMenuSettings','customCursor','dataSourceSettings','diagramSettings','drawingObject','enablePersistence','enableRtl','getConnectorDefaults','getCustomCursor','getCustomProperty','getCustomTool','getDescription','getNodeDefaults','height','historyManager','layers','layout','locale','mode','nodeDefaults','nodeTemplate','nodes','pageSettings','rulerSettings','scrollSettings','selectedItems','serializationSettings','setNodeTemplate','snapSettings','tool','tooltip','updateSelection','userHandleTemplate','width'];\nexport const /** @type {?} */ outputs: string[] = ['animationComplete','click','collectionChange','commandExecute','connectionChange','contextMenuBeforeItemRender','contextMenuClick','contextMenuOpen','created','dataLoaded','doubleClick','dragEnter','dragLeave','dragOver','drop','expandStateChange','fixedUserHandleClick','historyChange','historyStateChange','keyDown','keyUp','mouseEnter','mouseLeave','mouseOver','onImageLoad','onUserHandleMouseDown','onUserHandleMouseEnter','onUserHandleMouseLeave','onUserHandleMouseUp','positionChange','propertyChange','rotateChange','scrollChange','segmentCollectionChange','selectionChange','sizeChange','sourcePointChange','targetPointChange','textEdit'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * Diagram Component\n * ```html\n * <ej-diagram></ej-diagram>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class DiagramComponent extends Diagram implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\n\tanimationComplete: any;\n\tclick: any;\n\tcollectionChange: any;\n\tcommandExecute: any;\n\tconnectionChange: any;\n\tcontextMenuBeforeItemRender: any;\n\tcontextMenuClick: any;\n\tcontextMenuOpen: any;\n\tcreated: any;\n\tdataLoaded: any;\n\tdoubleClick: any;\n\tdragEnter: any;\n\tdragLeave: any;\n\tdragOver: any;\n\tdrop: any;\n\texpandStateChange: any;\n\tfixedUserHandleClick: any;\n\thistoryChange: any;\n\thistoryStateChange: any;\n\tkeyDown: any;\n\tkeyUp: any;\n\tmouseEnter: any;\n\tmouseLeave: any;\n\tmouseOver: any;\n\tonImageLoad: any;\n\tonUserHandleMouseDown: any;\n\tonUserHandleMouseEnter: any;\n\tonUserHandleMouseLeave: any;\n\tonUserHandleMouseUp: any;\n\tpositionChange: any;\n\tpropertyChange: any;\n\trotateChange: any;\n\tscrollChange: any;\n\tsegmentCollectionChange: any;\n\tselectionChange: any;\n\tsizeChange: any;\n\tsourcePointChange: any;\n\ttargetPointChange: any;\npublic textEdit: any;\npublic childLayers: QueryList<LayersDirective>;\npublic childCustomCursor: QueryList<CustomCursorsDirective>;\npublic childConnectors: QueryList<ConnectorsDirective>;\npublic childNodes: QueryList<NodesDirective>;\npublic tags: string[] = ['layers', 'customCursor', 'connectors', 'nodes'];\n/**\n * Customizes the annotation template\n * \\@default undefined\n */\n@Template()\n    public annotationTemplate: any;\n/**\n * Customizes the node template\n * \\@default undefined\n */\n@Template()\n    public nodeTemplate: any;\n/**\n * This property represents the template content of a user handle. The user can define any HTML element as a template.\n * \\@default undefined\n */\n@Template()\n    public userHandleTemplate: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('DiagramsHierarchicalTree');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('DiagramsMindMap');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('DiagramsRadialTree');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('DiagramsComplexHierarchicalTree');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('DiagramsDataBinding');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('DiagramsSnapping');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('DiagramsPrintAndExport');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('DiagramsBpmnDiagrams');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('DiagramsSymmetricLayout');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('DiagramsConnectorBridging');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('DiagramsUndoRedo');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('DiagramsLayoutAnimation');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('DiagramsDiagramContextMenu');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('DiagramsLineRouting');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('DiagramsConnectorEditing');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('DiagramsBlazorTooltip');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('DiagramsLineDistribution');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childLayers;\n        \n\t    if (this.childCustomCursor) {\n            this.tagObjects[1].instance = this.childCustomCursor;\n        }\n        \n\t    if (this.childConnectors) {\n            this.tagObjects[2].instance = this.childConnectors;\n        }\n        \n\t    if (this.childNodes) {\n            this.tagObjects[3].instance = this.childNodes;\n        }\n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-diagram',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childLayers: new ContentChild(LayersDirective), \n        childCustomCursor: new ContentChild(CustomCursorsDirective), \n        childConnectors: new ContentChild(ConnectorsDirective), \n        childNodes: new ContentChild(NodesDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'annotationTemplate': [{ type: ContentChild, args: ['annotationTemplate', ] },],\n'nodeTemplate': [{ type: ContentChild, args: ['nodeTemplate', ] },],\n'userHandleTemplate': [{ type: ContentChild, args: ['userHandleTemplate', ] },],\n};\n}\n\nfunction DiagramComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nDiagramComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDiagramComponent.ctorParameters;\n/** @type {?} */\nDiagramComponent.propDecorators;\n/** @type {?} */\nDiagramComponent.prototype.context;\n/** @type {?} */\nDiagramComponent.prototype.tagObjects;\n/** @type {?} */\nDiagramComponent.prototype.animationComplete;\n/** @type {?} */\nDiagramComponent.prototype.click;\n/** @type {?} */\nDiagramComponent.prototype.collectionChange;\n/** @type {?} */\nDiagramComponent.prototype.commandExecute;\n/** @type {?} */\nDiagramComponent.prototype.connectionChange;\n/** @type {?} */\nDiagramComponent.prototype.contextMenuBeforeItemRender;\n/** @type {?} */\nDiagramComponent.prototype.contextMenuClick;\n/** @type {?} */\nDiagramComponent.prototype.contextMenuOpen;\n/** @type {?} */\nDiagramComponent.prototype.created;\n/** @type {?} */\nDiagramComponent.prototype.dataLoaded;\n/** @type {?} */\nDiagramComponent.prototype.doubleClick;\n/** @type {?} */\nDiagramComponent.prototype.dragEnter;\n/** @type {?} */\nDiagramComponent.prototype.dragLeave;\n/** @type {?} */\nDiagramComponent.prototype.dragOver;\n/** @type {?} */\nDiagramComponent.prototype.drop;\n/** @type {?} */\nDiagramComponent.prototype.expandStateChange;\n/** @type {?} */\nDiagramComponent.prototype.fixedUserHandleClick;\n/** @type {?} */\nDiagramComponent.prototype.historyChange;\n/** @type {?} */\nDiagramComponent.prototype.historyStateChange;\n/** @type {?} */\nDiagramComponent.prototype.keyDown;\n/** @type {?} */\nDiagramComponent.prototype.keyUp;\n/** @type {?} */\nDiagramComponent.prototype.mouseEnter;\n/** @type {?} */\nDiagramComponent.prototype.mouseLeave;\n/** @type {?} */\nDiagramComponent.prototype.mouseOver;\n/** @type {?} */\nDiagramComponent.prototype.onImageLoad;\n/** @type {?} */\nDiagramComponent.prototype.onUserHandleMouseDown;\n/** @type {?} */\nDiagramComponent.prototype.onUserHandleMouseEnter;\n/** @type {?} */\nDiagramComponent.prototype.onUserHandleMouseLeave;\n/** @type {?} */\nDiagramComponent.prototype.onUserHandleMouseUp;\n/** @type {?} */\nDiagramComponent.prototype.positionChange;\n/** @type {?} */\nDiagramComponent.prototype.propertyChange;\n/** @type {?} */\nDiagramComponent.prototype.rotateChange;\n/** @type {?} */\nDiagramComponent.prototype.scrollChange;\n/** @type {?} */\nDiagramComponent.prototype.segmentCollectionChange;\n/** @type {?} */\nDiagramComponent.prototype.selectionChange;\n/** @type {?} */\nDiagramComponent.prototype.sizeChange;\n/** @type {?} */\nDiagramComponent.prototype.sourcePointChange;\n/** @type {?} */\nDiagramComponent.prototype.targetPointChange;\n/** @type {?} */\nDiagramComponent.prototype.textEdit;\n/** @type {?} */\nDiagramComponent.prototype.childLayers;\n/** @type {?} */\nDiagramComponent.prototype.childCustomCursor;\n/** @type {?} */\nDiagramComponent.prototype.childConnectors;\n/** @type {?} */\nDiagramComponent.prototype.childNodes;\n/** @type {?} */\nDiagramComponent.prototype.tags;\n/**\n * Customizes the annotation template\n * \\@default undefined\n * @type {?}\n */\nDiagramComponent.prototype.annotationTemplate;\n/**\n * Customizes the node template\n * \\@default undefined\n * @type {?}\n */\nDiagramComponent.prototype.nodeTemplate;\n/**\n * This property represents the template content of a user handle. The user can define any HTML element as a template.\n * \\@default undefined\n * @type {?}\n */\nDiagramComponent.prototype.userHandleTemplate;\n/** @type {?} */\nDiagramComponent.prototype.registerEvents;\n/** @type {?} */\nDiagramComponent.prototype.addTwoWay;\n/** @type {?} */\nDiagramComponent.prototype.ngEle;\n/** @type {?} */\nDiagramComponent.prototype.srenderer;\n/** @type {?} */\nDiagramComponent.prototype.viewContainerRef;\n/** @type {?} */\nDiagramComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\nimport { NodeFixedUserHandlesDirective } from './node-fixeduserhandle.directive';\nimport { NodeAnnotationsDirective } from './node-annotation.directive';\nimport { PortsDirective } from './ports.directive';\n\nlet /** @type {?} */ input: string[] = ['addInfo', 'annotations', 'backgroundColor', 'borderColor', 'borderWidth', 'branch', 'children', 'collapseIcon', 'columnIndex', 'columnSpan', 'columns', 'constraints', 'container', 'data', 'dragSize', 'excludeFromLayout', 'expandIcon', 'fixedUserHandles', 'flip', 'flipMode', 'height', 'horizontalAlignment', 'id', 'isExpanded', 'layoutInfo', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'offsetX', 'offsetY', 'pivot', 'ports', 'previewSize', 'rotateAngle', 'rowIndex', 'rowSpan', 'rows', 'shadow', 'shape', 'style', 'symbolInfo', 'tooltip', 'verticalAlignment', 'visible', 'width', 'wrapper', 'zIndex'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Nodes Directive\n * ```html\n * <e-nodes>\n * <e-node></e-node>\n * </e-nodes>\n * ```\n */\nexport class NodeDirective extends ComplexBase<NodeDirective> {\npublic directivePropList: any;\npublic childFixedUserHandles: any;\npublic childAnnotations: any;\npublic childPorts: any;\npublic tags: string[] = ['fixedUserHandles', 'annotations', 'ports'];\n/**\n * Allows the user to save custom information/data about a node/connector\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic addInfo: any;\n/**\n * Defines the collection of textual annotations of nodes/connectors\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic annotations: any;\n/**\n * Sets the background color of the shape\n * \\@default 'transparent'\n */\npublic backgroundColor: any;\n/**\n * Sets the border color of the node\n * @deprecated\n * \\@default 'none'\n */\npublic borderColor: any;\n/**\n * Sets the border width of the node\n * @deprecated\n * \\@default 0\n */\npublic borderWidth: any;\n/**\n * Set the branch for the mind map\n * \\@aspdefaultvalueignore\n * \\@default ''\n */\npublic branch: any;\n/**\n * Defines the children of group element\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic children: any;\n/**\n * Defines the collapsed state of a node\n * \\@default {}\n */\npublic collapseIcon: any;\n/**\n * Used to define a index of column in the grid\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic columnIndex: any;\n/**\n * Merge the column use the property in the grid container\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic columnSpan: any;\n/**\n * Used to define the column for the grid container\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic columns: any;\n/**\n * Enables/Disables certain features of nodes \n * * None - Disable all node Constraints \n * * Select - Enables node to be selected \n * * Drag - Enables node to be Dragged \n * * Rotate - Enables node to be Rotate \n * * Shadow - Enables node to display shadow \n * * PointerEvents - Enables node to provide pointer  option \n * * Delete - Enables node to delete \n * * InConnect - Enables node to provide in connect option \n * * OutConnect - Enables node to provide out connect option \n * * Individual - Enables node to provide individual resize option \n * * Expandable - Enables node to provide Expandable option \n * * AllowDrop - Enables node to provide allow to drop option \n * * Inherit - Enables node to inherit the interaction option \n * * ResizeNorthEast - Enable ResizeNorthEast of the node \n * * ResizeEast - Enable ResizeEast of the node \n * * ResizeSouthEast - Enable ResizeSouthEast of the node \n * * ResizeSouth - Enable ResizeSouthWest of the node \n * * ResizeSouthWest - Enable ResizeSouthWest of the node \n * * ResizeSouth - Enable ResizeSouth of the node \n * * ResizeSouthWest - Enable ResizeSouthWest of the node \n * * ResizeWest - Enable ResizeWest of the node \n * * ResizeNorth - Enable ResizeNorth of the node \n * * Resize - Enables the Aspect ratio fo the node \n * * AspectRatio - Enables the Aspect ratio fo the node \n * * Tooltip - Enables or disables tool tip for the Nodes \n * * InheritTooltip - Enables or disables tool tip for the Nodes \n * * ReadOnly - Enables the  ReadOnly support for Annotation\n * \\@default 'Default'\n * \\@aspnumberenum\n */\npublic constraints: any;\n/**\n * Defines the type of the container\n * \\@aspdefaultvalueignore\n * \\@default null\n * @deprecated\n */\npublic container: any;\n/**\n * Sets the data source of the node\n */\npublic data: any;\n/**\n * Defines the size of a drop symbol\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic dragSize: any;\n/**\n * Defines whether the node should be automatically positioned or not. Applicable, if layout option is enabled.\n * \\@default false\n */\npublic excludeFromLayout: any;\n/**\n * Defines the expanded state of a node\n * \\@default {}\n */\npublic expandIcon: any;\n/**\n * Specifies the collection of the fixed user handle\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic fixedUserHandles: any;\n/**\n * Flip the element in Horizontal/Vertical directions\n * \\@aspdefaultvalueignore\n * \\@default None\n */\npublic flip: any;\n/**\n * Allows you to flip only the node or along with port and label\n * \\@aspdefaultvalueignore\n * \\@default All\n */\npublic flipMode: any;\n/**\n * Sets the height of the node\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic height: any;\n/**\n * Sets the horizontalAlignment of the node\n * \\@default 'Stretch'\n */\npublic horizontalAlignment: any;\n/**\n * Represents the unique id of nodes/connectors\n * \\@default ''\n */\npublic id: any;\n/**\n * Defines whether the node is expanded or not\n * \\@default true\n */\npublic isExpanded: any;\n/**\n * Sets the layout properties using node property\n * \\@default new NodeLayoutInfo()\n * \\@asptype object\n */\npublic layoutInfo: any;\n/**\n * Defines the space to be left between the node and its immediate parent\n * \\@default {}\n */\npublic margin: any;\n/**\n * Sets the maximum height of the node\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic maxHeight: any;\n/**\n * Sets the maximum width of the node\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic maxWidth: any;\n/**\n * Sets the minimum height of the node\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic minHeight: any;\n/**\n * Sets the minimum width of the node\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic minWidth: any;\n/**\n * Sets the x-coordinate of the position of the node\n * \\@default 0\n */\npublic offsetX: any;\n/**\n * Sets the y-coordinate of the position of the node\n * \\@default 0\n */\npublic offsetY: any;\n/**\n * Sets the reference point, that will act as the offset values(offsetX, offsetY) of a node\n * \\@default new Point(0.5,0.5)\n */\npublic pivot: any;\n/**\n * Defines the collection of connection points of nodes/connectors\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic ports: any;\n/**\n * Defines the size of the symbol preview\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic previewSize: any;\n/**\n * Sets the rotate angle of the node\n * \\@default 0\n */\npublic rotateAngle: any;\n/**\n * Used to define a index of row in the grid\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic rowIndex: any;\n/**\n * Merge the row use the property in the grid container\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic rowSpan: any;\n/**\n * Used to define the rows for the grid container\n * \\@aspdefaultvalueignore\n * @deprecated\n * \\@default undefined\n */\npublic rows: any;\n/**\n * Defines the shadow of a shape/path\n * \\@default null\n */\npublic shadow: any;\n/**\n * Defines the shape of a node\n * \\@default Basic Shape\n * \\@asptype object\n */\npublic shape: any;\n/**\n * Sets the shape style of the node\n * \\@default new ShapeStyle()\n * \\@asptype object\n */\npublic style: any;\n/**\n * Defines the symbol info of a connector\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * \\@ignoreapilink\n */\npublic symbolInfo: any;\n/**\n * defines the tooltip for the node\n * \\@default {}\n */\npublic tooltip: any;\n/**\n * Sets the verticalAlignment of the node\n * \\@default 'Stretch'\n */\npublic verticalAlignment: any;\n/**\n * Sets the visibility of the node/connector\n * \\@default true\n */\npublic visible: any;\n/**\n * Sets the width of the node\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic width: any;\n/**\n * Sets or gets the UI of a node\n * \\@default null\n * @deprecated\n */\npublic wrapper: any;\n/**\n * Defines the visual order of the node/connector in DOM\n * \\@default -1\n */\npublic zIndex: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-nodes>e-node',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n        childFixedUserHandles: new ContentChild(NodeFixedUserHandlesDirective), \n        childAnnotations: new ContentChild(NodeAnnotationsDirective), \n        childPorts: new ContentChild(PortsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction NodeDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nNodeDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNodeDirective.ctorParameters;\n/** @type {?} */\nNodeDirective.prototype.directivePropList;\n/** @type {?} */\nNodeDirective.prototype.childFixedUserHandles;\n/** @type {?} */\nNodeDirective.prototype.childAnnotations;\n/** @type {?} */\nNodeDirective.prototype.childPorts;\n/** @type {?} */\nNodeDirective.prototype.tags;\n/**\n * Allows the user to save custom information/data about a node/connector\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nNodeDirective.prototype.addInfo;\n/**\n * Defines the collection of textual annotations of nodes/connectors\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nNodeDirective.prototype.annotations;\n/**\n * Sets the background color of the shape\n * \\@default 'transparent'\n * @type {?}\n */\nNodeDirective.prototype.backgroundColor;\n/**\n * Sets the border color of the node\n * @deprecated\n * \\@default 'none'\n * @type {?}\n */\nNodeDirective.prototype.borderColor;\n/**\n * Sets the border width of the node\n * @deprecated\n * \\@default 0\n * @type {?}\n */\nNodeDirective.prototype.borderWidth;\n/**\n * Set the branch for the mind map\n * \\@aspdefaultvalueignore\n * \\@default ''\n * @type {?}\n */\nNodeDirective.prototype.branch;\n/**\n * Defines the children of group element\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nNodeDirective.prototype.children;\n/**\n * Defines the collapsed state of a node\n * \\@default {}\n * @type {?}\n */\nNodeDirective.prototype.collapseIcon;\n/**\n * Used to define a index of column in the grid\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nNodeDirective.prototype.columnIndex;\n/**\n * Merge the column use the property in the grid container\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nNodeDirective.prototype.columnSpan;\n/**\n * Used to define the column for the grid container\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nNodeDirective.prototype.columns;\n/**\n * Enables/Disables certain features of nodes \n * * None - Disable all node Constraints \n * * Select - Enables node to be selected \n * * Drag - Enables node to be Dragged \n * * Rotate - Enables node to be Rotate \n * * Shadow - Enables node to display shadow \n * * PointerEvents - Enables node to provide pointer  option \n * * Delete - Enables node to delete \n * * InConnect - Enables node to provide in connect option \n * * OutConnect - Enables node to provide out connect option \n * * Individual - Enables node to provide individual resize option \n * * Expandable - Enables node to provide Expandable option \n * * AllowDrop - Enables node to provide allow to drop option \n * * Inherit - Enables node to inherit the interaction option \n * * ResizeNorthEast - Enable ResizeNorthEast of the node \n * * ResizeEast - Enable ResizeEast of the node \n * * ResizeSouthEast - Enable ResizeSouthEast of the node \n * * ResizeSouth - Enable ResizeSouthWest of the node \n * * ResizeSouthWest - Enable ResizeSouthWest of the node \n * * ResizeSouth - Enable ResizeSouth of the node \n * * ResizeSouthWest - Enable ResizeSouthWest of the node \n * * ResizeWest - Enable ResizeWest of the node \n * * ResizeNorth - Enable ResizeNorth of the node \n * * Resize - Enables the Aspect ratio fo the node \n * * AspectRatio - Enables the Aspect ratio fo the node \n * * Tooltip - Enables or disables tool tip for the Nodes \n * * InheritTooltip - Enables or disables tool tip for the Nodes \n * * ReadOnly - Enables the  ReadOnly support for Annotation\n * \\@default 'Default'\n * \\@aspnumberenum\n * @type {?}\n */\nNodeDirective.prototype.constraints;\n/**\n * Defines the type of the container\n * \\@aspdefaultvalueignore\n * \\@default null\n * @deprecated\n * @type {?}\n */\nNodeDirective.prototype.container;\n/**\n * Sets the data source of the node\n * @type {?}\n */\nNodeDirective.prototype.data;\n/**\n * Defines the size of a drop symbol\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nNodeDirective.prototype.dragSize;\n/**\n * Defines whether the node should be automatically positioned or not. Applicable, if layout option is enabled.\n * \\@default false\n * @type {?}\n */\nNodeDirective.prototype.excludeFromLayout;\n/**\n * Defines the expanded state of a node\n * \\@default {}\n * @type {?}\n */\nNodeDirective.prototype.expandIcon;\n/**\n * Specifies the collection of the fixed user handle\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nNodeDirective.prototype.fixedUserHandles;\n/**\n * Flip the element in Horizontal/Vertical directions\n * \\@aspdefaultvalueignore\n * \\@default None\n * @type {?}\n */\nNodeDirective.prototype.flip;\n/**\n * Allows you to flip only the node or along with port and label\n * \\@aspdefaultvalueignore\n * \\@default All\n * @type {?}\n */\nNodeDirective.prototype.flipMode;\n/**\n * Sets the height of the node\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nNodeDirective.prototype.height;\n/**\n * Sets the horizontalAlignment of the node\n * \\@default 'Stretch'\n * @type {?}\n */\nNodeDirective.prototype.horizontalAlignment;\n/**\n * Represents the unique id of nodes/connectors\n * \\@default ''\n * @type {?}\n */\nNodeDirective.prototype.id;\n/**\n * Defines whether the node is expanded or not\n * \\@default true\n * @type {?}\n */\nNodeDirective.prototype.isExpanded;\n/**\n * Sets the layout properties using node property\n * \\@default new NodeLayoutInfo()\n * \\@asptype object\n * @type {?}\n */\nNodeDirective.prototype.layoutInfo;\n/**\n * Defines the space to be left between the node and its immediate parent\n * \\@default {}\n * @type {?}\n */\nNodeDirective.prototype.margin;\n/**\n * Sets the maximum height of the node\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nNodeDirective.prototype.maxHeight;\n/**\n * Sets the maximum width of the node\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nNodeDirective.prototype.maxWidth;\n/**\n * Sets the minimum height of the node\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nNodeDirective.prototype.minHeight;\n/**\n * Sets the minimum width of the node\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nNodeDirective.prototype.minWidth;\n/**\n * Sets the x-coordinate of the position of the node\n * \\@default 0\n * @type {?}\n */\nNodeDirective.prototype.offsetX;\n/**\n * Sets the y-coordinate of the position of the node\n * \\@default 0\n * @type {?}\n */\nNodeDirective.prototype.offsetY;\n/**\n * Sets the reference point, that will act as the offset values(offsetX, offsetY) of a node\n * \\@default new Point(0.5,0.5)\n * @type {?}\n */\nNodeDirective.prototype.pivot;\n/**\n * Defines the collection of connection points of nodes/connectors\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nNodeDirective.prototype.ports;\n/**\n * Defines the size of the symbol preview\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nNodeDirective.prototype.previewSize;\n/**\n * Sets the rotate angle of the node\n * \\@default 0\n * @type {?}\n */\nNodeDirective.prototype.rotateAngle;\n/**\n * Used to define a index of row in the grid\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nNodeDirective.prototype.rowIndex;\n/**\n * Merge the row use the property in the grid container\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nNodeDirective.prototype.rowSpan;\n/**\n * Used to define the rows for the grid container\n * \\@aspdefaultvalueignore\n * @deprecated\n * \\@default undefined\n * @type {?}\n */\nNodeDirective.prototype.rows;\n/**\n * Defines the shadow of a shape/path\n * \\@default null\n * @type {?}\n */\nNodeDirective.prototype.shadow;\n/**\n * Defines the shape of a node\n * \\@default Basic Shape\n * \\@asptype object\n * @type {?}\n */\nNodeDirective.prototype.shape;\n/**\n * Sets the shape style of the node\n * \\@default new ShapeStyle()\n * \\@asptype object\n * @type {?}\n */\nNodeDirective.prototype.style;\n/**\n * Defines the symbol info of a connector\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * \\@ignoreapilink\n * @type {?}\n */\nNodeDirective.prototype.symbolInfo;\n/**\n * defines the tooltip for the node\n * \\@default {}\n * @type {?}\n */\nNodeDirective.prototype.tooltip;\n/**\n * Sets the verticalAlignment of the node\n * \\@default 'Stretch'\n * @type {?}\n */\nNodeDirective.prototype.verticalAlignment;\n/**\n * Sets the visibility of the node/connector\n * \\@default true\n * @type {?}\n */\nNodeDirective.prototype.visible;\n/**\n * Sets the width of the node\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nNodeDirective.prototype.width;\n/**\n * Sets or gets the UI of a node\n * \\@default null\n * @deprecated\n * @type {?}\n */\nNodeDirective.prototype.wrapper;\n/**\n * Defines the visual order of the node/connector in DOM\n * \\@default -1\n * @type {?}\n */\nNodeDirective.prototype.zIndex;\n/** @type {?} */\nNodeDirective.prototype.viewContainerRef;\n}\n\n/**\n * Node Array Directive\n */\nexport class NodesDirective extends ArrayBase<NodesDirective> {\nconstructor() {\n        super('nodes');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-diagram>e-nodes',\n    queries: {\n        children: new ContentChildren(NodeDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NodesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nNodesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNodesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['addInfo', 'constraints', 'height', 'horizontalAlignment', 'id', 'inEdges', 'margin', 'offset', 'outEdges', 'pathData', 'shape', 'style', 'verticalAlignment', 'visibility', 'width'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Nodes Directive\n * ```html\n * <e-nodes>\n * <e-node>\n * <e-node-ports>\n * <e-node-port>\n * </e-node-port>\n * </e-node-ports>\n * </e-node>\n * </e-nodes>\n * ```\n */\nexport class PortDirective extends ComplexBase<PortDirective> {\npublic directivePropList: any;\n/**\n * Allows the user to save custom information/data about a port\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic addInfo: any;\n/**\n * Defines the constraints of port\n * \\@default 'Default'\n * \\@aspnumberenum\n */\npublic constraints: any;\n/**\n * Sets the height of the port\n * \\@default 12\n */\npublic height: any;\n/**\n * Sets the horizontal alignment of the port with respect to its immediate parent(node/connector) \n * * Stretch - Stretches the diagram element throughout its immediate parent \n * * Left - Aligns the diagram element at the left of its immediate parent \n * * Right - Aligns the diagram element at the right of its immediate parent \n * * Center - Aligns the diagram element at the center of its immediate parent \n * * Auto - Aligns the diagram element based on the characteristics of its immediate parent\n * \\@default 'Center'\n */\npublic horizontalAlignment: any;\n/**\n * Defines the unique id of the port\n * \\@default ''\n */\npublic id: any;\n/**\n * Defines the collection of the objects that are connected to a particular port\n * \\@default undefined\n * \\@blazordefaultvalue new string[] { }\n */\npublic inEdges: any;\n/**\n * Defines the space that the port has to be moved from its actual position\n * \\@default new Margin(0,0,0,0)\n */\npublic margin: any;\n/**\n * Defines the position of the port with respect to the boundaries of nodes/connector\n * \\@default new Point(0.5,0.5)\n * \\@blazortype NodePortOffset\n */\npublic offset: any;\n/**\n * Defines the collection of the objects that are connected to a particular port\n * \\@default undefined\n * \\@blazordefaultvalue new string[] { }\n */\npublic outEdges: any;\n/**\n * Defines the geometry of the port\n * \\@default ''\n */\npublic pathData: any;\n/**\n * Defines the type of the port shape \n * * X - Sets the decorator shape as X \n * * Circle - Sets the decorator shape as Circle \n * * Square - Sets the decorator shape as Square \n * * Custom - Sets the decorator shape as Custom\n * \\@default 'Square'\n */\npublic shape: any;\n/**\n * Defines the appearance of the port \n * \n * \\@default {}\n */\npublic style: any;\n/**\n * Sets the vertical alignment of the port with respect to its immediate parent(node/connector) \n * * Stretch - Stretches the diagram element throughout its immediate parent \n * * Top - Aligns the diagram element at the top of its immediate parent \n * * Bottom - Aligns the diagram element at the bottom of its immediate parent \n * * Center - Aligns the diagram element at the center of its immediate parent \n * * Auto - Aligns the diagram element based on the characteristics of its immediate parent\n * \\@default 'Center'\n */\npublic verticalAlignment: any;\n/**\n * Defines the type of the port visibility \n * * Visible - Always shows the port \n * * Hidden - Always hides the port \n * * Hover - Shows the port when the mouse hovers over a node \n * * Connect - Shows the port when a connection end point is dragged over a node\n * \\@default 'Connect'\n * \\@aspnumberenum\n */\npublic visibility: any;\n/**\n * Sets the width of the port\n * \\@default 12\n */\npublic width: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-node>e-node-ports>e-node-port',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction PortDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPortDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPortDirective.ctorParameters;\n/** @type {?} */\nPortDirective.prototype.directivePropList;\n/**\n * Allows the user to save custom information/data about a port\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nPortDirective.prototype.addInfo;\n/**\n * Defines the constraints of port\n * \\@default 'Default'\n * \\@aspnumberenum\n * @type {?}\n */\nPortDirective.prototype.constraints;\n/**\n * Sets the height of the port\n * \\@default 12\n * @type {?}\n */\nPortDirective.prototype.height;\n/**\n * Sets the horizontal alignment of the port with respect to its immediate parent(node/connector) \n * * Stretch - Stretches the diagram element throughout its immediate parent \n * * Left - Aligns the diagram element at the left of its immediate parent \n * * Right - Aligns the diagram element at the right of its immediate parent \n * * Center - Aligns the diagram element at the center of its immediate parent \n * * Auto - Aligns the diagram element based on the characteristics of its immediate parent\n * \\@default 'Center'\n * @type {?}\n */\nPortDirective.prototype.horizontalAlignment;\n/**\n * Defines the unique id of the port\n * \\@default ''\n * @type {?}\n */\nPortDirective.prototype.id;\n/**\n * Defines the collection of the objects that are connected to a particular port\n * \\@default undefined\n * \\@blazordefaultvalue new string[] { }\n * @type {?}\n */\nPortDirective.prototype.inEdges;\n/**\n * Defines the space that the port has to be moved from its actual position\n * \\@default new Margin(0,0,0,0)\n * @type {?}\n */\nPortDirective.prototype.margin;\n/**\n * Defines the position of the port with respect to the boundaries of nodes/connector\n * \\@default new Point(0.5,0.5)\n * \\@blazortype NodePortOffset\n * @type {?}\n */\nPortDirective.prototype.offset;\n/**\n * Defines the collection of the objects that are connected to a particular port\n * \\@default undefined\n * \\@blazordefaultvalue new string[] { }\n * @type {?}\n */\nPortDirective.prototype.outEdges;\n/**\n * Defines the geometry of the port\n * \\@default ''\n * @type {?}\n */\nPortDirective.prototype.pathData;\n/**\n * Defines the type of the port shape \n * * X - Sets the decorator shape as X \n * * Circle - Sets the decorator shape as Circle \n * * Square - Sets the decorator shape as Square \n * * Custom - Sets the decorator shape as Custom\n * \\@default 'Square'\n * @type {?}\n */\nPortDirective.prototype.shape;\n/**\n * Defines the appearance of the port \n * \n * \\@default {}\n * @type {?}\n */\nPortDirective.prototype.style;\n/**\n * Sets the vertical alignment of the port with respect to its immediate parent(node/connector) \n * * Stretch - Stretches the diagram element throughout its immediate parent \n * * Top - Aligns the diagram element at the top of its immediate parent \n * * Bottom - Aligns the diagram element at the bottom of its immediate parent \n * * Center - Aligns the diagram element at the center of its immediate parent \n * * Auto - Aligns the diagram element based on the characteristics of its immediate parent\n * \\@default 'Center'\n * @type {?}\n */\nPortDirective.prototype.verticalAlignment;\n/**\n * Defines the type of the port visibility \n * * Visible - Always shows the port \n * * Hidden - Always hides the port \n * * Hover - Shows the port when the mouse hovers over a node \n * * Connect - Shows the port when a connection end point is dragged over a node\n * \\@default 'Connect'\n * \\@aspnumberenum\n * @type {?}\n */\nPortDirective.prototype.visibility;\n/**\n * Sets the width of the port\n * \\@default 12\n * @type {?}\n */\nPortDirective.prototype.width;\n/** @type {?} */\nPortDirective.prototype.viewContainerRef;\n}\n\n/**\n * Port Array Directive\n */\nexport class PortsDirective extends ArrayBase<PortsDirective> {\nconstructor() {\n        super('ports');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-node>e-node-ports',\n    queries: {\n        children: new ContentChildren(PortDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PortsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPortsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPortsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['addInfo', 'annotationType', 'constraints', 'content', 'dragLimit', 'height', 'horizontalAlignment', 'hyperlink', 'id', 'margin', 'offset', 'rotateAngle', 'style', 'template', 'type', 'verticalAlignment', 'visibility', 'width'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Nodes Directive\n * ```html\n * <e-nodes>\n * <e-node>\n * <e-node-annotations>\n * <e-node-annotation>\n * </e-node-annotation>\n * </e-node-annotations>\n * </e-node>\n * </e-nodes>\n * ```\n */\nexport class NodeAnnotationDirective extends ComplexBase<NodeAnnotationDirective> {\npublic directivePropList: any;\n/**\n * Sets the type of the annotation \n *  * Shape - Sets the annotation type as Shape \n *  * Path - Sets the annotation type as Path\n * \\@default 'Shape'\n */\npublic type: any;\n/**\n * Allows the user to save custom information/data about an annotation \n * \n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic addInfo: any;\n/**\n *  Defines the type of annotation template \n * String -  Defines annotation template to be in string \n * Template - Defines annotation template to be in html content\n * \\@default 'String'\n */\npublic annotationType: any;\n/**\n * Enables or disables the default behaviors of the label. \n * * ReadOnly - Enables/Disables the ReadOnly Constraints \n * * InheritReadOnly - Enables/Disables the InheritReadOnly Constraints\n * \\@default 'InheritReadOnly'\n * \\@aspnumberenum\n */\npublic constraints: any;\n/**\n * Sets the textual description of the node/connector\n * \\@default ''\n */\npublic content: any;\n/**\n * Sets the space to be left between an annotation and its parent node/connector\n * \\@default new Margin(20,20,20,20)\n */\npublic dragLimit: any;\n/**\n * Sets the height of the text\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic height: any;\n/**\n * Sets the horizontal alignment of the text with respect to the parent node/connector \n * * Stretch - Stretches the diagram element throughout its immediate parent \n * * Left - Aligns the diagram element at the left of its immediate parent \n * * Right - Aligns the diagram element at the right of its immediate parent \n * * Center - Aligns the diagram element at the center of its immediate parent \n * * Auto - Aligns the diagram element based on the characteristics of its immediate parent\n * \\@default 'Center'\n */\npublic horizontalAlignment: any;\n/**\n * Sets the hyperlink of the label \n * \n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic hyperlink: any;\n/**\n * Defines the unique id of the annotation\n * \\@default ''\n */\npublic id: any;\n/**\n * Sets the space to be left between an annotation and its parent node/connector\n * \\@default new Margin(0,0,0,0)\n */\npublic margin: any;\n/**\n * Sets the position of the annotation with respect to its parent bounds\n * \\@default { x: 0.5, y: 0.5 }\n * \\@blazortype NodeAnnotationOffset\n */\npublic offset: any;\n/**\n * Sets the rotate angle of the text\n * \\@default 0\n */\npublic rotateAngle: any;\n/**\n * Defines the appearance of the text\n * \\@default new TextStyle()\n */\npublic style: any;\n/**\n * Sets the textual description of the node/connector\n * \\@default 'undefined'\n */\npublic template: any;\n/**\n * Sets the vertical alignment of the text with respect to the parent node/connector \n * * Stretch - Stretches the diagram element throughout its immediate parent \n * * Top - Aligns the diagram element at the top of its immediate parent \n * * Bottom - Aligns the diagram element at the bottom of its immediate parent \n * * Center - Aligns the diagram element at the center of its immediate parent \n * * Auto - Aligns the diagram element based on the characteristics of its immediate parent\n * \\@default 'Center'\n */\npublic verticalAlignment: any;\n/**\n * Defines the visibility of the label\n * \\@default true\n */\npublic visibility: any;\n/**\n * Sets the width of the text\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic width: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-node>e-node-annotations>e-node-annotation',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction NodeAnnotationDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nNodeAnnotationDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNodeAnnotationDirective.ctorParameters;\n/** @type {?} */\nNodeAnnotationDirective.prototype.directivePropList;\n/**\n * Sets the type of the annotation \n *  * Shape - Sets the annotation type as Shape \n *  * Path - Sets the annotation type as Path\n * \\@default 'Shape'\n * @type {?}\n */\nNodeAnnotationDirective.prototype.type;\n/**\n * Allows the user to save custom information/data about an annotation \n * \n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nNodeAnnotationDirective.prototype.addInfo;\n/**\n *  Defines the type of annotation template \n * String -  Defines annotation template to be in string \n * Template - Defines annotation template to be in html content\n * \\@default 'String'\n * @type {?}\n */\nNodeAnnotationDirective.prototype.annotationType;\n/**\n * Enables or disables the default behaviors of the label. \n * * ReadOnly - Enables/Disables the ReadOnly Constraints \n * * InheritReadOnly - Enables/Disables the InheritReadOnly Constraints\n * \\@default 'InheritReadOnly'\n * \\@aspnumberenum\n * @type {?}\n */\nNodeAnnotationDirective.prototype.constraints;\n/**\n * Sets the textual description of the node/connector\n * \\@default ''\n * @type {?}\n */\nNodeAnnotationDirective.prototype.content;\n/**\n * Sets the space to be left between an annotation and its parent node/connector\n * \\@default new Margin(20,20,20,20)\n * @type {?}\n */\nNodeAnnotationDirective.prototype.dragLimit;\n/**\n * Sets the height of the text\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nNodeAnnotationDirective.prototype.height;\n/**\n * Sets the horizontal alignment of the text with respect to the parent node/connector \n * * Stretch - Stretches the diagram element throughout its immediate parent \n * * Left - Aligns the diagram element at the left of its immediate parent \n * * Right - Aligns the diagram element at the right of its immediate parent \n * * Center - Aligns the diagram element at the center of its immediate parent \n * * Auto - Aligns the diagram element based on the characteristics of its immediate parent\n * \\@default 'Center'\n * @type {?}\n */\nNodeAnnotationDirective.prototype.horizontalAlignment;\n/**\n * Sets the hyperlink of the label \n * \n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nNodeAnnotationDirective.prototype.hyperlink;\n/**\n * Defines the unique id of the annotation\n * \\@default ''\n * @type {?}\n */\nNodeAnnotationDirective.prototype.id;\n/**\n * Sets the space to be left between an annotation and its parent node/connector\n * \\@default new Margin(0,0,0,0)\n * @type {?}\n */\nNodeAnnotationDirective.prototype.margin;\n/**\n * Sets the position of the annotation with respect to its parent bounds\n * \\@default { x: 0.5, y: 0.5 }\n * \\@blazortype NodeAnnotationOffset\n * @type {?}\n */\nNodeAnnotationDirective.prototype.offset;\n/**\n * Sets the rotate angle of the text\n * \\@default 0\n * @type {?}\n */\nNodeAnnotationDirective.prototype.rotateAngle;\n/**\n * Defines the appearance of the text\n * \\@default new TextStyle()\n * @type {?}\n */\nNodeAnnotationDirective.prototype.style;\n/**\n * Sets the textual description of the node/connector\n * \\@default 'undefined'\n * @type {?}\n */\nNodeAnnotationDirective.prototype.template;\n/**\n * Sets the vertical alignment of the text with respect to the parent node/connector \n * * Stretch - Stretches the diagram element throughout its immediate parent \n * * Top - Aligns the diagram element at the top of its immediate parent \n * * Bottom - Aligns the diagram element at the bottom of its immediate parent \n * * Center - Aligns the diagram element at the center of its immediate parent \n * * Auto - Aligns the diagram element based on the characteristics of its immediate parent\n * \\@default 'Center'\n * @type {?}\n */\nNodeAnnotationDirective.prototype.verticalAlignment;\n/**\n * Defines the visibility of the label\n * \\@default true\n * @type {?}\n */\nNodeAnnotationDirective.prototype.visibility;\n/**\n * Sets the width of the text\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nNodeAnnotationDirective.prototype.width;\n/** @type {?} */\nNodeAnnotationDirective.prototype.viewContainerRef;\n}\n\n/**\n * NodeAnnotation Array Directive\n */\nexport class NodeAnnotationsDirective extends ArrayBase<NodeAnnotationsDirective> {\nconstructor() {\n        super('annotations');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-node>e-node-annotations',\n    queries: {\n        children: new ContentChildren(NodeAnnotationDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NodeAnnotationsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nNodeAnnotationsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNodeAnnotationsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['cornerRadius', 'fill', 'handleStrokeColor', 'handleStrokeWidth', 'height', 'iconStrokeColor', 'iconStrokeWidth', 'id', 'margin', 'offset', 'padding', 'pathData', 'visibility', 'width'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Nodes Directive\n * ```html\n * <e-nodes>\n * <e-node>\n * <e-node-fixeduserhandles>\n * <e-node-fixeduserhandle>\n * </e-node-fixeduserhandle>\n * </e-node-fixeduserhandles>\n * </e-node>\n * </e-nodes>\n * ```\n */\nexport class NodeFixedUserHandleDirective extends ComplexBase<NodeFixedUserHandleDirective> {\npublic directivePropList: any;\n/**\n * Specifies the cornerRadius for fixed user handle container\n * \\@default 0\n */\npublic cornerRadius: any;\n/**\n * Specifies the fill color of the fixed user handle\n * \\@default 'transparent'\n */\npublic fill: any;\n/**\n * Specifies the stroke color of the fixed user handle container\n * \\@default ''\n */\npublic handleStrokeColor: any;\n/**\n * Specifies the stroke width of the fixed user handle container\n * \\@default 1\n */\npublic handleStrokeWidth: any;\n/**\n * Specifies the height of the fixed user handle\n * \\@default 10\n */\npublic height: any;\n/**\n * Specifies the stroke color of the fixed user handle\n * \\@default 'transparent'\n */\npublic iconStrokeColor: any;\n/**\n * Specifies the stroke width of the fixed user handle\n * \\@default 0\n */\npublic iconStrokeWidth: any;\n/**\n * Specifies the unique id of the fixed user handle\n * \\@default ''\n */\npublic id: any;\n/**\n * Specifies the space that the fixed user handle has to be moved from its actual position\n * \\@default new Margin(0,0,0,0)\n */\npublic margin: any;\n/**\n * Specifies the position of the node fixed user handle\n * \\@default { x: 0, y: 0 }\n */\npublic offset: any;\n/**\n * Specifies the space between the fixed user handle and container\n * \\@default new Margin(0,0,0,0)\n */\npublic padding: any;\n/**\n * Specifies the shape information for fixed user handle\n * \\@default ''\n */\npublic pathData: any;\n/**\n * Specifies the visibility of the fixed user handle\n * \\@default true\n */\npublic visibility: any;\n/**\n * Specifies the width of the fixed user handle\n * \\@default 10\n */\npublic width: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-node>e-node-fixeduserhandles>e-node-fixeduserhandle',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction NodeFixedUserHandleDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nNodeFixedUserHandleDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNodeFixedUserHandleDirective.ctorParameters;\n/** @type {?} */\nNodeFixedUserHandleDirective.prototype.directivePropList;\n/**\n * Specifies the cornerRadius for fixed user handle container\n * \\@default 0\n * @type {?}\n */\nNodeFixedUserHandleDirective.prototype.cornerRadius;\n/**\n * Specifies the fill color of the fixed user handle\n * \\@default 'transparent'\n * @type {?}\n */\nNodeFixedUserHandleDirective.prototype.fill;\n/**\n * Specifies the stroke color of the fixed user handle container\n * \\@default ''\n * @type {?}\n */\nNodeFixedUserHandleDirective.prototype.handleStrokeColor;\n/**\n * Specifies the stroke width of the fixed user handle container\n * \\@default 1\n * @type {?}\n */\nNodeFixedUserHandleDirective.prototype.handleStrokeWidth;\n/**\n * Specifies the height of the fixed user handle\n * \\@default 10\n * @type {?}\n */\nNodeFixedUserHandleDirective.prototype.height;\n/**\n * Specifies the stroke color of the fixed user handle\n * \\@default 'transparent'\n * @type {?}\n */\nNodeFixedUserHandleDirective.prototype.iconStrokeColor;\n/**\n * Specifies the stroke width of the fixed user handle\n * \\@default 0\n * @type {?}\n */\nNodeFixedUserHandleDirective.prototype.iconStrokeWidth;\n/**\n * Specifies the unique id of the fixed user handle\n * \\@default ''\n * @type {?}\n */\nNodeFixedUserHandleDirective.prototype.id;\n/**\n * Specifies the space that the fixed user handle has to be moved from its actual position\n * \\@default new Margin(0,0,0,0)\n * @type {?}\n */\nNodeFixedUserHandleDirective.prototype.margin;\n/**\n * Specifies the position of the node fixed user handle\n * \\@default { x: 0, y: 0 }\n * @type {?}\n */\nNodeFixedUserHandleDirective.prototype.offset;\n/**\n * Specifies the space between the fixed user handle and container\n * \\@default new Margin(0,0,0,0)\n * @type {?}\n */\nNodeFixedUserHandleDirective.prototype.padding;\n/**\n * Specifies the shape information for fixed user handle\n * \\@default ''\n * @type {?}\n */\nNodeFixedUserHandleDirective.prototype.pathData;\n/**\n * Specifies the visibility of the fixed user handle\n * \\@default true\n * @type {?}\n */\nNodeFixedUserHandleDirective.prototype.visibility;\n/**\n * Specifies the width of the fixed user handle\n * \\@default 10\n * @type {?}\n */\nNodeFixedUserHandleDirective.prototype.width;\n/** @type {?} */\nNodeFixedUserHandleDirective.prototype.viewContainerRef;\n}\n\n/**\n * NodeFixedUserHandle Array Directive\n */\nexport class NodeFixedUserHandlesDirective extends ArrayBase<NodeFixedUserHandlesDirective> {\nconstructor() {\n        super('fixeduserhandles');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-node>e-node-fixeduserhandles',\n    queries: {\n        children: new ContentChildren(NodeFixedUserHandleDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NodeFixedUserHandlesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nNodeFixedUserHandlesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNodeFixedUserHandlesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\nimport { ConnectorFixedUserHandlesDirective } from './connector-fixeduserhandle.directive';\nimport { ConnectorAnnotationsDirective } from './connector-annotation.directive';\n\nlet /** @type {?} */ input: string[] = ['addInfo', 'annotations', 'bridgeSpace', 'connectionPadding', 'constraints', 'cornerRadius', 'dragSize', 'excludeFromLayout', 'fixedUserHandles', 'flip', 'flipMode', 'hitPadding', 'id', 'margin', 'previewSize', 'segments', 'shape', 'sourceDecorator', 'sourceID', 'sourcePadding', 'sourcePoint', 'sourcePortID', 'style', 'symbolInfo', 'targetDecorator', 'targetID', 'targetPadding', 'targetPoint', 'targetPortID', 'tooltip', 'type', 'visible', 'wrapper', 'zIndex'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Connectors Directive\n * ```html\n * <e-connectors>\n * <e-connector></e-connector>\n * </e-connectors>\n * ```\n */\nexport class ConnectorDirective extends ComplexBase<ConnectorDirective> {\npublic directivePropList: any;\npublic childFixedUserHandles: any;\npublic childAnnotations: any;\npublic tags: string[] = ['fixedUserHandles', 'annotations'];\n/**\n * Defines the type of the connector \n * * Straight - Sets the segment type as Straight \n * * Orthogonal - Sets the segment type as Orthogonal \n * * Bezier - Sets the segment type as Bezier\n * \\@default 'Straight'\n * \\@asptype Syncfusion.EJ2.Diagrams.Segments\n */\npublic type: any;\n/**\n * Allows the user to save custom information/data about a node/connector\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic addInfo: any;\n/**\n *\n */\npublic annotations: any;\n/**\n * Defines the bridgeSpace of connector\n * \\@default 10\n */\npublic bridgeSpace: any;\n/**\n * Sets the connector padding value\n * \\@default 0\n */\npublic connectionPadding: any;\n/**\n * Defines the constraints of connector \n * * None - Interaction of the connectors cannot be done. \n * * Select - Selects the connector. \n * * Delete - Delete the connector. \n * * Drag - Drag the connector. \n * * DragSourceEnd - Drag the source end of the connector. \n * * DragTargetEnd - Drag the target end of the connector. \n * * DragSegmentThump - Drag the segment thumb of the connector. \n * * AllowDrop - Allow to drop a node. \n * * Bridging - Creates bridge  on intersection of two connectors. \n * * InheritBridging - Creates bridge  on intersection of two connectors. \n * * PointerEvents - Sets the pointer events. \n * * Tooltip - Displays a tooltip for the connectors. \n * * InheritToolTip - Displays a tooltip for the connectors. \n * * Interaction - Features of the connector used for interaction. \n * * ReadOnly - Enables ReadOnly\n * \\@default 'Default'\n * \\@aspnumberenum\n */\npublic constraints: any;\n/**\n * Sets the corner radius of the connector\n * \\@default 0\n */\npublic cornerRadius: any;\n/**\n * Defines the size of a drop symbol\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic dragSize: any;\n/**\n * Defines whether the node should be automatically positioned or not. Applicable, if layout option is enabled.\n * \\@default false\n */\npublic excludeFromLayout: any;\n/**\n * Specifies the collection of the fixed user handle\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic fixedUserHandles: any;\n/**\n * Flip the element in Horizontal/Vertical directions\n * \\@aspdefaultvalueignore\n * \\@default None\n */\npublic flip: any;\n/**\n * Allows you to flip only the node or along with port and label\n * \\@aspdefaultvalueignore\n * \\@default All\n */\npublic flipMode: any;\n/**\n * Sets the connector padding value\n * \\@default 10\n */\npublic hitPadding: any;\n/**\n * Represents the unique id of nodes/connectors\n * \\@default ''\n */\npublic id: any;\n/**\n * Defines the space to be left between the node and its immediate parent\n * \\@default {}\n */\npublic margin: any;\n/**\n * Defines the size of the symbol preview\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic previewSize: any;\n/**\n * Defines the segments\n * \\@default []\n * \\@asptype object\n */\npublic segments: any;\n/**\n * Defines the shape of the connector\n * \\@default 'Bpmn'\n * \\@asptype object\n */\npublic shape: any;\n/**\n * Defines the source decorator of the connector\n * \\@default new Decorator()\n */\npublic sourceDecorator: any;\n/**\n * Sets the source node/connector object of the connector\n * \\@default null\n */\npublic sourceID: any;\n/**\n * Sets the source padding of the connector\n * \\@default 0\n */\npublic sourcePadding: any;\n/**\n * Sets the beginning point of the connector\n * \\@default new Point(0,0)\n */\npublic sourcePoint: any;\n/**\n * Sets the unique id of the source port of the connector\n * \\@default ''\n */\npublic sourcePortID: any;\n/**\n * Defines the appearance of the connection path\n * \\@default ''\n */\npublic style: any;\n/**\n * Defines the symbol info of a connector\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * \\@ignoreapilink\n */\npublic symbolInfo: any;\n/**\n * Defines the target decorator of the connector\n * \\@default new Decorator()\n */\npublic targetDecorator: any;\n/**\n * Sets the target node/connector object of the connector\n * \\@default null\n */\npublic targetID: any;\n/**\n * Sets the target padding of the connector\n * \\@default 0\n */\npublic targetPadding: any;\n/**\n * Sets the end point of the connector\n * \\@default new Point(0,0)\n */\npublic targetPoint: any;\n/**\n * Sets the unique id of the target port of the connector\n * \\@default ''\n */\npublic targetPortID: any;\n/**\n * defines the tooltip for the connector\n * \\@default new DiagramToolTip();\n */\npublic tooltip: any;\n/**\n * Sets the visibility of the node/connector\n * \\@default true\n */\npublic visible: any;\n/**\n * Defines the UI of the connector\n * \\@default null\n * @deprecated\n */\npublic wrapper: any;\n/**\n * Defines the visual order of the node/connector in DOM\n * \\@default -1\n */\npublic zIndex: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-connectors>e-connector',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n        childFixedUserHandles: new ContentChild(ConnectorFixedUserHandlesDirective), \n        childAnnotations: new ContentChild(ConnectorAnnotationsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction ConnectorDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectorDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nConnectorDirective.ctorParameters;\n/** @type {?} */\nConnectorDirective.prototype.directivePropList;\n/** @type {?} */\nConnectorDirective.prototype.childFixedUserHandles;\n/** @type {?} */\nConnectorDirective.prototype.childAnnotations;\n/** @type {?} */\nConnectorDirective.prototype.tags;\n/**\n * Defines the type of the connector \n * * Straight - Sets the segment type as Straight \n * * Orthogonal - Sets the segment type as Orthogonal \n * * Bezier - Sets the segment type as Bezier\n * \\@default 'Straight'\n * \\@asptype Syncfusion.EJ2.Diagrams.Segments\n * @type {?}\n */\nConnectorDirective.prototype.type;\n/**\n * Allows the user to save custom information/data about a node/connector\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nConnectorDirective.prototype.addInfo;\n/**\n *\n * @type {?}\n */\nConnectorDirective.prototype.annotations;\n/**\n * Defines the bridgeSpace of connector\n * \\@default 10\n * @type {?}\n */\nConnectorDirective.prototype.bridgeSpace;\n/**\n * Sets the connector padding value\n * \\@default 0\n * @type {?}\n */\nConnectorDirective.prototype.connectionPadding;\n/**\n * Defines the constraints of connector \n * * None - Interaction of the connectors cannot be done. \n * * Select - Selects the connector. \n * * Delete - Delete the connector. \n * * Drag - Drag the connector. \n * * DragSourceEnd - Drag the source end of the connector. \n * * DragTargetEnd - Drag the target end of the connector. \n * * DragSegmentThump - Drag the segment thumb of the connector. \n * * AllowDrop - Allow to drop a node. \n * * Bridging - Creates bridge  on intersection of two connectors. \n * * InheritBridging - Creates bridge  on intersection of two connectors. \n * * PointerEvents - Sets the pointer events. \n * * Tooltip - Displays a tooltip for the connectors. \n * * InheritToolTip - Displays a tooltip for the connectors. \n * * Interaction - Features of the connector used for interaction. \n * * ReadOnly - Enables ReadOnly\n * \\@default 'Default'\n * \\@aspnumberenum\n * @type {?}\n */\nConnectorDirective.prototype.constraints;\n/**\n * Sets the corner radius of the connector\n * \\@default 0\n * @type {?}\n */\nConnectorDirective.prototype.cornerRadius;\n/**\n * Defines the size of a drop symbol\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nConnectorDirective.prototype.dragSize;\n/**\n * Defines whether the node should be automatically positioned or not. Applicable, if layout option is enabled.\n * \\@default false\n * @type {?}\n */\nConnectorDirective.prototype.excludeFromLayout;\n/**\n * Specifies the collection of the fixed user handle\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nConnectorDirective.prototype.fixedUserHandles;\n/**\n * Flip the element in Horizontal/Vertical directions\n * \\@aspdefaultvalueignore\n * \\@default None\n * @type {?}\n */\nConnectorDirective.prototype.flip;\n/**\n * Allows you to flip only the node or along with port and label\n * \\@aspdefaultvalueignore\n * \\@default All\n * @type {?}\n */\nConnectorDirective.prototype.flipMode;\n/**\n * Sets the connector padding value\n * \\@default 10\n * @type {?}\n */\nConnectorDirective.prototype.hitPadding;\n/**\n * Represents the unique id of nodes/connectors\n * \\@default ''\n * @type {?}\n */\nConnectorDirective.prototype.id;\n/**\n * Defines the space to be left between the node and its immediate parent\n * \\@default {}\n * @type {?}\n */\nConnectorDirective.prototype.margin;\n/**\n * Defines the size of the symbol preview\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nConnectorDirective.prototype.previewSize;\n/**\n * Defines the segments\n * \\@default []\n * \\@asptype object\n * @type {?}\n */\nConnectorDirective.prototype.segments;\n/**\n * Defines the shape of the connector\n * \\@default 'Bpmn'\n * \\@asptype object\n * @type {?}\n */\nConnectorDirective.prototype.shape;\n/**\n * Defines the source decorator of the connector\n * \\@default new Decorator()\n * @type {?}\n */\nConnectorDirective.prototype.sourceDecorator;\n/**\n * Sets the source node/connector object of the connector\n * \\@default null\n * @type {?}\n */\nConnectorDirective.prototype.sourceID;\n/**\n * Sets the source padding of the connector\n * \\@default 0\n * @type {?}\n */\nConnectorDirective.prototype.sourcePadding;\n/**\n * Sets the beginning point of the connector\n * \\@default new Point(0,0)\n * @type {?}\n */\nConnectorDirective.prototype.sourcePoint;\n/**\n * Sets the unique id of the source port of the connector\n * \\@default ''\n * @type {?}\n */\nConnectorDirective.prototype.sourcePortID;\n/**\n * Defines the appearance of the connection path\n * \\@default ''\n * @type {?}\n */\nConnectorDirective.prototype.style;\n/**\n * Defines the symbol info of a connector\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * \\@ignoreapilink\n * @type {?}\n */\nConnectorDirective.prototype.symbolInfo;\n/**\n * Defines the target decorator of the connector\n * \\@default new Decorator()\n * @type {?}\n */\nConnectorDirective.prototype.targetDecorator;\n/**\n * Sets the target node/connector object of the connector\n * \\@default null\n * @type {?}\n */\nConnectorDirective.prototype.targetID;\n/**\n * Sets the target padding of the connector\n * \\@default 0\n * @type {?}\n */\nConnectorDirective.prototype.targetPadding;\n/**\n * Sets the end point of the connector\n * \\@default new Point(0,0)\n * @type {?}\n */\nConnectorDirective.prototype.targetPoint;\n/**\n * Sets the unique id of the target port of the connector\n * \\@default ''\n * @type {?}\n */\nConnectorDirective.prototype.targetPortID;\n/**\n * defines the tooltip for the connector\n * \\@default new DiagramToolTip();\n * @type {?}\n */\nConnectorDirective.prototype.tooltip;\n/**\n * Sets the visibility of the node/connector\n * \\@default true\n * @type {?}\n */\nConnectorDirective.prototype.visible;\n/**\n * Defines the UI of the connector\n * \\@default null\n * @deprecated\n * @type {?}\n */\nConnectorDirective.prototype.wrapper;\n/**\n * Defines the visual order of the node/connector in DOM\n * \\@default -1\n * @type {?}\n */\nConnectorDirective.prototype.zIndex;\n/** @type {?} */\nConnectorDirective.prototype.viewContainerRef;\n}\n\n/**\n * Connector Array Directive\n */\nexport class ConnectorsDirective extends ArrayBase<ConnectorsDirective> {\nconstructor() {\n        super('connectors');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-diagram>e-connectors',\n    queries: {\n        children: new ContentChildren(ConnectorDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ConnectorsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectorsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nConnectorsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['addInfo', 'alignment', 'annotationType', 'constraints', 'content', 'displacement', 'dragLimit', 'height', 'horizontalAlignment', 'hyperlink', 'id', 'margin', 'offset', 'rotateAngle', 'segmentAngle', 'style', 'template', 'type', 'verticalAlignment', 'visibility', 'width'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Connectors Directive\n * ```html\n * <e-connectors>\n * <e-connector>\n * <e-connector-annotations>\n * <e-connector-annotation>\n * </e-connector-annotation>\n * </e-connector-annotations>\n * </e-connector>\n * </e-connectors>\n * ```\n */\nexport class ConnectorAnnotationDirective extends ComplexBase<ConnectorAnnotationDirective> {\npublic directivePropList: any;\n/**\n * Sets the type of the annotation \n *  * Shape - Sets the annotation type as Shape \n *  * Path - Sets the annotation type as Path\n * \\@default 'Shape'\n */\npublic type: any;\n/**\n * Allows the user to save custom information/data about an annotation \n * \n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic addInfo: any;\n/**\n * Sets the segment alignment of annotation \n *  * Center - Aligns the annotation at the center of a connector segment \n *  * Before - Aligns the annotation before a connector segment \n *  * After - Aligns the annotation after a connector segment\n * \\@default Center\n */\npublic alignment: any;\n/**\n *  Defines the type of annotation template \n * String -  Defines annotation template to be in string \n * Template - Defines annotation template to be in html content\n * \\@default 'String'\n */\npublic annotationType: any;\n/**\n * Enables or disables the default behaviors of the label. \n * * ReadOnly - Enables/Disables the ReadOnly Constraints \n * * InheritReadOnly - Enables/Disables the InheritReadOnly Constraints\n * \\@default 'InheritReadOnly'\n * \\@aspnumberenum\n */\npublic constraints: any;\n/**\n * Sets the textual description of the node/connector\n * \\@default ''\n */\npublic content: any;\n/**\n * Sets the displacement of an annotation from its actual position\n * \\@aspdefaultvalueignore\n * \\@blazordefaultvalueignore\n * \\@default undefined\n */\npublic displacement: any;\n/**\n * Sets the space to be left between an annotation and its parent node/connector\n * \\@default new Margin(20,20,20,20)\n */\npublic dragLimit: any;\n/**\n * Sets the height of the text\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic height: any;\n/**\n * Sets the horizontal alignment of the text with respect to the parent node/connector \n * * Stretch - Stretches the diagram element throughout its immediate parent \n * * Left - Aligns the diagram element at the left of its immediate parent \n * * Right - Aligns the diagram element at the right of its immediate parent \n * * Center - Aligns the diagram element at the center of its immediate parent \n * * Auto - Aligns the diagram element based on the characteristics of its immediate parent\n * \\@default 'Center'\n */\npublic horizontalAlignment: any;\n/**\n * Sets the hyperlink of the label \n * \n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic hyperlink: any;\n/**\n * Defines the unique id of the annotation\n * \\@default ''\n */\npublic id: any;\n/**\n * Sets the space to be left between an annotation and its parent node/connector\n * \\@default new Margin(0,0,0,0)\n */\npublic margin: any;\n/**\n * Sets the segment offset of annotation\n * \\@default 0.5\n */\npublic offset: any;\n/**\n * Sets the rotate angle of the text\n * \\@default 0\n */\npublic rotateAngle: any;\n/**\n * Enable/Disable the angle based on the connector segment\n * \\@default false\n */\npublic segmentAngle: any;\n/**\n * Defines the appearance of the text\n * \\@default new TextStyle()\n */\npublic style: any;\n/**\n * Sets the textual description of the node/connector\n * \\@default 'undefined'\n */\npublic template: any;\n/**\n * Sets the vertical alignment of the text with respect to the parent node/connector \n * * Stretch - Stretches the diagram element throughout its immediate parent \n * * Top - Aligns the diagram element at the top of its immediate parent \n * * Bottom - Aligns the diagram element at the bottom of its immediate parent \n * * Center - Aligns the diagram element at the center of its immediate parent \n * * Auto - Aligns the diagram element based on the characteristics of its immediate parent\n * \\@default 'Center'\n */\npublic verticalAlignment: any;\n/**\n * Defines the visibility of the label\n * \\@default true\n */\npublic visibility: any;\n/**\n * Sets the width of the text\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic width: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-connector>e-connector-annotations>e-connector-annotation',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction ConnectorAnnotationDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectorAnnotationDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nConnectorAnnotationDirective.ctorParameters;\n/** @type {?} */\nConnectorAnnotationDirective.prototype.directivePropList;\n/**\n * Sets the type of the annotation \n *  * Shape - Sets the annotation type as Shape \n *  * Path - Sets the annotation type as Path\n * \\@default 'Shape'\n * @type {?}\n */\nConnectorAnnotationDirective.prototype.type;\n/**\n * Allows the user to save custom information/data about an annotation \n * \n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nConnectorAnnotationDirective.prototype.addInfo;\n/**\n * Sets the segment alignment of annotation \n *  * Center - Aligns the annotation at the center of a connector segment \n *  * Before - Aligns the annotation before a connector segment \n *  * After - Aligns the annotation after a connector segment\n * \\@default Center\n * @type {?}\n */\nConnectorAnnotationDirective.prototype.alignment;\n/**\n *  Defines the type of annotation template \n * String -  Defines annotation template to be in string \n * Template - Defines annotation template to be in html content\n * \\@default 'String'\n * @type {?}\n */\nConnectorAnnotationDirective.prototype.annotationType;\n/**\n * Enables or disables the default behaviors of the label. \n * * ReadOnly - Enables/Disables the ReadOnly Constraints \n * * InheritReadOnly - Enables/Disables the InheritReadOnly Constraints\n * \\@default 'InheritReadOnly'\n * \\@aspnumberenum\n * @type {?}\n */\nConnectorAnnotationDirective.prototype.constraints;\n/**\n * Sets the textual description of the node/connector\n * \\@default ''\n * @type {?}\n */\nConnectorAnnotationDirective.prototype.content;\n/**\n * Sets the displacement of an annotation from its actual position\n * \\@aspdefaultvalueignore\n * \\@blazordefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nConnectorAnnotationDirective.prototype.displacement;\n/**\n * Sets the space to be left between an annotation and its parent node/connector\n * \\@default new Margin(20,20,20,20)\n * @type {?}\n */\nConnectorAnnotationDirective.prototype.dragLimit;\n/**\n * Sets the height of the text\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nConnectorAnnotationDirective.prototype.height;\n/**\n * Sets the horizontal alignment of the text with respect to the parent node/connector \n * * Stretch - Stretches the diagram element throughout its immediate parent \n * * Left - Aligns the diagram element at the left of its immediate parent \n * * Right - Aligns the diagram element at the right of its immediate parent \n * * Center - Aligns the diagram element at the center of its immediate parent \n * * Auto - Aligns the diagram element based on the characteristics of its immediate parent\n * \\@default 'Center'\n * @type {?}\n */\nConnectorAnnotationDirective.prototype.horizontalAlignment;\n/**\n * Sets the hyperlink of the label \n * \n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nConnectorAnnotationDirective.prototype.hyperlink;\n/**\n * Defines the unique id of the annotation\n * \\@default ''\n * @type {?}\n */\nConnectorAnnotationDirective.prototype.id;\n/**\n * Sets the space to be left between an annotation and its parent node/connector\n * \\@default new Margin(0,0,0,0)\n * @type {?}\n */\nConnectorAnnotationDirective.prototype.margin;\n/**\n * Sets the segment offset of annotation\n * \\@default 0.5\n * @type {?}\n */\nConnectorAnnotationDirective.prototype.offset;\n/**\n * Sets the rotate angle of the text\n * \\@default 0\n * @type {?}\n */\nConnectorAnnotationDirective.prototype.rotateAngle;\n/**\n * Enable/Disable the angle based on the connector segment\n * \\@default false\n * @type {?}\n */\nConnectorAnnotationDirective.prototype.segmentAngle;\n/**\n * Defines the appearance of the text\n * \\@default new TextStyle()\n * @type {?}\n */\nConnectorAnnotationDirective.prototype.style;\n/**\n * Sets the textual description of the node/connector\n * \\@default 'undefined'\n * @type {?}\n */\nConnectorAnnotationDirective.prototype.template;\n/**\n * Sets the vertical alignment of the text with respect to the parent node/connector \n * * Stretch - Stretches the diagram element throughout its immediate parent \n * * Top - Aligns the diagram element at the top of its immediate parent \n * * Bottom - Aligns the diagram element at the bottom of its immediate parent \n * * Center - Aligns the diagram element at the center of its immediate parent \n * * Auto - Aligns the diagram element based on the characteristics of its immediate parent\n * \\@default 'Center'\n * @type {?}\n */\nConnectorAnnotationDirective.prototype.verticalAlignment;\n/**\n * Defines the visibility of the label\n * \\@default true\n * @type {?}\n */\nConnectorAnnotationDirective.prototype.visibility;\n/**\n * Sets the width of the text\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nConnectorAnnotationDirective.prototype.width;\n/** @type {?} */\nConnectorAnnotationDirective.prototype.viewContainerRef;\n}\n\n/**\n * ConnectorAnnotation Array Directive\n */\nexport class ConnectorAnnotationsDirective extends ArrayBase<ConnectorAnnotationsDirective> {\nconstructor() {\n        super('annotations');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-connector>e-connector-annotations',\n    queries: {\n        children: new ContentChildren(ConnectorAnnotationDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ConnectorAnnotationsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectorAnnotationsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nConnectorAnnotationsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['alignment', 'cornerRadius', 'displacement', 'fill', 'handleStrokeColor', 'handleStrokeWidth', 'height', 'iconStrokeColor', 'iconStrokeWidth', 'id', 'offset', 'padding', 'pathData', 'visibility', 'width'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Connectors Directive\n * ```html\n * <e-connectors>\n * <e-connector>\n * <e-connector-fixeduserhandles>\n * <e-connector-fixeduserhandle>\n * </e-connector-fixeduserhandle>\n * </e-connector-fixeduserhandles>\n * </e-connector>\n * </e-connectors>\n * ```\n */\nexport class ConnectorFixedUserHandleDirective extends ComplexBase<ConnectorFixedUserHandleDirective> {\npublic directivePropList: any;\n/**\n * Specifies the segment alignment of the fixed user handle \n *  * Center - Aligns the annotation at the center of a connector segment \n *  * Before - Aligns the annotation before a connector segment \n *  * After - Aligns the annotation after a connector segment\n * \\@default Center\n */\npublic alignment: any;\n/**\n * Specifies the cornerRadius for fixed user handle container\n * \\@default 0\n */\npublic cornerRadius: any;\n/**\n * Specifies the displacement of an fixed user handle from its actual position\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic displacement: any;\n/**\n * Specifies the fill color of the fixed user handle\n * \\@default 'transparent'\n */\npublic fill: any;\n/**\n * Specifies the stroke color of the fixed user handle container\n * \\@default ''\n */\npublic handleStrokeColor: any;\n/**\n * Specifies the stroke width of the fixed user handle container\n * \\@default 1\n */\npublic handleStrokeWidth: any;\n/**\n * Specifies the height of the fixed user handle\n * \\@default 10\n */\npublic height: any;\n/**\n * Specifies the stroke color of the fixed user handle\n * \\@default 'transparent'\n */\npublic iconStrokeColor: any;\n/**\n * Specifies the stroke width of the fixed user handle\n * \\@default 0\n */\npublic iconStrokeWidth: any;\n/**\n * Specifies the unique id of the fixed user handle\n * \\@default ''\n */\npublic id: any;\n/**\n * Specifies the position of the connector fixed user handle\n * \\@default 0.5\n */\npublic offset: any;\n/**\n * Specifies the space between the fixed user handle and container\n * \\@default new Margin(0,0,0,0)\n */\npublic padding: any;\n/**\n * Specifies the shape information for fixed user handle\n * \\@default ''\n */\npublic pathData: any;\n/**\n * Specifies the visibility of the fixed user handle\n * \\@default true\n */\npublic visibility: any;\n/**\n * Specifies the width of the fixed user handle\n * \\@default 10\n */\npublic width: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-connector>e-connector-fixeduserhandles>e-connector-fixeduserhandle',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction ConnectorFixedUserHandleDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectorFixedUserHandleDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nConnectorFixedUserHandleDirective.ctorParameters;\n/** @type {?} */\nConnectorFixedUserHandleDirective.prototype.directivePropList;\n/**\n * Specifies the segment alignment of the fixed user handle \n *  * Center - Aligns the annotation at the center of a connector segment \n *  * Before - Aligns the annotation before a connector segment \n *  * After - Aligns the annotation after a connector segment\n * \\@default Center\n * @type {?}\n */\nConnectorFixedUserHandleDirective.prototype.alignment;\n/**\n * Specifies the cornerRadius for fixed user handle container\n * \\@default 0\n * @type {?}\n */\nConnectorFixedUserHandleDirective.prototype.cornerRadius;\n/**\n * Specifies the displacement of an fixed user handle from its actual position\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nConnectorFixedUserHandleDirective.prototype.displacement;\n/**\n * Specifies the fill color of the fixed user handle\n * \\@default 'transparent'\n * @type {?}\n */\nConnectorFixedUserHandleDirective.prototype.fill;\n/**\n * Specifies the stroke color of the fixed user handle container\n * \\@default ''\n * @type {?}\n */\nConnectorFixedUserHandleDirective.prototype.handleStrokeColor;\n/**\n * Specifies the stroke width of the fixed user handle container\n * \\@default 1\n * @type {?}\n */\nConnectorFixedUserHandleDirective.prototype.handleStrokeWidth;\n/**\n * Specifies the height of the fixed user handle\n * \\@default 10\n * @type {?}\n */\nConnectorFixedUserHandleDirective.prototype.height;\n/**\n * Specifies the stroke color of the fixed user handle\n * \\@default 'transparent'\n * @type {?}\n */\nConnectorFixedUserHandleDirective.prototype.iconStrokeColor;\n/**\n * Specifies the stroke width of the fixed user handle\n * \\@default 0\n * @type {?}\n */\nConnectorFixedUserHandleDirective.prototype.iconStrokeWidth;\n/**\n * Specifies the unique id of the fixed user handle\n * \\@default ''\n * @type {?}\n */\nConnectorFixedUserHandleDirective.prototype.id;\n/**\n * Specifies the position of the connector fixed user handle\n * \\@default 0.5\n * @type {?}\n */\nConnectorFixedUserHandleDirective.prototype.offset;\n/**\n * Specifies the space between the fixed user handle and container\n * \\@default new Margin(0,0,0,0)\n * @type {?}\n */\nConnectorFixedUserHandleDirective.prototype.padding;\n/**\n * Specifies the shape information for fixed user handle\n * \\@default ''\n * @type {?}\n */\nConnectorFixedUserHandleDirective.prototype.pathData;\n/**\n * Specifies the visibility of the fixed user handle\n * \\@default true\n * @type {?}\n */\nConnectorFixedUserHandleDirective.prototype.visibility;\n/**\n * Specifies the width of the fixed user handle\n * \\@default 10\n * @type {?}\n */\nConnectorFixedUserHandleDirective.prototype.width;\n/** @type {?} */\nConnectorFixedUserHandleDirective.prototype.viewContainerRef;\n}\n\n/**\n * ConnectorFixedUserHandle Array Directive\n */\nexport class ConnectorFixedUserHandlesDirective extends ArrayBase<ConnectorFixedUserHandlesDirective> {\nconstructor() {\n        super('fixeduserhandles');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-connector>e-connector-fixeduserhandles',\n    queries: {\n        children: new ContentChildren(ConnectorFixedUserHandleDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ConnectorFixedUserHandlesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectorFixedUserHandlesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nConnectorFixedUserHandlesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['action', 'cursor'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Cursor Maps Directive\n * ```html\n * <e-cusrsormaps>\n * <e-cursormap></e-cursormap>\n * </e-cursormaps>\n * ```\n */\nexport class CustomCursorDirective extends ComplexBase<CustomCursorDirective> {\npublic directivePropList: any;\n/**\n * Defines the property of a Data Map Items\n */\npublic action: any;\n/**\n * Defines the Fields for the Data Map Items\n * \\@default ''\n */\npublic cursor: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-cursormaps>e-cursormap',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction CustomCursorDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nCustomCursorDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCustomCursorDirective.ctorParameters;\n/** @type {?} */\nCustomCursorDirective.prototype.directivePropList;\n/**\n * Defines the property of a Data Map Items\n * @type {?}\n */\nCustomCursorDirective.prototype.action;\n/**\n * Defines the Fields for the Data Map Items\n * \\@default ''\n * @type {?}\n */\nCustomCursorDirective.prototype.cursor;\n/** @type {?} */\nCustomCursorDirective.prototype.viewContainerRef;\n}\n\n/**\n * CustomCursor Array Directive\n */\nexport class CustomCursorsDirective extends ArrayBase<CustomCursorsDirective> {\nconstructor() {\n        super('customcursor');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-diagram>e-cursormaps',\n    queries: {\n        children: new ContentChildren(CustomCursorDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CustomCursorsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nCustomCursorsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCustomCursorsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['addInfo', 'id', 'lock', 'objects', 'visible', 'zIndex'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Layers Directive\n * ```html\n * <e-layers>\n * <e-layer></e-layer>\n * </e-layers>\n * ```\n */\nexport class LayerDirective extends ComplexBase<LayerDirective> {\npublic directivePropList: any;\n/**\n * Defines the description of the layer \n * \n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic addInfo: any;\n/**\n * Defines the id of a diagram layer\n * \\@default ''\n */\npublic id: any;\n/**\n * Enables or disables editing objects in a particular layer\n * \\@default false\n */\npublic lock: any;\n/**\n * Defines the collection of the objects that are added to a particular layer\n * \\@aspdefaultvalueignore\n * \\@default undefined\n */\npublic objects: any;\n/**\n * Enables or disables the visibility of objects in a particular layer\n * \\@default true\n */\npublic visible: any;\n/**\n * Defines the zOrder of the layer\n * \\@default -1\n */\npublic zIndex: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-layers>e-layer',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction LayerDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nLayerDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLayerDirective.ctorParameters;\n/** @type {?} */\nLayerDirective.prototype.directivePropList;\n/**\n * Defines the description of the layer \n * \n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nLayerDirective.prototype.addInfo;\n/**\n * Defines the id of a diagram layer\n * \\@default ''\n * @type {?}\n */\nLayerDirective.prototype.id;\n/**\n * Enables or disables editing objects in a particular layer\n * \\@default false\n * @type {?}\n */\nLayerDirective.prototype.lock;\n/**\n * Defines the collection of the objects that are added to a particular layer\n * \\@aspdefaultvalueignore\n * \\@default undefined\n * @type {?}\n */\nLayerDirective.prototype.objects;\n/**\n * Enables or disables the visibility of objects in a particular layer\n * \\@default true\n * @type {?}\n */\nLayerDirective.prototype.visible;\n/**\n * Defines the zOrder of the layer\n * \\@default -1\n * @type {?}\n */\nLayerDirective.prototype.zIndex;\n/** @type {?} */\nLayerDirective.prototype.viewContainerRef;\n}\n\n/**\n * Layer Array Directive\n */\nexport class LayersDirective extends ArrayBase<LayersDirective> {\nconstructor() {\n        super('layers');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-diagram>e-layers',\n    queries: {\n        children: new ContentChildren(LayerDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LayersDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nLayersDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLayersDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["CommonModule","NgModule","OverviewComponent","Injector","ViewContainerRef","Renderer2","__metadata","ElementRef","ComponentMixins","ComponentBase","__decorate","ChangeDetectionStrategy","outputs","inputs","Component","Overview","setValue","twoWays","SymbolPaletteComponent","ContentChild","SymbolPalette","ContentChildren","Directive","ArrayBase","input","ComplexBase","LineDistribution","BlazorTooltip","ConnectorEditing","LineRouting","DiagramContextMenu","LayoutAnimation","UndoRedo","ConnectorBridging","SymmetricLayout","BpmnDiagrams","PrintAndExport","Snapping","DataBinding","ComplexHierarchicalTree","RadialTree","MindMap","HierarchicalTree","DiagramComponent","Template","Diagram"],"mappings":";;;;;;;;;;;;;;;;AkBKA,IAAI,KAAA,GAAkB,CAAA,SAAE,EAAU,IAAA,EAAM,MAAA,EAAQ,SAAA,EAAW,SAAA,EAAW,QAAA,CAAS,CAAC;AAChF,IAAI,OAAA,GAAoB,EAAA,CAAG;;;;;;;;;AAS3B,IAAA,cAAA,kBAAA,UAAA,MAAA,EAAA;IACC,SAAD,CAAA,cAAA,EAAA,MAAA,CAAA,CAAC;;;;IAqCD,SAAA,cAAA,CAEwB,gBAAkB,EAF1C;QAAA,IAAA,KAAA,GACQ,MADR,CAAA,IAAA,CAAA,IAAA,CACe,IADf,IAAA,CAKK;QAHmB,KAAxB,CAAA,gBAAwB,GAAA,gBAAA,CAAkB;QAAlCgB,uBAAQ,CAAC,iBAAiB,EAAE,KAAI,EAAE,KAAI,CAAC,gBAAgB,CAAC,CAAC;QACzD,KAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAC7B,KAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;;KAClC;;CA3CL,CACCS,0BAAA,CADD,CAAA,CAAA;AA8CO,cAAP,CAAA,UAAO,GAAoC;IAD3C,EAEE,IAAA,EAAMH,cAAA,EAAW,IAAA,EAAM,CAAA;gBADrB,QAAQ,EAEE,kBAAA;gBADV,MAAM,EAEE,KAAA;gBADR,OAAO,EAEE,OAAA;gBADT,OAAO,EAEE,EAAR;aACJ,EAEC,EAAG;CADJ,CAEC;;;;AAED,cAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA;IACD,EAAC,IAAI,EAAElB,qBAAgB,GAAG;CACzB,CAAD,EAAC,CAAC;;;;AA2DF,IAAA,eAAA,kBAAA,UAAA,MAAA,EAAA;IAnDC,SAAD,CAAA,eAAA,EAAA,MAAA,CAAA,CAAC;IAoDD,SAAA,eAAA,GAAA;QACA,OAAQ,MAAR,CAAA,IAAA,CAAA,IAAA,EAAc,QAAQ,CAAC,IAAvB,IAAA,CAAA;KACK;;CAHL,CAnDCmB,wBAAA,CAmDD,CAAA,CAAA;AA/CO,eAAP,CAAA,UAAO,GAAoC;IAoD3C,EAnDE,IAAA,EAAMD,cAAA,EAAW,IAAA,EAAM,CAAA;gBAoDrB,QAAQ,EAnDE,qBAAA;gBAoDV,OAAO,EAnDE;oBAoDL,QAAQ,EAnDE,IAAID,oBAAA,CAAgB,cAAC,CAAc;iBAoDhD;aACJ,EAnDC,EAAG;CAoDJ,CAnDC;;;;AAED,eAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA,EAsDA,CAtDD,EAsDC,CAAC;ADhJF,IAAIG,OAAA,GAAkB,CAAA,QAAE,EAAS,QAAA,CAAS,CAAC;AAC3C,IAAIZ,SAAA,GAAoB,EAAA,CAAG;;;;;;;;;AAS3B,IAAA,qBAAA,kBAAA,UAAA,MAAA,EAAA;IACC,SAAD,CAAA,qBAAA,EAAA,MAAA,CAAA,CAAC;;;;IAaD,SAAA,qBAAA,CAEwB,gBAAkB,EAF1C;QAAA,IAAA,KAAA,GACQ,MADR,CAAA,IAAA,CAAA,IAAA,CACe,IADf,IAAA,CAKK;QAHmB,KAAxB,CAAA,gBAAwB,GAAA,gBAAA,CAAkB;QAAlCI,uBAAQ,CAAC,iBAAiB,EAAE,KAAI,EAAE,KAAI,CAAC,gBAAgB,CAAC,CAAC;QACzD,KAAI,CAAC,cAAc,CAACJ,SAAO,CAAC,CAAC;QAC7B,KAAI,CAAC,iBAAiB,GAAGY,OAAK,CAAC;;KAClC;;CAnBL,CACCC,0BAAA,CADD,CAAA,CAAA;AAsBO,qBAAP,CAAA,UAAO,GAAoC;IAD3C,EAEE,IAAA,EAAMH,cAAA,EAAW,IAAA,EAAM,CAAA;gBADrB,QAAQ,EAEE,0BAAA;gBADV,MAAM,EAEEE,OAAA;gBADR,OAAO,EAEEZ,SAAA;gBADT,OAAO,EAEE,EAAR;aACJ,EAEC,EAAG;CADJ,CAEC;;;;AAED,qBAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA;IACD,EAAC,IAAI,EAAER,qBAAgB,GAAG;CACzB,CAAD,EAAC,CAAC;;;;AA+BF,IAAA,sBAAA,kBAAA,UAAA,MAAA,EAAA;IAvBC,SAAD,CAAA,sBAAA,EAAA,MAAA,CAAA,CAAC;IAwBD,SAAA,sBAAA,GAAA;QACA,OAAQ,MAAR,CAAA,IAAA,CAAA,IAAA,EAAc,cAAc,CAAC,IAA7B,IAAA,CAAA;KACK;;CAHL,CAvBCmB,wBAAA,CAuBD,CAAA,CAAA;AAnBO,sBAAP,CAAA,UAAO,GAAoC;IAwB3C,EAvBE,IAAA,EAAMD,cAAA,EAAW,IAAA,EAAM,CAAA;gBAwBrB,QAAQ,EAvBE,yBAAA;gBAwBV,OAAO,EAvBE;oBAwBL,QAAQ,EAvBE,IAAID,oBAAA,CAAgB,qBAAC,CAAqB;iBAwBvD;aACJ,EAvBC,EAAG;CAwBJ,CAvBC;;;;AAED,sBAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA,EA0BA,CA1BD,EA0BC,CAAC;AD5FF,IAAIG,OAAA,GAAkB,CAAA,WAAE,EAAY,cAAA,EAAgB,cAAA,EAAgB,MAAA,EAAQ,mBAAA,EAAqB,mBAAA,EAAqB,QAAA,EAAU,iBAAA,EAAmB,iBAAA,EAAmB,IAAA,EAAM,QAAA,EAAU,SAAA,EAAW,UAAA,EAAY,YAAA,EAAc,OAAA,CAAQ,CAAC;AACpO,IAAIZ,SAAA,GAAoB,EAAA,CAAG;;;;;;;;;;;;;;AAc3B,IAAA,iCAAA,kBAAA,UAAA,MAAA,EAAA;IACC,SAAD,CAAA,iCAAA,EAAA,MAAA,CAAA,CAAC;;;;IAmFD,SAAA,iCAAA,CAEwB,gBAAkB,EAF1C;QAAA,IAAA,KAAA,GACQ,MADR,CAAA,IAAA,CAAA,IAAA,CACe,IADf,IAAA,CAKK;QAHmB,KAAxB,CAAA,gBAAwB,GAAA,gBAAA,CAAkB;QAAlCI,uBAAQ,CAAC,iBAAiB,EAAE,KAAI,EAAE,KAAI,CAAC,gBAAgB,CAAC,CAAC;QACzD,KAAI,CAAC,cAAc,CAACJ,SAAO,CAAC,CAAC;QAC7B,KAAI,CAAC,iBAAiB,GAAGY,OAAK,CAAC;;KAClC;;CAzFL,CACCC,0BAAA,CADD,CAAA,CAAA;AA4FO,iCAAP,CAAA,UAAO,GAAoC;IAD3C,EAEE,IAAA,EAAMH,cAAA,EAAW,IAAA,EAAM,CAAA;gBADrB,QAAQ,EAEE,sEAAA;gBADV,MAAM,EAEEE,OAAA;gBADR,OAAO,EAEEZ,SAAA;gBADT,OAAO,EAEE,EAAR;aACJ,EAEC,EAAG;CADJ,CAEC;;;;AAED,iCAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA;IACD,EAAC,IAAI,EAAER,qBAAgB,GAAG;CACzB,CAAD,EAAC,CAAC;;;;AAkHF,IAAA,kCAAA,kBAAA,UAAA,MAAA,EAAA;IA1GC,SAAD,CAAA,kCAAA,EAAA,MAAA,CAAA,CAAC;IA2GD,SAAA,kCAAA,GAAA;QACA,OAAQ,MAAR,CAAA,IAAA,CAAA,IAAA,EAAc,kBAAkB,CAAC,IAAjC,IAAA,CAAA;KACK;;CAHL,CA1GCmB,wBAAA,CA0GD,CAAA,CAAA;AAtGO,kCAAP,CAAA,UAAO,GAAoC;IA2G3C,EA1GE,IAAA,EAAMD,cAAA,EAAW,IAAA,EAAM,CAAA;gBA2GrB,QAAQ,EA1GE,0CAAA;gBA2GV,OAAO,EA1GE;oBA2GL,QAAQ,EA1GE,IAAID,oBAAA,CAAgB,iCAAC,CAAiC;iBA2GnE;aACJ,EA1GC,EAAG;CA2GJ,CA1GC;;;;AAED,kCAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA,EA6GA,CA7GD,EA6GC,CAAC;AD1PF,IAAIG,OAAA,GAAkB,CAAA,SAAE,EAAU,WAAA,EAAa,gBAAA,EAAkB,aAAA,EAAe,SAAA,EAAW,cAAA,EAAgB,WAAA,EAAa,QAAA,EAAU,qBAAA,EAAuB,WAAA,EAAa,IAAA,EAAM,QAAA,EAAU,QAAA,EAAU,aAAA,EAAe,cAAA,EAAgB,OAAA,EAAS,UAAA,EAAY,MAAA,EAAQ,mBAAA,EAAqB,YAAA,EAAc,OAAA,CAAQ,CAAC;AACxS,IAAIZ,SAAA,GAAoB,EAAA,CAAG;;;;;;;;;;;;;;AAc3B,IAAA,4BAAA,kBAAA,UAAA,MAAA,EAAA;IACC,SAAD,CAAA,4BAAA,EAAA,MAAA,CAAA,CAAC;;;;IAyID,SAAA,4BAAA,CAEwB,gBAAkB,EAF1C;QAAA,IAAA,KAAA,GACQ,MADR,CAAA,IAAA,CAAA,IAAA,CACe,IADf,IAAA,CAKK;QAHmB,KAAxB,CAAA,gBAAwB,GAAA,gBAAA,CAAkB;QAAlCI,uBAAQ,CAAC,iBAAiB,EAAE,KAAI,EAAE,KAAI,CAAC,gBAAgB,CAAC,CAAC;QACzD,KAAI,CAAC,cAAc,CAACJ,SAAO,CAAC,CAAC;QAC7B,KAAI,CAAC,iBAAiB,GAAGY,OAAK,CAAC;;KAClC;;CA/IL,CACCC,0BAAA,CADD,CAAA,CAAA;AAkJO,4BAAP,CAAA,UAAO,GAAoC;IAD3C,EAEE,IAAA,EAAMH,cAAA,EAAW,IAAA,EAAM,CAAA;gBADrB,QAAQ,EAEE,4DAAA;gBADV,MAAM,EAEEE,OAAA;gBADR,OAAO,EAEEZ,SAAA;gBADT,OAAO,EAEE,EAAR;aACJ,EAEC,EAAG;CADJ,CAEC;;;;AAED,4BAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA;IACD,EAAC,IAAI,EAAER,qBAAgB,GAAG;CACzB,CAAD,EAAC,CAAC;;;;AA8KF,IAAA,6BAAA,kBAAA,UAAA,MAAA,EAAA;IAtKC,SAAD,CAAA,6BAAA,EAAA,MAAA,CAAA,CAAC;IAuKD,SAAA,6BAAA,GAAA;QACA,OAAQ,MAAR,CAAA,IAAA,CAAA,IAAA,EAAc,aAAa,CAAC,IAA5B,IAAA,CAAA;KACK;;CAHL,CAtKCmB,wBAAA,CAsKD,CAAA,CAAA;AAlKO,6BAAP,CAAA,UAAO,GAAoC;IAuK3C,EAtKE,IAAA,EAAMD,cAAA,EAAW,IAAA,EAAM,CAAA;gBAuKrB,QAAQ,EAtKE,qCAAA;gBAuKV,OAAO,EAtKE;oBAuKL,QAAQ,EAtKE,IAAID,oBAAA,CAAgB,4BAAC,CAA4B;iBAuK9D;aACJ,EAtKC,EAAG;CAuKJ,CAtKC;;;;AAED,6BAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA,EAyKA,CAzKD,EAyKC,CAAC;AD3WF,IAAIG,OAAA,GAAkB,CAAA,SAAE,EAAU,aAAA,EAAe,aAAA,EAAe,mBAAA,EAAqB,aAAA,EAAe,cAAA,EAAgB,UAAA,EAAY,mBAAA,EAAqB,kBAAA,EAAoB,MAAA,EAAQ,UAAA,EAAY,YAAA,EAAc,IAAA,EAAM,QAAA,EAAU,aAAA,EAAe,UAAA,EAAY,OAAA,EAAS,iBAAA,EAAmB,UAAA,EAAY,eAAA,EAAiB,aAAA,EAAe,cAAA,EAAgB,OAAA,EAAS,YAAA,EAAc,iBAAA,EAAmB,UAAA,EAAY,eAAA,EAAiB,aAAA,EAAe,cAAA,EAAgB,SAAA,EAAW,MAAA,EAAQ,SAAA,EAAW,SAAA,EAAW,QAAA,CAAS,CAAC;AACve,IAAIZ,SAAA,GAAoB,EAAA,CAAG;;;;;;;;;AAS3B,IAAA,kBAAA,kBAAA,UAAA,MAAA,EAAA;IACC,SAAD,CAAA,kBAAA,EAAA,MAAA,CAAA,CAAC;;;;IA+MD,SAAA,kBAAA,CAAwB,gBAAkB,EAA1C;QAAA,IAAA,KAAA,GACQ,MADR,CAAA,IAAA,CAAA,IAAA,CACe,IADf,IAAA,CAKK;QALmB,KAAxB,CAAA,gBAAwB,GAAA,gBAAA,CAAkB;QA1M/B,KAAX,CAAA,IAAW,GAAiB,CAAA,kBAAE,EAAmB,aAAA,CAAc,CAAC;QA4MxDI,uBAAQ,CAAC,iBAAiB,EAAE,KAAI,EAAE,KAAI,CAAC,gBAAgB,CAAC,CAAC;QACzD,KAAI,CAAC,cAAc,CAACJ,SAAO,CAAC,CAAC;QAC7B,KAAI,CAAC,iBAAiB,GAAGY,OAAK,CAAC;;KAClC;;CArNL,CACCC,0BAAA,CADD,CAAA,CAAA;AAsNO,kBAAP,CAAA,UAAO,GAAoC;IAC3C,EAAE,IAAA,EAAMH,cAAA,EAAW,IAAA,EAAM,CAAA;gBACrB,QAAQ,EAAE,0BAAA;gBACV,MAAM,EAAEE,OAAA;gBACR,OAAO,EAAEZ,SAAA;gBACT,OAAO,EAAE;oBACL,qBAAqB,EAAE,IAAIO,iBAAA,CAAa,kCAAC,CAAkC;oBAC3E,gBAAgB,EAAE,IAAIA,iBAAA,CAAa,6BAAC,CAA6B;iBACpE;aACJ,EAAC,EAAG;CACJ,CAAC;;;;AAED,kBAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA;IAGD,EAAC,IAAI,EAAEf,qBAAgB,GAAG;CACzB,CAAD,EAAC,CAAC;;;;AAoQF,IAAA,mBAAA,kBAAA,UAAA,MAAA,EAAA;IA9PC,SAAD,CAAA,mBAAA,EAAA,MAAA,CAAA,CAAC;IA+PD,SAAA,mBAAA,GAAA;QACA,OAAQ,MAAR,CAAA,IAAA,CAAA,IAAA,EAAc,YAAY,CAAC,IAA3B,IAAA,CAAA;KACK;;CAHL,CA9PCmB,wBAAA,CA8PD,CAAA,CAAA;AA1PO,mBAAP,CAAA,UAAO,GAAoC;IA+P3C,EA9PE,IAAA,EAAMD,cAAA,EAAW,IAAA,EAAM,CAAA;gBA+PrB,QAAQ,EA9PE,yBAAA;gBA+PV,OAAO,EA9PE;oBA+PL,QAAQ,EA9PE,IAAID,oBAAA,CAAgB,kBAAC,CAAkB;iBA+PpD;aACJ,EA9PC,EAAG;CA+PJ,CA9PC;;;;AAED,mBAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA,EAiQA,CAjQD,EAiQC,CAAC;ADrgBF,IAAIG,OAAA,GAAkB,CAAA,cAAE,EAAe,MAAA,EAAQ,mBAAA,EAAqB,mBAAA,EAAqB,QAAA,EAAU,iBAAA,EAAmB,iBAAA,EAAmB,IAAA,EAAM,QAAA,EAAU,QAAA,EAAU,SAAA,EAAW,UAAA,EAAY,YAAA,EAAc,OAAA,CAAQ,CAAC;AACjN,IAAIZ,SAAA,GAAoB,EAAA,CAAG;;;;;;;;;;;;;;AAc3B,IAAA,4BAAA,kBAAA,UAAA,MAAA,EAAA;IACC,SAAD,CAAA,4BAAA,EAAA,MAAA,CAAA,CAAC;;;;IA0ED,SAAA,4BAAA,CAEwB,gBAAkB,EAF1C;QAAA,IAAA,KAAA,GACQ,MADR,CAAA,IAAA,CAAA,IAAA,CACe,IADf,IAAA,CAKK;QAHmB,KAAxB,CAAA,gBAAwB,GAAA,gBAAA,CAAkB;QAAlCI,uBAAQ,CAAC,iBAAiB,EAAE,KAAI,EAAE,KAAI,CAAC,gBAAgB,CAAC,CAAC;QACzD,KAAI,CAAC,cAAc,CAACJ,SAAO,CAAC,CAAC;QAC7B,KAAI,CAAC,iBAAiB,GAAGY,OAAK,CAAC;;KAClC;;CAhFL,CACCC,0BAAA,CADD,CAAA,CAAA;AAmFO,4BAAP,CAAA,UAAO,GAAoC;IAD3C,EAEE,IAAA,EAAMH,cAAA,EAAW,IAAA,EAAM,CAAA;gBADrB,QAAQ,EAEE,uDAAA;gBADV,MAAM,EAEEE,OAAA;gBADR,OAAO,EAEEZ,SAAA;gBADT,OAAO,EAEE,EAAR;aACJ,EAEC,EAAG;CADJ,CAEC;;;;AAED,4BAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA;IACD,EAAC,IAAI,EAAER,qBAAgB,GAAG;CACzB,CAAD,EAAC,CAAC;;;;AAwGF,IAAA,6BAAA,kBAAA,UAAA,MAAA,EAAA;IAhGC,SAAD,CAAA,6BAAA,EAAA,MAAA,CAAA,CAAC;IAiGD,SAAA,6BAAA,GAAA;QACA,OAAQ,MAAR,CAAA,IAAA,CAAA,IAAA,EAAc,kBAAkB,CAAC,IAAjC,IAAA,CAAA;KACK;;CAHL,CAhGCmB,wBAAA,CAgGD,CAAA,CAAA;AA5FO,6BAAP,CAAA,UAAO,GAAoC;IAiG3C,EAhGE,IAAA,EAAMD,cAAA,EAAW,IAAA,EAAM,CAAA;gBAiGrB,QAAQ,EAhGE,gCAAA;gBAiGV,OAAO,EAhGE;oBAiGL,QAAQ,EAhGE,IAAID,oBAAA,CAAgB,4BAAC,CAA4B;iBAiG9D;aACJ,EAhGC,EAAG;CAiGJ,CAhGC;;;;AAED,6BAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA,EAmGA,CAnGD,EAmGC,CAAC;ADvOF,IAAIG,OAAA,GAAkB,CAAA,SAAE,EAAU,gBAAA,EAAkB,aAAA,EAAe,SAAA,EAAW,WAAA,EAAa,QAAA,EAAU,qBAAA,EAAuB,WAAA,EAAa,IAAA,EAAM,QAAA,EAAU,QAAA,EAAU,aAAA,EAAe,OAAA,EAAS,UAAA,EAAY,MAAA,EAAQ,mBAAA,EAAqB,YAAA,EAAc,OAAA,CAAQ,CAAC;AAC3P,IAAIZ,SAAA,GAAoB,EAAA,CAAG;;;;;;;;;;;;;;AAc3B,IAAA,uBAAA,kBAAA,UAAA,MAAA,EAAA;IACC,SAAD,CAAA,uBAAA,EAAA,MAAA,CAAA,CAAC;;;;IAsHD,SAAA,uBAAA,CAEwB,gBAAkB,EAF1C;QAAA,IAAA,KAAA,GACQ,MADR,CAAA,IAAA,CAAA,IAAA,CACe,IADf,IAAA,CAKK;QAHmB,KAAxB,CAAA,gBAAwB,GAAA,gBAAA,CAAkB;QAAlCI,uBAAQ,CAAC,iBAAiB,EAAE,KAAI,EAAE,KAAI,CAAC,gBAAgB,CAAC,CAAC;QACzD,KAAI,CAAC,cAAc,CAACJ,SAAO,CAAC,CAAC;QAC7B,KAAI,CAAC,iBAAiB,GAAGY,OAAK,CAAC;;KAClC;;CA5HL,CACCC,0BAAA,CADD,CAAA,CAAA;AA+HO,uBAAP,CAAA,UAAO,GAAoC;IAD3C,EAEE,IAAA,EAAMH,cAAA,EAAW,IAAA,EAAM,CAAA;gBADrB,QAAQ,EAEE,6CAAA;gBADV,MAAM,EAEEE,OAAA;gBADR,OAAO,EAEEZ,SAAA;gBADT,OAAO,EAEE,EAAR;aACJ,EAEC,EAAG;CADJ,CAEC;;;;AAED,uBAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA;IACD,EAAC,IAAI,EAAER,qBAAgB,GAAG;CACzB,CAAD,EAAC,CAAC;;;;AAwJF,IAAA,wBAAA,kBAAA,UAAA,MAAA,EAAA;IAhJC,SAAD,CAAA,wBAAA,EAAA,MAAA,CAAA,CAAC;IAiJD,SAAA,wBAAA,GAAA;QACA,OAAQ,MAAR,CAAA,IAAA,CAAA,IAAA,EAAc,aAAa,CAAC,IAA5B,IAAA,CAAA;KACK;;CAHL,CAhJCmB,wBAAA,CAgJD,CAAA,CAAA;AA5IO,wBAAP,CAAA,UAAO,GAAoC;IAiJ3C,EAhJE,IAAA,EAAMD,cAAA,EAAW,IAAA,EAAM,CAAA;gBAiJrB,QAAQ,EAhJE,2BAAA;gBAiJV,OAAO,EAhJE;oBAiJL,QAAQ,EAhJE,IAAID,oBAAA,CAAgB,uBAAC,CAAuB;iBAiJzD;aACJ,EAhJC,EAAG;CAiJJ,CAhJC;;;;AAED,wBAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA,EAmJA,CAnJD,EAmJC,CAAC;ADnUF,IAAIG,OAAA,GAAkB,CAAA,SAAE,EAAU,aAAA,EAAe,QAAA,EAAU,qBAAA,EAAuB,IAAA,EAAM,SAAA,EAAW,QAAA,EAAU,QAAA,EAAU,UAAA,EAAY,UAAA,EAAY,OAAA,EAAS,OAAA,EAAS,mBAAA,EAAqB,YAAA,EAAc,OAAA,CAAQ,CAAC;AAC7M,IAAIZ,SAAA,GAAoB,EAAA,CAAG;;;;;;;;;;;;;;AAc3B,IAAA,aAAA,kBAAA,UAAA,MAAA,EAAA;IACC,SAAD,CAAA,aAAA,EAAA,MAAA,CAAA,CAAC;;;;IAwGD,SAAA,aAAA,CAEwB,gBAAkB,EAF1C;QAAA,IAAA,KAAA,GACQ,MADR,CAAA,IAAA,CAAA,IAAA,CACe,IADf,IAAA,CAKK;QAHmB,KAAxB,CAAA,gBAAwB,GAAA,gBAAA,CAAkB;QAAlCI,uBAAQ,CAAC,iBAAiB,EAAE,KAAI,EAAE,KAAI,CAAC,gBAAgB,CAAC,CAAC;QACzD,KAAI,CAAC,cAAc,CAACJ,SAAO,CAAC,CAAC;QAC7B,KAAI,CAAC,iBAAiB,GAAGY,OAAK,CAAC;;KAClC;;CA9GL,CACCC,0BAAA,CADD,CAAA,CAAA;AAiHO,aAAP,CAAA,UAAO,GAAoC;IAD3C,EAEE,IAAA,EAAMH,cAAA,EAAW,IAAA,EAAM,CAAA;gBADrB,QAAQ,EAEE,iCAAA;gBADV,MAAM,EAEEE,OAAA;gBADR,OAAO,EAEEZ,SAAA;gBADT,OAAO,EAEE,EAAR;aACJ,EAEC,EAAG;CADJ,CAEC;;;;AAED,aAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA;IACD,EAAC,IAAI,EAAER,qBAAgB,GAAG;CACzB,CAAD,EAAC,CAAC;;;;AAuIF,IAAA,cAAA,kBAAA,UAAA,MAAA,EAAA;IA/HC,SAAD,CAAA,cAAA,EAAA,MAAA,CAAA,CAAC;IAgID,SAAA,cAAA,GAAA;QACA,OAAQ,MAAR,CAAA,IAAA,CAAA,IAAA,EAAc,OAAO,CAAC,IAAtB,IAAA,CAAA;KACK;;CAHL,CA/HCmB,wBAAA,CA+HD,CAAA,CAAA;AA3HO,cAAP,CAAA,UAAO,GAAoC;IAgI3C,EA/HE,IAAA,EAAMD,cAAA,EAAW,IAAA,EAAM,CAAA;gBAgIrB,QAAQ,EA/HE,qBAAA;gBAgIV,OAAO,EA/HE;oBAgIL,QAAQ,EA/HE,IAAID,oBAAA,CAAgB,aAAC,CAAa;iBAgI/C;aACJ,EA/HC,EAAG;CAgIJ,CA/HC;;;;AAED,cAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA,EAkIA,CAlID,EAkIC,CAAC;ADlSF,IAAIG,OAAA,GAAkB,CAAA,SAAE,EAAU,aAAA,EAAe,iBAAA,EAAmB,aAAA,EAAe,aAAA,EAAe,QAAA,EAAU,UAAA,EAAY,cAAA,EAAgB,aAAA,EAAe,YAAA,EAAc,SAAA,EAAW,aAAA,EAAe,WAAA,EAAa,MAAA,EAAQ,UAAA,EAAY,mBAAA,EAAqB,YAAA,EAAc,kBAAA,EAAoB,MAAA,EAAQ,UAAA,EAAY,QAAA,EAAU,qBAAA,EAAuB,IAAA,EAAM,YAAA,EAAc,YAAA,EAAc,QAAA,EAAU,WAAA,EAAa,UAAA,EAAY,WAAA,EAAa,UAAA,EAAY,SAAA,EAAW,SAAA,EAAW,OAAA,EAAS,OAAA,EAAS,aAAA,EAAe,aAAA,EAAe,UAAA,EAAY,SAAA,EAAW,MAAA,EAAQ,QAAA,EAAU,OAAA,EAAS,OAAA,EAAS,YAAA,EAAc,SAAA,EAAW,mBAAA,EAAqB,SAAA,EAAW,OAAA,EAAS,SAAA,EAAW,QAAA,CAAS,CAAC;AACloB,IAAIZ,SAAA,GAAoB,EAAA,CAAG;;;;;;;;;AAS3B,IAAA,aAAA,kBAAA,UAAA,MAAA,EAAA;IACC,SAAD,CAAA,aAAA,EAAA,MAAA,CAAA,CAAC;;;;IAyTD,SAAA,aAAA,CAAwB,gBAAkB,EAA1C;QAAA,IAAA,KAAA,GACQ,MADR,CAAA,IAAA,CAAA,IAAA,CACe,IADf,IAAA,CAKK;QALmB,KAAxB,CAAA,gBAAwB,GAAA,gBAAA,CAAkB;QAnT/B,KAAX,CAAA,IAAW,GAAiB,CAAA,kBAAE,EAAmB,aAAA,EAAe,OAAA,CAAQ,CAAC;QAqTjEI,uBAAQ,CAAC,iBAAiB,EAAE,KAAI,EAAE,KAAI,CAAC,gBAAgB,CAAC,CAAC;QACzD,KAAI,CAAC,cAAc,CAACJ,SAAO,CAAC,CAAC;QAC7B,KAAI,CAAC,iBAAiB,GAAGY,OAAK,CAAC;;KAClC;;CA/TL,CACCC,0BAAA,CADD,CAAA,CAAA;AAgUO,aAAP,CAAA,UAAO,GAAoC;IAC3C,EAAE,IAAA,EAAMH,cAAA,EAAW,IAAA,EAAM,CAAA;gBACrB,QAAQ,EAAE,gBAAA;gBACV,MAAM,EAAEE,OAAA;gBACR,OAAO,EAAEZ,SAAA;gBACT,OAAO,EAAE;oBACL,qBAAqB,EAAE,IAAIO,iBAAA,CAAa,6BAAC,CAA6B;oBACtE,gBAAgB,EAAE,IAAIA,iBAAA,CAAa,wBAAC,CAAwB;oBAC5D,UAAU,EAAE,IAAIA,iBAAA,CAAa,cAAC,CAAc;iBAC/C;aACJ,EAAC,EAAG;CACJ,CAAC;;;;AAED,aAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA;IAGD,EAAC,IAAI,EAAEf,qBAAgB,GAAG;CACzB,CAAD,EAAC,CAAC;;;;AA8XF,IAAA,cAAA,kBAAA,UAAA,MAAA,EAAA;IAxXC,SAAD,CAAA,cAAA,EAAA,MAAA,CAAA,CAAC;IAyXD,SAAA,cAAA,GAAA;QACA,OAAQ,MAAR,CAAA,IAAA,CAAA,IAAA,EAAc,OAAO,CAAC,IAAtB,IAAA,CAAA;KACK;;CAHL,CAxXCmB,wBAAA,CAwXD,CAAA,CAAA;AApXO,cAAP,CAAA,UAAO,GAAoC;IAyX3C,EAxXE,IAAA,EAAMD,cAAA,EAAW,IAAA,EAAM,CAAA;gBAyXrB,QAAQ,EAxXE,oBAAA;gBAyXV,OAAO,EAxXE;oBAyXL,QAAQ,EAxXE,IAAID,oBAAA,CAAgB,aAAC,CAAa;iBAyX/C;aACJ,EAxXC,EAAG;CAyXJ,CAxXC;;;;AAED,cAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA,EA2XA,CA3XD,EA2XC,CAAC;;;;;;;;;;;;;;;ADhvBF,IASa,MAAA,GAAmB,CAAA,SAAE,EAAS,oBAAC,EAAoB,iBAAC,EAAiB,iBAAC,EAAiB,gBAAC,EAAgB,mBAAC,EAAmB,YAAC,EAAY,aAAC,EAAa,qBAAC,EAAqB,cAAC,EAAc,oBAAC,EAAoB,iBAAC,EAAiB,eAAC,EAAe,mBAAC,EAAmB,WAAC,EAAW,sBAAC,EAAsB,iBAAC,EAAiB,mBAAC,EAAmB,eAAC,EAAe,gBAAC,EAAgB,iBAAC,EAAiB,QAAC,EAAQ,gBAAC,EAAgB,QAAC,EAAQ,QAAC,EAAQ,QAAC,EAAQ,MAAC,EAAM,cAAC,EAAc,cAAC,EAAc,OAAC,EAAO,cAAC,EAAc,eAAC,EAAe,gBAAC,EAAgB,eAAC,EAAe,uBAAC,EAAuB,iBAAC,EAAiB,cAAC,EAAc,MAAC,EAAM,SAAC,EAAS,iBAAC,EAAiB,oBAAC,EAAoB,OAAC,CAAO,CAAC;AAC5qB,IAAaT,SAAA,GAAoB,CAAA,mBAAE,EAAmB,OAAC,EAAO,kBAAC,EAAkB,gBAAC,EAAgB,kBAAC,EAAkB,6BAAC,EAA6B,kBAAC,EAAkB,iBAAC,EAAiB,SAAC,EAAS,YAAC,EAAY,aAAC,EAAa,WAAC,EAAW,WAAC,EAAW,UAAC,EAAU,MAAC,EAAM,mBAAC,EAAmB,sBAAC,EAAsB,eAAC,EAAe,oBAAC,EAAoB,SAAC,EAAS,OAAC,EAAO,YAAC,EAAY,YAAC,EAAY,WAAC,EAAW,aAAC,EAAa,uBAAC,EAAuB,wBAAC,EAAwB,wBAAC,EAAwB,qBAAC,EAAqB,gBAAC,EAAgB,gBAAC,EAAgB,cAAC,EAAc,cAAC,EAAc,yBAAC,EAAyB,iBAAC,EAAiB,YAAC,EAAY,mBAAC,EAAmB,mBAAC,EAAmB,UAAC,CAAU,CAAC;AAC1qB,IAAa,OAAA,GAAoB,CAAA,EAAE,CAAE,CAAC;;;;;;;AAQtC,AAAa+B,wBAAgB,kBAA7B,UAAA,MAAA,EAAA;IAAsC,SAAtC,CAAA,gBAAA,EAAA,MAAA,CAAA,CAA6C;;;;;;;IAuE7C,SAAA,gBAAA,CAAwB,KAAO,EAAoB,SAAW,EAAmB,gBAAkB,EAAyB,QAAU,EAAtI;QAAA,IAAA,KAAA,GAIQ,MAJR,CAAA,IAAA,CAAA,IAAA,CAIe,IAJf,IAAA,CAkHK;QAlHmB,KAAxB,CAAA,KAAwB,GAAA,KAAA,CAAO;QAAoB,KAAnD,CAAA,SAAmD,GAAA,SAAA,CAAW;QAAmB,KAAjF,CAAA,gBAAiF,GAAA,gBAAA,CAAkB;QAAyB,KAA5H,CAAA,QAA4H,GAAA,QAAA,CAAU;QAvB3H,KAAX,CAAA,IAAW,GAAiB,CAAA,QAAE,EAAS,cAAA,EAAgB,YAAA,EAAc,OAAA,CAAQ,CAAC;QA4BtE,KAAI,CAAC,OAAO,GAAG,KAAI,CAAC,KAAK,CAAC,aAAa,CAAC;QACxC,KAAI,CAAC,eAAe,GAAG,KAAI,CAAC,eAAe,IAAI,EAAE,CAAC;QAClD,IAAI;YACI,IAAI,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;YACxD,IAAG,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;gBACzC,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;aACjC;SACJ;QAAC,OAAO,EAArB,EAAoB,GAAG;QACf,IAAI;YACI,IAAI,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;YAC/C,IAAG,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;gBACzC,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;aACjC;SACJ;QAAC,OAAO,EAArB,EAAoB,GAAG;QACf,IAAI;YACI,IAAI,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;YAClD,IAAG,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;gBACzC,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;aACjC;SACJ;QAAC,OAAO,EAArB,EAAoB,GAAG;QACf,IAAI;YACI,IAAI,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;YAC/D,IAAG,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;gBACzC,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;aACjC;SACJ;QAAC,OAAO,EAArB,EAAoB,GAAG;QACf,IAAI;YACI,IAAI,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;YACnD,IAAG,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;gBACzC,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;aACjC;SACJ;QAAC,OAAO,EAArB,EAAoB,GAAG;QACf,IAAI;YACI,IAAI,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;YAChD,IAAG,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;gBACzC,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;aACjC;SACJ;QAAC,OAAO,EAArB,EAAoB,GAAG;QACf,IAAI;YACI,IAAI,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;YACtD,IAAG,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;gBACzC,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;aACjC;SACJ;QAAC,OAAO,EAArB,EAAoB,GAAG;QACf,IAAI;YACI,IAAI,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;YACpD,IAAG,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;gBACzC,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;aACjC;SACJ;QAAC,OAAO,EAArB,EAAoB,GAAG;QACf,IAAI;YACI,IAAI,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;YACvD,IAAG,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;gBACzC,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;aACjC;SACJ;QAAC,OAAO,EAArB,EAAoB,GAAG;QACf,IAAI;YACI,IAAI,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;YACzD,IAAG,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;gBACzC,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;aACjC;SACJ;QAAC,OAAO,EAArB,EAAoB,GAAG;QACf,IAAI;YACI,IAAI,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;YAChD,IAAG,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;gBACzC,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;aACjC;SACJ;QAAC,OAAO,EAArB,EAAoB,GAAG;QACf,IAAI;YACI,IAAI,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;YACvD,IAAG,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;gBACzC,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;aACjC;SACJ;QAAC,OAAO,EAArB,EAAoB,GAAG;QACf,IAAI;YACI,IAAI,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;YAC1D,IAAG,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;gBACzC,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;aACjC;SACJ;QAAC,OAAO,EAArB,EAAoB,GAAG;QACf,IAAI;YACI,IAAI,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;YACnD,IAAG,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;gBACzC,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;aACjC;SACJ;QAAC,OAAO,EAArB,EAAoB,GAAG;QACf,IAAI;YACI,IAAI,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;YACxD,IAAG,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;gBACzC,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;aACjC;SACJ;QAAC,OAAO,EAArB,EAAoB,GAAG;QACf,IAAI;YACI,IAAI,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;YACrD,IAAG,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;gBACzC,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;aACjC;SACJ;QAAC,OAAO,EAArB,EAAoB,GAAG;QACf,IAAI;YACI,IAAI,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;YACxD,IAAG,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;gBACzC,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;aACjC;SACJ;QAAC,OAAO,EAArB,EAAoB,GAAG;QAEf,KAAI,CAAC,cAAc,CAAC/B,SAAO,CAAC,CAAC;QAC7B,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,EAAE,OAAO,CAAC,CAAC;QACnCI,uBAAQ,CAAC,iBAAiB,EAAE,KAAI,EAAE,KAAI,CAAC,gBAAgB,CAAC,CAAC;QACzD,KAAI,CAAC,OAAO,GAAI,IAAIP,4BAAa,EAAE,CAAC;;KACvC;;;;IADA,gBAAL,CAAA,SAAA,CAAA,QAAK,GAAA,YAAL;QAMQ,IAAI,CALC,OAAC,CAAO,QAAC,CAAQ,IAAC,CAAI,CAAC;KAM/B,CAAL;;;;IAHK,gBAAL,CAAA,SAAA,CAAA,eAAK,GAAA,YAAL;QAQQ,IAAI,CAPC,OAAC,CAAO,eAAC,CAAe,IAAC,CAAI,CAAC;KAQtC,CAAL;;;;IALK,gBAAL,CAAA,SAAA,CAAA,WAAK,GAAA,YAAL;QAUQ,IAAI,CATC,OAAC,CAAO,WAAC,CAAW,IAAC,CAAI,CAAC;KAUlC,CAAL;;;;IAPK,gBAAL,CAAA,SAAA,CAAA,qBAAK,GAAA,YAAL;QAYQ,IAAI,CAXC,UAAC,CAAU,CAAC,CAAC,CAAC,QAAC,GAAU,IAAA,CAAK,WAAC,CAAW;QAalD,IAAI,IAXC,CAAI,iBAAC,EAAkB;YAYrB,IAAI,CAXC,UAAC,CAAU,CAAC,CAAC,CAAC,QAAC,GAAU,IAAA,CAAK,iBAAC,CAAiB;SAYxD;QAEJ,IAAI,IAXC,CAAI,eAAC,EAAgB;YAYnB,IAAI,CAXC,UAAC,CAAU,CAAC,CAAC,CAAC,QAAC,GAAU,IAAA,CAAK,eAAC,CAAe;SAYtD;QAEJ,IAAI,IAXC,CAAI,UAAC,EAAW;YAYd,IAAI,CAXC,UAAC,CAAU,CAAC,CAAC,CAAC,QAAC,GAAU,IAAA,CAAK,UAAC,CAAU;SAYjD;QACD,IAAI,CAXC,OAAC,CAAO,qBAAC,CAAqB,IAAC,CAAI,CAAC;KAY5C,CAAL;IAgCA,OAAA,gBAAC,CAAD;CAAC,CA9PqCoC,mBAAO,CA8P7C,CAAC,CAAA;AAvCMF,wBAAP,CAAA,UAAO,GAAoC;IAW3C,EAVE,IAAA,EAAM7B,cAAA,EAAW,IAAA,EAAM,CAAA;gBAWrB,QAAQ,EAVE,aAAA;gBAWV,MAAM,EAVE,MAAA;gBAWR,OAAO,EAVEF,SAAA;gBAWT,QAAQ,EAVE,EAAA;gBAWV,eAAe,EAVED,4BAAA,CAAwB,MAAC;gBAW1C,OAAO,EAVE;oBAWL,WAAW,EAVE,IAAIQ,iBAAA,CAAa,eAAC,CAAe;oBAW9C,iBAAiB,EAVE,IAAIA,iBAAA,CAAa,sBAAC,CAAsB;oBAW3D,eAAe,EAVE,IAAIA,iBAAA,CAAa,mBAAC,CAAmB;oBAWtD,UAAU,EAVE,IAAIA,iBAAA,CAAa,cAAC,CAAc;iBAW/C;aACJ,EAVC,EAAG;CAWJ,CAVC;;;;AAEDwB,wBAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA;IAaD,EAAC,IAAI,EAAEpC,eAAU,GAAG;IACpB,EAAC,IAAI,EAAEF,cAAS,GAAG;IACnB,EAAC,IAAI,EAAED,qBAAgB,GAAG;IAC1B,EAAC,IAAI,EAAED,aAAQ,GAAG;CACjB,CAAD,EAAC,CAAC;AAXKwC,wBAAP,CAAA,cAAO,GAAyD;IAahE,oBAAoB,EAZE,CAAA,EAAG,IAAA,EAAMxB,iBAAA,EAAc,IAAA,EAAM,CAAA,oBAAE,EAAoB,EAAG,EAAE;IAa9E,cAAc,EAZE,CAAA,EAAG,IAAA,EAAMA,iBAAA,EAAc,IAAA,EAAM,CAAA,cAAE,EAAc,EAAG,EAAE;IAalE,oBAAoB,EAZE,CAAA,EAAG,IAAA,EAAMA,iBAAA,EAAc,IAAA,EAAM,CAAA,oBAAE,EAAoB,EAAG,EAAE;CAa7E,CAZC;AA7LE,UAAJ,CAAA;IAEKyB,uBAAA,EAAA;;CAFL,EAAAD,wBAAA,CAAA,SAAA,EAAA,oBAAA,EAAA,KAAA,CAAA,CAAmC,CAAnC;AAMI,UAAJ,CAAA;IAGKC,uBAAA,EAAA;;CAHL,EAAAD,wBAAA,CAAA,SAAA,EAAA,cAAA,EAAA,KAAA,CAAA,CAA6B,CAA7B;AAMI,UAAJ,CAAA;IAIKC,uBAAA,EAAA;;CAJL,EAAAD,wBAAA,CAAA,SAAA,EAAA,oBAAA,EAAA,KAAA,CAAA,CAAmC,CAAnC;AAhEaA,wBAAgB,GAA7B,UAAA,CAAA;IACCnC,8BAAA,CAAA,CAAAC,4BAAA,CAAA,CAAA;IAsED,UAAA,CAAA,mBAAA,EAAA,CAA+BF,eAAA;QAA+BF,cAAA;QAAoCD,qBAAC;QAAmCD,aAAA,CAAtI,CAAA;CAvEA,EAAawC,wBAAgB,CA8P5B,CA9PD;;;;ADJA,IAAA,aAAA,kBAAA,YAAA;IAAA,SAAA,aAAA,GAAA;;;CAAA,EAAA,CAAA,CAAA;AAEoC,aAApC,CAAA,UAAoC,GAAoC;IADxE,EAEE,IAAA,EAAM1C,aAAA,EAAU,IAAA,EAAM,CAAA;gBADpB,OAAO,EAEE,CAAAD,mBAAE,CAAY;gBADvB,YAAY,EAEE;oBADV2C,wBAAgB;oBAChB,cAAc;oBACd,eAAe;oBACf,qBAAqB;oBACrB,sBAAsB;oBACtB,iCAAiC;oBACjC,kCAAkC;oBAClC,4BAA4B;oBAC5B,6BAA6B;oBAC7B,kBAAkB;oBAClB,mBAAmB;oBACnB,4BAA4B;oBAC5B,6BAA6B;oBAC7B,uBAAuB;oBACvB,wBAAwB;oBACxB,aAAa;oBACb,cAAc;oBACd,aAAa;oBACb,cAAc;iBACjB;gBACD,OAAO,EAEE;oBADLA,wBAAgB;oBAChB,cAAc;oBACd,eAAe;oBACf,qBAAqB;oBACrB,sBAAsB;oBACtB,iCAAiC;oBACjC,kCAAkC;oBAClC,4BAA4B;oBAC5B,6BAA6B;oBAC7B,kBAAkB;oBAClB,mBAAmB;oBACnB,4BAA4B;oBAC5B,6BAA6B;oBAC7B,uBAAuB;oBACvB,wBAAwB;oBACxB,aAAa;oBACb,cAAc;oBACd,aAAa;oBACb,cAAc;iBACjB;aACJ,EAEC,EAAG;CADJ,CAEC;;;;AAED,aAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA,EACA,CADD,EACC,CAAC;ADlDK,IAAM,uBAAA,GAAyC,EAAE,OAAA,EAAS,0BAAA,EAA4B,QAAA,EAAUD,4BAAA,EAAiB,CAAC;AACzH,IAAa,cAAA,GAAgC,EAAE,OAAA,EAAS,iBAAA,EAAmB,QAAA,EAAUD,mBAAA,EAAQ,CAAC;AAC9F,IAAa,iBAAA,GAAmC,EAAE,OAAA,EAAS,oBAAA,EAAsB,QAAA,EAAUD,sBAAA,EAAW,CAAC;AACvG,IAAa,8BAAA,GAAgD,EAAE,OAAA,EAAS,iCAAA,EAAmC,QAAA,EAAUD,mCAAA,EAAwB,CAAC;AAC9I,IAAa,kBAAA,GAAoC,EAAE,OAAA,EAAS,qBAAA,EAAuB,QAAA,EAAUD,uBAAA,EAAY,CAAC;AAC1G,IAAa,eAAA,GAAiC,EAAE,OAAA,EAAS,kBAAA,EAAoB,QAAA,EAAUD,oBAAA,EAAS,CAAC;AACjG,IAAa,qBAAA,GAAuC,EAAE,OAAA,EAAS,wBAAA,EAA0B,QAAA,EAAUD,0BAAA,EAAe,CAAC;AACnH,IAAa,mBAAA,GAAqC,EAAE,OAAA,EAAS,sBAAA,EAAwB,QAAA,EAAUD,wBAAA,EAAa,CAAC;AAC7G,IAAa,sBAAA,GAAwC,EAAE,OAAA,EAAS,yBAAA,EAA2B,QAAA,EAAUD,2BAAA,EAAgB,CAAC;AACtH,IAAa,wBAAA,GAA0C,EAAE,OAAA,EAAS,2BAAA,EAA6B,QAAA,EAAUD,6BAAA,EAAkB,CAAC;AAC5H,IAAa,eAAA,GAAiC,EAAE,OAAA,EAAS,kBAAA,EAAoB,QAAA,EAAUD,oBAAA,EAAS,CAAC;AACjG,IAAa,sBAAA,GAAwC,EAAE,OAAA,EAAS,yBAAA,EAA2B,QAAA,EAAUD,2BAAA,EAAgB,CAAC;AACtH,IAAa,yBAAA,GAA2C,EAAE,OAAA,EAAS,4BAAA,EAA8B,QAAA,EAAUD,8BAAA,EAAmB,CAAC;AAC/H,IAAa,kBAAA,GAAoC,EAAE,OAAA,EAAS,qBAAA,EAAuB,QAAA,EAAUD,uBAAA,EAAY,CAAC;AAC1G,IAAa,uBAAA,GAAyC,EAAE,OAAA,EAAS,0BAAA,EAA4B,QAAA,EAAUD,4BAAA,EAAiB,CAAC;AACzH,IAAa,oBAAA,GAAsC,EAAE,OAAA,EAAS,uBAAA,EAAyB,QAAA,EAAUD,yBAAA,EAAc,CAAC;AAChH,IAAa,uBAAA,GAAyC,EAAE,OAAA,EAAS,0BAAA,EAA4B,QAAA,EAAUD,4BAAA,EAAiB,CAAC;;;;AAIzH,IAAA,gBAAA,kBAAA,YAAA;IAAA,SAAA,gBAAA,GAAA;;;CAAA,EAAA,CAAA,CAAA;AAEuC,gBAAvC,CAAA,UAAuC,GAAoC;IAD3E,EAEE,IAAA,EAAMzB,aAAA,EAAU,IAAA,EAAM,CAAA;gBADpB,OAAO,EAEE,CAAAD,mBAAE,EAAa,aAAA,CAAc;gBADtC,OAAO,EAEE;oBADL,aAAa;iBAChB;gBACD,SAAS,EAEC;oBADN,uBAAuB;oBACvB,cAAc;oBACd,iBAAiB;oBACjB,8BAA8B;oBAC9B,kBAAkB;oBAClB,eAAe;oBACf,qBAAqB;oBACrB,mBAAmB;oBACnB,sBAAsB;oBACtB,wBAAwB;oBACxB,eAAe;oBACf,sBAAsB;oBACtB,yBAAyB;oBACzB,kBAAkB;oBAClB,uBAAuB;oBACvB,oBAAoB;oBACpB,uBAAuB;iBAC1B;aACJ,EAEC,EAAG;CADJ,CAEC;;;;AAED,gBAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA,EACA,CADD,EACC,CAAC;AD9DF,IAAIwB,OAAA,GAAkB,CAAA,UAAE,EAAW,QAAA,EAAU,SAAA,EAAW,IAAA,EAAM,SAAA,EAAW,OAAA,CAAQ,CAAC;AAClF,IAAIZ,UAAA,GAAoB,EAAA,CAAG;;;;;;;AAO3B,IAAA,gBAAA,kBAAA,UAAA,MAAA,EAAA;IACC,SAAD,CAAA,gBAAA,EAAA,MAAA,CAAA,CAAC;;;;IAmCD,SAAA,gBAAA,CAEwB,gBAAkB,EAF1C;QAAA,IAAA,KAAA,GACQ,MADR,CAAA,IAAA,CAAA,IAAA,CACe,IADf,IAAA,CAKK;QAHmB,KAAxB,CAAA,gBAAwB,GAAA,gBAAA,CAAkB;QAAlCI,uBAAQ,CAAC,iBAAiB,EAAE,KAAI,EAAE,KAAI,CAAC,gBAAgB,CAAC,CAAC;QACzD,KAAI,CAAC,cAAc,CAACJ,UAAO,CAAC,CAAC;QAC7B,KAAI,CAAC,iBAAiB,GAAGY,OAAK,CAAC;;KAClC;;CAzCL,CACCC,0BAAA,CADD,CAAA,CAAA;AA4CO,gBAAP,CAAA,UAAO,GAAoC;IAD3C,EAEE,IAAA,EAAMH,cAAA,EAAW,IAAA,EAAM,CAAA;gBADrB,QAAQ,EAEE,sBAAA;gBADV,MAAM,EAEEE,OAAA;gBADR,OAAO,EAEEZ,UAAA;gBADT,OAAO,EAEE,EAAR;aACJ,EAEC,EAAG;CADJ,CAEC;;;;AAED,gBAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA;IACD,EAAC,IAAI,EAAER,qBAAgB,GAAG;CACzB,CAAD,EAAC,CAAC;;;;AAyDF,IAAA,iBAAA,kBAAA,UAAA,MAAA,EAAA;IAjDC,SAAD,CAAA,iBAAA,EAAA,MAAA,CAAA,CAAC;IAkDD,SAAA,iBAAA,GAAA;QACA,OAAQ,MAAR,CAAA,IAAA,CAAA,IAAA,EAAc,UAAU,CAAC,IAAzB,IAAA,CAAA;KACK;;CAHL,CAjDCmB,wBAAA,CAiDD,CAAA,CAAA;AA7CO,iBAAP,CAAA,UAAO,GAAoC;IAkD3C,EAjDE,IAAA,EAAMD,cAAA,EAAW,IAAA,EAAM,CAAA;gBAkDrB,QAAQ,EAjDE,8BAAA;gBAkDV,OAAO,EAjDE;oBAkDL,QAAQ,EAjDE,IAAID,oBAAA,CAAgB,gBAAC,CAAgB;iBAkDlD;aACJ,EAjDC,EAAG;CAkDJ,CAjDC;;;;AAED,iBAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA,EAoDA,CApDD,EAoDC,CAAC;;;;;;;;;;;;;;;AD/IF,IAMaR,QAAA,GAAmB,CAAA,WAAE,EAAW,WAAC,EAAW,mBAAC,EAAmB,iBAAC,EAAiB,mBAAC,EAAmB,WAAC,EAAW,cAAC,EAAc,YAAC,EAAY,eAAC,EAAe,sBAAC,EAAsB,iBAAC,EAAiB,eAAC,EAAe,mBAAC,EAAmB,QAAC,EAAQ,uBAAC,EAAuB,QAAC,EAAQ,cAAC,EAAc,UAAC,EAAU,gBAAC,EAAgB,cAAC,EAAc,YAAC,EAAY,cAAC,EAAc,eAAC,EAAe,aAAC,EAAa,OAAC,CAAO,CAAC;AAC/Z,IAAaD,UAAA,GAAoB,CAAA,kBAAE,EAAkB,wBAAC,CAAwB,CAAC;AAC/E,IAAaK,SAAA,GAAoB,CAAA,EAAE,CAAE,CAAC;;;;;;;AAQtC,AAAaC,8BAAsB,kBAAnC,UAAA,MAAA,EAAA;IAA4C,SAA5C,CAAA,sBAAA,EAAA,MAAA,CAAA,CAAyD;;;;;;;IAazD,SAAA,sBAAA,CAHwB,KAAO,EAAoB,SAAW,EAAmB,gBAAkB,EAAyB,QAAU,EAGtI;QAAA,IAAA,KAAA,GAIQ,MAJR,CAAA,IAAA,CAAA,IAAA,CAIe,IAJf,IAAA,CAkBK;QArBmB,KAAxB,CAAA,KAAwB,GAAA,KAAA,CAAO;QAAoB,KAAnD,CAAA,SAAmD,GAAA,SAAA,CAAW;QAAmB,KAAjF,CAAA,gBAAiF,GAAA,gBAAA,CAAkB;QAAyB,KAA5H,CAAA,QAA4H,GAAA,QAAA,CAAU;QAF3H,KAAX,CAAA,IAAW,GAAiB,CAAA,UAAE,CAAU,CAAC;QAUjC,KAAI,CAAC,OAAO,GAAG,KAAI,CAAC,KAAK,CAAC,aAAa,CAAC;QACxC,KAAI,CAAC,eAAe,GAAG,KAAI,CAAC,eAAe,IAAI,EAAE,CAAC;QAClD,IAAI;YACI,IAAI,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;YACpD,IAAG,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;gBACzC,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;aACjC;SACJ;QAAC,OAAO,EAArB,EAAoB,GAAG;QAEf,KAAI,CAAC,cAAc,CAACN,UAAO,CAAC,CAAC;QAC7B,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,EAAEK,SAAO,CAAC,CAAC;QACnCD,uBAAQ,CAAC,iBAAiB,EAAE,KAAI,EAAE,KAAI,CAAC,gBAAgB,CAAC,CAAC;QACzD,KAAI,CAAC,OAAO,GAAI,IAAIP,4BAAa,EAAE,CAAC;;KACvC;;;;IAJA,sBAAL,CAAA,SAAA,CAAA,QAAK,GAAA,YAAL;QASQ,IAAI,CARC,OAAC,CAAO,QAAC,CAAQ,IAAC,CAAI,CAAC;KAS/B,CAAL;;;;IANK,sBAAL,CAAA,SAAA,CAAA,eAAK,GAAA,YAAL;QAWQ,IAAI,CAVC,OAAC,CAAO,eAAC,CAAe,IAAC,CAAI,CAAC;KAWtC,CAAL;;;;IARK,sBAAL,CAAA,SAAA,CAAA,WAAK,GAAA,YAAL;QAaQ,IAAI,CAZC,OAAC,CAAO,WAAC,CAAW,IAAC,CAAI,CAAC;KAalC,CAAL;;;;IAVK,sBAAL,CAAA,SAAA,CAAA,qBAAK,GAAA,YAAL;QAeQ,IAAI,CAdC,UAAC,CAAU,CAAC,CAAC,CAAC,QAAC,GAAU,IAAA,CAAK,aAAC,CAAa;QAejD,IAAI,CAdC,OAAC,CAAO,qBAAC,CAAqB,IAAC,CAAI,CAAC;KAe5C,CAAL;IAwBA,OAAA,sBAAC,CAAD;CAAC,CAhF2CW,yBAAa,CAgFzD,CAAC,CAAA;AAlCMF,8BAAP,CAAA,UAAO,GAAoC;IAc3C,EAbE,IAAA,EAAMJ,cAAA,EAAW,IAAA,EAAM,CAAA;gBAcrB,QAAQ,EAbE,mBAAA;gBAcV,MAAM,EAbED,QAAA;gBAcR,OAAO,EAbED,UAAA;gBAcT,QAAQ,EAbE,EAAA;gBAIZ,eAAA,EAHmBD,4BAAA,CAAwB,MAAC;gBAc1C,OAAO,EAbE;oBAcL,aAAa,EAbE,IAAIQ,iBAAA,CAAa,iBAAC,CAAiB;iBAcrD;aACJ,EAbC,EAAG;CAcJ,CAbC;;;;AAEDD,8BAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA;IAgBD,EAAC,IAAI,EAAEX,eAAU,GAAG;IACpB,EAAC,IAAI,EAAEF,cAAS,GAAG;IACnB,EAAC,IAAI,EAAED,qBAAgB,GAAG;IAC1B,EAAC,IAAI,EAAED,aAAQ,GAAG;CACjB,CAAD,EAAC,CAAC;AA/EWe,8BAAsB,GAAnCR,YAAA,CAAA;IACCF,8BAAA,CAAA,CAAAC,4BAAA,CAAA,CAAA;IASDH,YAAA,CAAA,mBAAA,EAAA,CAA+BC,eAAA;QAA+BF,cAAA;QAAoCD,qBAAC;QAAmCD,aAAA,CAAtI,CAAA;CAVA,EAAae,8BAAsB,CAgFlC,CAhFD;;;;ADTA,IAAA,mBAAA,kBAAA,YAAA;IAAA,SAAA,mBAAA,GAAA;;;CAAA,EAAA,CAAA,CAAA;AAE0C,mBAA1C,CAAA,UAA0C,GAAoC;IAD9E,EAEE,IAAA,EAAMjB,aAAA,EAAU,IAAA,EAAM,CAAA;gBADpB,OAAO,EAEE,CAAAD,mBAAE,CAAY;gBADvB,YAAY,EAEE;oBADVkB,8BAAsB;oBACtB,gBAAgB;oBAChB,iBAAiB;iBACpB;gBACD,OAAO,EAEE;oBADLA,8BAAsB;oBACtB,gBAAgB;oBAChB,iBAAiB;iBACpB;aACJ,EAEC,EAAG;CADJ,CAEC;;;;AAED,mBAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA,EACA,CADD,EACC,CAAC;;;;ADlBF,IAAA,sBAAA,kBAAA,YAAA;IAAA,SAAA,sBAAA,GAAA;;;CAAA,EAAA,CAAA,CAAA;AAM6C,sBAA7C,CAAA,UAA6C,GAAoC;IALjF,EAME,IAAA,EAAMjB,aAAA,EAAU,IAAA,EAAM,CAAA;gBALpB,OAAO,EAME,CAAAD,mBAAE,EAAa,mBAAA,CAAoB;gBAL5C,OAAO,EAME;oBALL,mBAAmB;iBACtB;gBACD,SAAS,EAMC,EAJT;aACJ,EAMC,EAAG;CALJ,CAMC;;;;AAED,sBAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA,EAHA,CAGD,EAHC,CAAC;;;;;;;;;;;;;;;ADvBF,IAMaa,QAAA,GAAmB,CAAA,mBAAE,EAAmB,WAAC,EAAW,QAAC,EAAQ,QAAC,EAAQ,UAAC,EAAU,OAAC,CAAO,CAAC;AACvG,IAAaD,UAAA,GAAoB,CAAA,SAAE,CAAS,CAAC;AAC7C,IAAaK,SAAA,GAAoB,CAAA,EAAE,CAAE,CAAC;;;;;;;AAQtC,AAAaf,yBAAiB,kBAA9B,UAAA,MAAA,EAAA;IAAuC,SAAvC,CAAA,iBAAA,EAAA,MAAA,CAAA,CAA+C;;;;;;;IAW/C,SAAA,iBAAA,CAFwB,KAAO,EAAoB,SAAW,EAAmB,gBAAkB,EAAyB,QAAU,EAEtI;QAAA,IAAA,KAAA,GAIQ,MAJR,CAAA,IAAA,CAAA,IAAA,CAIe,IAJf,IAAA,CAYK;QAdmB,KAAxB,CAAA,KAAwB,GAAA,KAAA,CAAO;QAAoB,KAAnD,CAAA,SAAmD,GAAA,SAAA,CAAW;QAAmB,KAAjF,CAAA,gBAAiF,GAAA,gBAAA,CAAkB;QAAyB,KAA5H,CAAA,QAA4H,GAAA,QAAA,CAAU;QAF3H,KAAX,CAAA,IAAW,GAAiB,CAAA,EAAE,CAAE,CAAC;QASzB,KAAI,CAAC,OAAO,GAAG,KAAI,CAAC,KAAK,CAAC,aAAa,CAAC;QACxC,KAAI,CAAC,eAAe,GAAG,KAAI,CAAC,eAAe,IAAI,EAAE,CAAC;QAElD,KAAI,CAAC,cAAc,CAACU,UAAO,CAAC,CAAC;QAC7B,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,EAAEK,SAAO,CAAC,CAAC;QACnCD,uBAAQ,CAAC,iBAAiB,EAAE,KAAI,EAAE,KAAI,CAAC,gBAAgB,CAAC,CAAC;QACzD,KAAI,CAAC,OAAO,GAAI,IAAIP,4BAAa,EAAE,CAAC;;KACvC;;;;IAHA,iBAAL,CAAA,SAAA,CAAA,QAAK,GAAA,YAAL;QAQQ,IAAI,CAPC,OAAC,CAAO,QAAC,CAAQ,IAAC,CAAI,CAAC;KAQ/B,CAAL;;;;IALK,iBAAL,CAAA,SAAA,CAAA,eAAK,GAAA,YAAL;QAUQ,IAAI,CATC,OAAC,CAAO,eAAC,CAAe,IAAC,CAAI,CAAC;KAUtC,CAAL;;;;IAPK,iBAAL,CAAA,SAAA,CAAA,WAAK,GAAA,YAAL;QAYQ,IAAI,CAXC,OAAC,CAAO,WAAC,CAAW,IAAC,CAAI,CAAC;KAYlC,CAAL;;;;IATK,iBAAL,CAAA,SAAA,CAAA,qBAAK,GAAA,YAAL;QAeQ,IAAI,CAbC,OAAC,CAAO,qBAAC,CAAqB,IAAC,CAAI,CAAC;KAc5C,CAAL;IAwBA,OAAA,iBAAC,CAAD;CAAC,CAxEsCM,oBAAQ,CAwE/C,CAAC,CAAA;AAjCMb,yBAAP,CAAA,UAAO,GAAoC;IAa3C,EAZE,IAAA,EAAMY,cAAA,EAAW,IAAA,EAAM,CAAA;gBAarB,QAAQ,EAZE,cAAA;gBAaV,MAAM,EAZED,QAAA;gBAaR,OAAO,EAZED,UAAA;gBAaT,QAAQ,EAZE,EAAA;gBAaV,eAAe,EAZED,4BAAA,CAAwB,MAAC;gBAG5C,OAAA,EAFW,EAcR;aACJ,EAZC,EAAG;CAaJ,CAZC;;;;AAEDT,yBAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA;IAeD,EAAC,IAAI,EAAEK,eAAU,GAAG;IACpB,EAAC,IAAI,EAAEF,cAAS,GAAG;IACnB,EAAC,IAAI,EAAED,qBAAgB,GAAG;IAC1B,EAAC,IAAI,EAAED,aAAQ,GAAG;CACjB,CAAD,EAAC,CAAC;AAvEWD,yBAAiB,GAA9BQ,YAAA,CAAA;IACCF,8BAAA,CAAA,CAAAC,4BAAA,CAAA,CAAA;IAQDH,YAAA,CAAA,mBAAA,EAAA,CAA+BC,eAAA;QAA+BF,cAAA;QAAoCD,qBAAC;QAAmCD,aAAA,CAAtI,CAAA;CATA,EAAaD,yBAAiB,CAwE7B,CAxED;;;;ADVA,IAAA,cAAA,kBAAA,YAAA;IAAA,SAAA,cAAA,GAAA;;;CAAA,EAAA,CAAA,CAAA;AAEqC,cAArC,CAAA,UAAqC,GAAoC;IADzE,EAEE,IAAA,EAAMD,aAAA,EAAU,IAAA,EAAM,CAAA;gBADpB,OAAO,EAEE,CAAAD,mBAAE,CAAY;gBADvB,YAAY,EAEE;oBADVE,yBAAiB;iBACpB;gBACD,OAAO,EAEE;oBADLA,yBAAiB;iBACpB;aACJ,EAEC,EAAG;CADJ,CAEC;;;;AAED,cAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA,EACA,CADD,EACC,CAAC;;;;ADdF,IAAA,iBAAA,kBAAA,YAAA;IAAA,SAAA,iBAAA,GAAA;;;CAAA,EAAA,CAAA,CAAA;AAMwC,iBAAxC,CAAA,UAAwC,GAAoC;IAL5E,EAME,IAAA,EAAMD,aAAA,EAAU,IAAA,EAAM,CAAA;gBALpB,OAAO,EAME,CAAAD,mBAAE,EAAa,cAAA,CAAe;gBALvC,OAAO,EAME;oBALL,cAAc;iBACjB;gBACD,SAAS,EAMC,EAJT;aACJ,EAMC,EAAG;CALJ,CAMC;;;;AAED,iBAAD,CAAA,cAAC,GAAA,YAAD,EAAC,OAAA,EAHA,CAGD,EAHC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}
