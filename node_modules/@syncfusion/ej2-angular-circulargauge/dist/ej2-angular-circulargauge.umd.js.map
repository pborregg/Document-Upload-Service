{"version":3,"file":"ej2-angular-circulargauge.umd.js","sources":["~/@syncfusion/ej2-angular-circulargauge/src/circular-gauge/circulargauge-all.module.ts","~/@syncfusion/ej2-angular-circulargauge/src/circular-gauge/circulargauge.module.ts","~/@syncfusion/ej2-angular-circulargauge/src/circular-gauge/circulargauge.component.ts","~/@syncfusion/ej2-angular-circulargauge/src/circular-gauge/axes.directive.ts","~/@syncfusion/ej2-angular-circulargauge/src/circular-gauge/pointers.directive.ts","~/@syncfusion/ej2-angular-circulargauge/src/circular-gauge/ranges.directive.ts","~/@syncfusion/ej2-angular-circulargauge/src/circular-gauge/annotations.directive.ts"],"sourcesContent":["import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AnnotationDirective, AnnotationsDirective } from './annotations.directive';\nimport { RangeDirective, RangesDirective } from './ranges.directive';\nimport { PointerDirective, PointersDirective } from './pointers.directive';\nimport { AxisDirective, AxesDirective } from './axes.directive';\nimport { CircularGaugeComponent } from './circulargauge.component';\nimport { CircularGaugeModule } from './circulargauge.module';\nimport {Print, PdfExport, GaugeTooltip, Annotations, Legend, ImageExport, Gradient} from '@syncfusion/ej2-circulargauge';\n\n\nexport const /** @type {?} */ PrintService: ValueProvider = { provide: 'CircularGaugePrint', useValue: Print};\nexport const /** @type {?} */ PdfExportService: ValueProvider = { provide: 'CircularGaugePdfExport', useValue: PdfExport};\nexport const /** @type {?} */ GaugeTooltipService: ValueProvider = { provide: 'CircularGaugeGaugeTooltip', useValue: GaugeTooltip};\nexport const /** @type {?} */ AnnotationsService: ValueProvider = { provide: 'CircularGaugeAnnotations', useValue: Annotations};\nexport const /** @type {?} */ LegendService: ValueProvider = { provide: 'CircularGaugeLegend', useValue: Legend};\nexport const /** @type {?} */ ImageExportService: ValueProvider = { provide: 'CircularGaugeImageExport', useValue: ImageExport};\nexport const /** @type {?} */ GradientService: ValueProvider = { provide: 'CircularGaugeGradient', useValue: Gradient};\n/**\n * NgModule definition for the CircularGauge component with providers.\n */\nexport class CircularGaugeAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, CircularGaugeModule],\n    exports: [\n        CircularGaugeModule\n    ],\n    providers:[\n        PrintService,\n        PdfExportService,\n        GaugeTooltipService,\n        AnnotationsService,\n        LegendService,\n        ImageExportService,\n        GradientService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CircularGaugeAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCircularGaugeAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCircularGaugeAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AnnotationDirective, AnnotationsDirective } from './annotations.directive';\nimport { RangeDirective, RangesDirective } from './ranges.directive';\nimport { PointerDirective, PointersDirective } from './pointers.directive';\nimport { AxisDirective, AxesDirective } from './axes.directive';\nimport { CircularGaugeComponent } from './circulargauge.component';\n/**\n * NgModule definition for the CircularGauge component.\n */\nexport class CircularGaugeModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        CircularGaugeComponent,\n        AnnotationDirective,\n        AnnotationsDirective,\n        RangeDirective,\n        RangesDirective,\n        PointerDirective,\n        PointersDirective,\n        AxisDirective,\n        AxesDirective\n    ],\n    exports: [\n        CircularGaugeComponent,\n        AnnotationDirective,\n        AnnotationsDirective,\n        RangeDirective,\n        RangesDirective,\n        PointerDirective,\n        PointersDirective,\n        AxisDirective,\n        AxesDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CircularGaugeModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCircularGaugeModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCircularGaugeModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { CircularGauge } from '@syncfusion/ej2-circulargauge';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { AxesDirective } from './axes.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['allowImageExport','allowPdfExport','allowPrint','axes','background','border','centerX','centerY','description','enablePersistence','enablePointerDrag','enableRangeDrag','enableRtl','height','legendSettings','locale','margin','moveToCenter','tabIndex','theme','title','titleStyle','tooltip','useGroupingSeparator','width'];\nexport const /** @type {?} */ outputs: string[] = ['animationComplete','annotationRender','axisLabelRender','beforePrint','dragEnd','dragMove','dragStart','gaugeMouseDown','gaugeMouseLeave','gaugeMouseMove','gaugeMouseUp','legendRender','load','loaded','radiusCalculate','resized','tooltipRender'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * Circular Gauge Component\n * ```html\n * <ej-circulargauge></ej-circulargauge>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class CircularGaugeComponent extends CircularGauge implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\npublic childAxes: QueryList<AxesDirective>;\npublic tags: string[] = ['axes'];\n\n    \n    @Template()\npublic tooltip_template: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('CircularGaugePrint');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('CircularGaugePdfExport');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('CircularGaugeGaugeTooltip');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('CircularGaugeAnnotations');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('CircularGaugeLegend');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('CircularGaugeImageExport');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('CircularGaugeGradient');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childAxes;\n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-circulargauge',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childAxes: new ContentChild(AxesDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tooltip_template': [{ type: ContentChild, args: ['tooltipTemplate', ] },],\n};\n}\n\nfunction CircularGaugeComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nCircularGaugeComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCircularGaugeComponent.ctorParameters;\n/** @type {?} */\nCircularGaugeComponent.propDecorators;\n/** @type {?} */\nCircularGaugeComponent.prototype.context;\n/** @type {?} */\nCircularGaugeComponent.prototype.tagObjects;\n/** @type {?} */\nCircularGaugeComponent.prototype.childAxes;\n/** @type {?} */\nCircularGaugeComponent.prototype.tags;\n/** @type {?} */\nCircularGaugeComponent.prototype.tooltip_template;\n/** @type {?} */\nCircularGaugeComponent.prototype.registerEvents;\n/** @type {?} */\nCircularGaugeComponent.prototype.addTwoWay;\n/** @type {?} */\nCircularGaugeComponent.prototype.ngEle;\n/** @type {?} */\nCircularGaugeComponent.prototype.srenderer;\n/** @type {?} */\nCircularGaugeComponent.prototype.viewContainerRef;\n/** @type {?} */\nCircularGaugeComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\nimport { AnnotationsDirective } from './annotations.directive';\nimport { RangesDirective } from './ranges.directive';\nimport { PointersDirective } from './pointers.directive';\n\nlet /** @type {?} */ input: string[] = ['annotations', 'background', 'direction', 'endAngle', 'hideIntersectingLabel', 'labelStyle', 'lineStyle', 'majorTicks', 'maximum', 'minimum', 'minorTicks', 'pointers', 'radius', 'rangeGap', 'ranges', 'roundingPlaces', 'showLastLabel', 'startAndEndRangeGap', 'startAngle'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Axes directive\n * ```html\n * <e-axes><e-axis></e-axis></e-axes>\n * ```\n */\nexport class AxisDirective extends ComplexBase<AxisDirective> {\npublic directivePropList: any;\npublic childAnnotations: any;\npublic childRanges: any;\npublic childPointers: any;\npublic tags: string[] = ['annotations', 'ranges', 'pointers'];\n/**\n * Sets and gets the annotation element for an axis in circular gauge component.\n */\npublic annotations: any;\n/**\n * Sets and gets the background color of an axis. This property accepts value in hex code, rgba string as a valid CSS color string.\n * \\@default null\n */\npublic background: any;\n/**\n * Sets and gets the direction of an axis.\n * \\@default ClockWise\n */\npublic direction: any;\n/**\n * Sets and gets the end angle of an axis in circular gauge component.\n * \\@default 160\n */\npublic endAngle: any;\n/**\n * Enables and disables the intersecting labels to be hidden in axis.\n * \\@default false\n */\npublic hideIntersectingLabel: any;\n/**\n * Sets and gets the style of the axis label in circular gauge component.\n */\npublic labelStyle: any;\n/**\n * Sets and gets the style of the line in axis of circular gauge component.\n */\npublic lineStyle: any;\n/**\n * Sets and gets the major tick lines of an axis in circular gauge component.\n * \\@default { width: 2, height: 10 }\n */\npublic majorTicks: any;\n/**\n * Sets and gets the maximum value of an axis in the circular gauge component.\n * \\@aspdefaultvalueignore\n * \\@default null\n */\npublic maximum: any;\n/**\n * Sets and gets the minimum value of an axis in the circular gauge component.\n * \\@aspdefaultvalueignore\n * \\@default null\n */\npublic minimum: any;\n/**\n * Sets and gets the minor tick lines of an axis in circular gauge component.\n * \\@default { width: 2, height: 5 }\n */\npublic minorTicks: any;\n/**\n * Sets and gets the pointers of an axis in circular gauge component.\n */\npublic pointers: any;\n/**\n * Sets and gets the radius of an axis in circular gauge.\n * \\@default null\n */\npublic radius: any;\n/**\n * Sets and gets the gap between the ranges by specified value in circular gauge component.\n * \\@default null\n */\npublic rangeGap: any;\n/**\n * Sets and gets the ranges of an axis in circular gauge component.\n */\npublic ranges: any;\n/**\n * Sets and gets the rounding Off value in the label in an axis.\n * \\@default null\n */\npublic roundingPlaces: any;\n/**\n * Enables and disables the last label of axis when it is hidden in circular gauge component.\n * \\@default false\n */\npublic showLastLabel: any;\n/**\n * Enables and disables the start and end gap between the ranges and axis in circular gauge.\n * \\@default false\n */\npublic startAndEndRangeGap: any;\n/**\n * Sets and gets the start angle of an axis in circular gauge component.\n * \\@default 200\n */\npublic startAngle: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-axes>e-axis',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n        childAnnotations: new ContentChild(AnnotationsDirective), \n        childRanges: new ContentChild(RangesDirective), \n        childPointers: new ContentChild(PointersDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction AxisDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAxisDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAxisDirective.ctorParameters;\n/** @type {?} */\nAxisDirective.prototype.directivePropList;\n/** @type {?} */\nAxisDirective.prototype.childAnnotations;\n/** @type {?} */\nAxisDirective.prototype.childRanges;\n/** @type {?} */\nAxisDirective.prototype.childPointers;\n/** @type {?} */\nAxisDirective.prototype.tags;\n/**\n * Sets and gets the annotation element for an axis in circular gauge component.\n * @type {?}\n */\nAxisDirective.prototype.annotations;\n/**\n * Sets and gets the background color of an axis. This property accepts value in hex code, rgba string as a valid CSS color string.\n * \\@default null\n * @type {?}\n */\nAxisDirective.prototype.background;\n/**\n * Sets and gets the direction of an axis.\n * \\@default ClockWise\n * @type {?}\n */\nAxisDirective.prototype.direction;\n/**\n * Sets and gets the end angle of an axis in circular gauge component.\n * \\@default 160\n * @type {?}\n */\nAxisDirective.prototype.endAngle;\n/**\n * Enables and disables the intersecting labels to be hidden in axis.\n * \\@default false\n * @type {?}\n */\nAxisDirective.prototype.hideIntersectingLabel;\n/**\n * Sets and gets the style of the axis label in circular gauge component.\n * @type {?}\n */\nAxisDirective.prototype.labelStyle;\n/**\n * Sets and gets the style of the line in axis of circular gauge component.\n * @type {?}\n */\nAxisDirective.prototype.lineStyle;\n/**\n * Sets and gets the major tick lines of an axis in circular gauge component.\n * \\@default { width: 2, height: 10 }\n * @type {?}\n */\nAxisDirective.prototype.majorTicks;\n/**\n * Sets and gets the maximum value of an axis in the circular gauge component.\n * \\@aspdefaultvalueignore\n * \\@default null\n * @type {?}\n */\nAxisDirective.prototype.maximum;\n/**\n * Sets and gets the minimum value of an axis in the circular gauge component.\n * \\@aspdefaultvalueignore\n * \\@default null\n * @type {?}\n */\nAxisDirective.prototype.minimum;\n/**\n * Sets and gets the minor tick lines of an axis in circular gauge component.\n * \\@default { width: 2, height: 5 }\n * @type {?}\n */\nAxisDirective.prototype.minorTicks;\n/**\n * Sets and gets the pointers of an axis in circular gauge component.\n * @type {?}\n */\nAxisDirective.prototype.pointers;\n/**\n * Sets and gets the radius of an axis in circular gauge.\n * \\@default null\n * @type {?}\n */\nAxisDirective.prototype.radius;\n/**\n * Sets and gets the gap between the ranges by specified value in circular gauge component.\n * \\@default null\n * @type {?}\n */\nAxisDirective.prototype.rangeGap;\n/**\n * Sets and gets the ranges of an axis in circular gauge component.\n * @type {?}\n */\nAxisDirective.prototype.ranges;\n/**\n * Sets and gets the rounding Off value in the label in an axis.\n * \\@default null\n * @type {?}\n */\nAxisDirective.prototype.roundingPlaces;\n/**\n * Enables and disables the last label of axis when it is hidden in circular gauge component.\n * \\@default false\n * @type {?}\n */\nAxisDirective.prototype.showLastLabel;\n/**\n * Enables and disables the start and end gap between the ranges and axis in circular gauge.\n * \\@default false\n * @type {?}\n */\nAxisDirective.prototype.startAndEndRangeGap;\n/**\n * Sets and gets the start angle of an axis in circular gauge component.\n * \\@default 200\n * @type {?}\n */\nAxisDirective.prototype.startAngle;\n/** @type {?} */\nAxisDirective.prototype.viewContainerRef;\n}\n\n/**\n * Axis Array Directive\n */\nexport class AxesDirective extends ArrayBase<AxesDirective> {\nconstructor() {\n        super('axes');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-circulargauge>e-axes',\n    queries: {\n        children: new ContentChildren(AxisDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AxesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAxesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAxesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['animation', 'border', 'cap', 'color', 'description', 'imageUrl', 'linearGradient', 'markerHeight', 'markerShape', 'markerWidth', 'needleEndWidth', 'needleStartWidth', 'needleTail', 'offset', 'pointerWidth', 'position', 'radialGradient', 'radius', 'roundedCornerRadius', 'text', 'textStyle', 'type', 'value'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Pointers directive\n * ```html\n * <e-pointers><e-pointer></e-pointer></e-pointers>\n * ```\n */\nexport class PointerDirective extends ComplexBase<PointerDirective> {\npublic directivePropList: any;\n/**\n * Sets and gets the type of pointer for an axis in Circular gauge component.\n * \\@default Needle\n */\npublic type: any;\n/**\n * Sets and gets the animation of pointers while rendering the axis in circular gauge.\n */\npublic animation: any;\n/**\n * Sets and gets the options to customize the color and width of the border for the needle pointer in an axis.\n */\npublic border: any;\n/**\n * Sets and gets the cap of pointer in an axis.\n */\npublic cap: any;\n/**\n * Sets and gets the color of the pointer in an axis.\n */\npublic color: any;\n/**\n * Sets and gets the information about pointer for assistive technology.\n * \\@default null\n */\npublic description: any;\n/**\n * Sets and gets the url for the image that is to be displayed as pointer. \n * It requires marker shape value to be Image.\n * \\@default null\n */\npublic imageUrl: any;\n/**\n * Sets and gets the properties to render a linear gradient for the pointer. \n * If both linear and radial gradient is set, then the linear gradient will be rendered in the pointer.\n * \\@default null\n */\npublic linearGradient: any;\n/**\n * Sets and gets the height of the marker pointer in an axis.\n * \\@default 5\n */\npublic markerHeight: any;\n/**\n * Sets and gets the shape of the marker type pointer in an axis.\n * \\@default Circle\n */\npublic markerShape: any;\n/**\n * Sets and gets the width of the marker pointer in an axis.\n * \\@default 5\n */\npublic markerWidth: any;\n/**\n * Sets or gets the end width of the needle pointer in an axis.\n * \\@default null\n */\npublic needleEndWidth: any;\n/**\n * Sets or gets the start width of the needle pointer in an axis.\n * \\@default null\n */\npublic needleStartWidth: any;\n/**\n * Sets and gets the tail of needle pointer in an axis.\n */\npublic needleTail: any;\n/**\n * Sets and gets the offset value of pointer from scale.\n * \\@default '0'\n */\npublic offset: any;\n/**\n * Sets and gets the width of the pointer in axis.\n * \\@default 20\n */\npublic pointerWidth: any;\n/**\n * Sets and gets the position of pointer for an axis.\n * \\@default Auto\n */\npublic position: any;\n/**\n * Sets and gets the properties to render a radial gradient for pointer.\n * \\@default null\n */\npublic radialGradient: any;\n/**\n * Sets and gets the radius of pointer for marker and range type pointer and fix length of pointer for needle pointer.\n * \\@default null\n */\npublic radius: any;\n/**\n * Sets and gets the corner radius for pointer in axis.\n * \\@default 0\n */\npublic roundedCornerRadius: any;\n/**\n * Sets and gets the text in pointer.\n * \\@default ''\n */\npublic text: any;\n/**\n * Sets and gets the style of text in pointer of an axis.\n */\npublic textStyle: any;\n/**\n * Sets and gets the value of the pointer in circular gauge component.\n * \\@aspdefaultvalueignore\n * \\@default null\n */\npublic value: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-pointers>e-pointer',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction PointerDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPointerDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPointerDirective.ctorParameters;\n/** @type {?} */\nPointerDirective.prototype.directivePropList;\n/**\n * Sets and gets the type of pointer for an axis in Circular gauge component.\n * \\@default Needle\n * @type {?}\n */\nPointerDirective.prototype.type;\n/**\n * Sets and gets the animation of pointers while rendering the axis in circular gauge.\n * @type {?}\n */\nPointerDirective.prototype.animation;\n/**\n * Sets and gets the options to customize the color and width of the border for the needle pointer in an axis.\n * @type {?}\n */\nPointerDirective.prototype.border;\n/**\n * Sets and gets the cap of pointer in an axis.\n * @type {?}\n */\nPointerDirective.prototype.cap;\n/**\n * Sets and gets the color of the pointer in an axis.\n * @type {?}\n */\nPointerDirective.prototype.color;\n/**\n * Sets and gets the information about pointer for assistive technology.\n * \\@default null\n * @type {?}\n */\nPointerDirective.prototype.description;\n/**\n * Sets and gets the url for the image that is to be displayed as pointer. \n * It requires marker shape value to be Image.\n * \\@default null\n * @type {?}\n */\nPointerDirective.prototype.imageUrl;\n/**\n * Sets and gets the properties to render a linear gradient for the pointer. \n * If both linear and radial gradient is set, then the linear gradient will be rendered in the pointer.\n * \\@default null\n * @type {?}\n */\nPointerDirective.prototype.linearGradient;\n/**\n * Sets and gets the height of the marker pointer in an axis.\n * \\@default 5\n * @type {?}\n */\nPointerDirective.prototype.markerHeight;\n/**\n * Sets and gets the shape of the marker type pointer in an axis.\n * \\@default Circle\n * @type {?}\n */\nPointerDirective.prototype.markerShape;\n/**\n * Sets and gets the width of the marker pointer in an axis.\n * \\@default 5\n * @type {?}\n */\nPointerDirective.prototype.markerWidth;\n/**\n * Sets or gets the end width of the needle pointer in an axis.\n * \\@default null\n * @type {?}\n */\nPointerDirective.prototype.needleEndWidth;\n/**\n * Sets or gets the start width of the needle pointer in an axis.\n * \\@default null\n * @type {?}\n */\nPointerDirective.prototype.needleStartWidth;\n/**\n * Sets and gets the tail of needle pointer in an axis.\n * @type {?}\n */\nPointerDirective.prototype.needleTail;\n/**\n * Sets and gets the offset value of pointer from scale.\n * \\@default '0'\n * @type {?}\n */\nPointerDirective.prototype.offset;\n/**\n * Sets and gets the width of the pointer in axis.\n * \\@default 20\n * @type {?}\n */\nPointerDirective.prototype.pointerWidth;\n/**\n * Sets and gets the position of pointer for an axis.\n * \\@default Auto\n * @type {?}\n */\nPointerDirective.prototype.position;\n/**\n * Sets and gets the properties to render a radial gradient for pointer.\n * \\@default null\n * @type {?}\n */\nPointerDirective.prototype.radialGradient;\n/**\n * Sets and gets the radius of pointer for marker and range type pointer and fix length of pointer for needle pointer.\n * \\@default null\n * @type {?}\n */\nPointerDirective.prototype.radius;\n/**\n * Sets and gets the corner radius for pointer in axis.\n * \\@default 0\n * @type {?}\n */\nPointerDirective.prototype.roundedCornerRadius;\n/**\n * Sets and gets the text in pointer.\n * \\@default ''\n * @type {?}\n */\nPointerDirective.prototype.text;\n/**\n * Sets and gets the style of text in pointer of an axis.\n * @type {?}\n */\nPointerDirective.prototype.textStyle;\n/**\n * Sets and gets the value of the pointer in circular gauge component.\n * \\@aspdefaultvalueignore\n * \\@default null\n * @type {?}\n */\nPointerDirective.prototype.value;\n/** @type {?} */\nPointerDirective.prototype.viewContainerRef;\n}\n\n/**\n * Pointer Array Directive\n */\nexport class PointersDirective extends ArrayBase<PointersDirective> {\nconstructor() {\n        super('pointers');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-circulargauge>e-axes>e-axis>e-pointers',\n    queries: {\n        children: new ContentChildren(PointerDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PointersDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPointersDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPointersDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['color', 'end', 'endWidth', 'legendText', 'linearGradient', 'offset', 'opacity', 'position', 'radialGradient', 'radius', 'roundedCornerRadius', 'start', 'startWidth'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Ranges directive\n * ```html\n * <e-ranges><e-range></e-range></e-ranges>\n * ```\n */\nexport class RangeDirective extends ComplexBase<RangeDirective> {\npublic directivePropList: any;\n/**\n * Sets and gets the color of the ranges in circular gauge component.\n * \\@aspdefaultvalueignore\n * \\@default null\n */\npublic color: any;\n/**\n * Sets and gets the end value of the range in circular gauge component.\n * \\@aspdefaultvalueignore\n * \\@default 0\n */\npublic end: any;\n/**\n *   Sets and gets the width for the end of the range in the circular gauge component.\n * \\@default '10'\n */\npublic endWidth: any;\n/**\n * Sets and gets the text for the legend in the circular gauge component.\n * \\@default ''\n */\npublic legendText: any;\n/**\n * Sets and gets the properties to render a linear gradient for the range. \n * If both linear and radial gradient is set, then the linear gradient will be rendered in the range.\n * \\@default null\n */\npublic linearGradient: any;\n/**\n * Sets and gets the offset value of range in circular gauge component.\n * \\@default '0'\n */\npublic offset: any;\n/**\n * Sets and gets the opacity for the ranges in circular gauge component.\n * \\@default 1\n */\npublic opacity: any;\n/**\n * Sets and gets the position of the range and pointer for an axis in circular gauge component.\n * \\@default Auto\n */\npublic position: any;\n/**\n * Sets and gets the properties to render a radial gradient for the range.\n * \\@default null\n */\npublic radialGradient: any;\n/**\n * Sets and gets the radius of the range for circular gauge component.\n * \\@default null\n */\npublic radius: any;\n/**\n * Sets and gets the corner radius for ranges in circular gauge component.\n * \\@default 0\n */\npublic roundedCornerRadius: any;\n/**\n * Sets and gets the start value of the range in circular gauge component.\n * \\@aspdefaultvalueignore\n * \\@default 0\n */\npublic start: any;\n/**\n *  Sets and gets the width for the start of the range in the circular gauge component.\n * \\@default '10'\n */\npublic startWidth: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-ranges>e-range',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction RangeDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nRangeDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangeDirective.ctorParameters;\n/** @type {?} */\nRangeDirective.prototype.directivePropList;\n/**\n * Sets and gets the color of the ranges in circular gauge component.\n * \\@aspdefaultvalueignore\n * \\@default null\n * @type {?}\n */\nRangeDirective.prototype.color;\n/**\n * Sets and gets the end value of the range in circular gauge component.\n * \\@aspdefaultvalueignore\n * \\@default 0\n * @type {?}\n */\nRangeDirective.prototype.end;\n/**\n *   Sets and gets the width for the end of the range in the circular gauge component.\n * \\@default '10'\n * @type {?}\n */\nRangeDirective.prototype.endWidth;\n/**\n * Sets and gets the text for the legend in the circular gauge component.\n * \\@default ''\n * @type {?}\n */\nRangeDirective.prototype.legendText;\n/**\n * Sets and gets the properties to render a linear gradient for the range. \n * If both linear and radial gradient is set, then the linear gradient will be rendered in the range.\n * \\@default null\n * @type {?}\n */\nRangeDirective.prototype.linearGradient;\n/**\n * Sets and gets the offset value of range in circular gauge component.\n * \\@default '0'\n * @type {?}\n */\nRangeDirective.prototype.offset;\n/**\n * Sets and gets the opacity for the ranges in circular gauge component.\n * \\@default 1\n * @type {?}\n */\nRangeDirective.prototype.opacity;\n/**\n * Sets and gets the position of the range and pointer for an axis in circular gauge component.\n * \\@default Auto\n * @type {?}\n */\nRangeDirective.prototype.position;\n/**\n * Sets and gets the properties to render a radial gradient for the range.\n * \\@default null\n * @type {?}\n */\nRangeDirective.prototype.radialGradient;\n/**\n * Sets and gets the radius of the range for circular gauge component.\n * \\@default null\n * @type {?}\n */\nRangeDirective.prototype.radius;\n/**\n * Sets and gets the corner radius for ranges in circular gauge component.\n * \\@default 0\n * @type {?}\n */\nRangeDirective.prototype.roundedCornerRadius;\n/**\n * Sets and gets the start value of the range in circular gauge component.\n * \\@aspdefaultvalueignore\n * \\@default 0\n * @type {?}\n */\nRangeDirective.prototype.start;\n/**\n *  Sets and gets the width for the start of the range in the circular gauge component.\n * \\@default '10'\n * @type {?}\n */\nRangeDirective.prototype.startWidth;\n/** @type {?} */\nRangeDirective.prototype.viewContainerRef;\n}\n\n/**\n * Range Array Directive\n */\nexport class RangesDirective extends ArrayBase<RangesDirective> {\nconstructor() {\n        super('ranges');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-circulargauge>e-axes>e-axis>e-ranges',\n    queries: {\n        children: new ContentChildren(RangeDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RangesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nRangesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nlet /** @type {?} */ input: string[] = ['angle', 'autoAngle', 'content', 'description', 'radius', 'textStyle', 'zIndex'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Annotation directive\n * ```html\n * <e-annotations><e-annotation></e-annotation></e-annotations>\n * ```\n */\nexport class AnnotationDirective extends ComplexBase<AnnotationDirective> {\npublic directivePropList: any;\n/**\n * Sets and gets the angle for annotation with respect to axis in circular gauge component.\n * \\@default 90\n */\npublic angle: any;\n/**\n * Enables and disables the annotation rotation along the axis.\n * \\@default false\n */\npublic autoAngle: any;\n/**\n * Sets and gets the information about annotation for assistive technology.\n * \\@default null\n */\npublic description: any;\n/**\n * Sets and gets the radius for annotation with respect to axis in circular gauge component.\n * \\@default '50%'\n */\npublic radius: any;\n/**\n * Sets and gets the style of the text in annotation.\n */\npublic textStyle: any;\n/**\n * Sets and gets the z-index of an annotation in an axis in the circular gauge component.\n * \\@default '-1'\n */\npublic zIndex: any;\n/**\n * Sets and gets the content of the annotation. This property accepts the id of the custom element.\n * \\@default null\n */\n@Template()\n    public content: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-annotations>e-annotation',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'content': [{ type: ContentChild, args: ['content', ] },],\n};\n}\n\nfunction AnnotationDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAnnotationDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAnnotationDirective.ctorParameters;\n/** @type {?} */\nAnnotationDirective.propDecorators;\n/** @type {?} */\nAnnotationDirective.prototype.directivePropList;\n/**\n * Sets and gets the angle for annotation with respect to axis in circular gauge component.\n * \\@default 90\n * @type {?}\n */\nAnnotationDirective.prototype.angle;\n/**\n * Enables and disables the annotation rotation along the axis.\n * \\@default false\n * @type {?}\n */\nAnnotationDirective.prototype.autoAngle;\n/**\n * Sets and gets the information about annotation for assistive technology.\n * \\@default null\n * @type {?}\n */\nAnnotationDirective.prototype.description;\n/**\n * Sets and gets the radius for annotation with respect to axis in circular gauge component.\n * \\@default '50%'\n * @type {?}\n */\nAnnotationDirective.prototype.radius;\n/**\n * Sets and gets the style of the text in annotation.\n * @type {?}\n */\nAnnotationDirective.prototype.textStyle;\n/**\n * Sets and gets the z-index of an annotation in an axis in the circular gauge component.\n * \\@default '-1'\n * @type {?}\n */\nAnnotationDirective.prototype.zIndex;\n/**\n * Sets and gets the content of the annotation. This property accepts the id of the custom element.\n * \\@default null\n * @type {?}\n */\nAnnotationDirective.prototype.content;\n/** @type {?} */\nAnnotationDirective.prototype.viewContainerRef;\n}\n\n/**\n * Annotation Array Directive\n */\nexport class AnnotationsDirective extends ArrayBase<AnnotationsDirective> {\nconstructor() {\n        super('annotations');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-circulargauge>e-axes>e-axis>e-annotations',\n    queries: {\n        children: new ContentChildren(AnnotationDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AnnotationsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAnnotationsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAnnotationsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["CommonModule","NgModule","Gradient","ImageExport","Legend","Annotations","GaugeTooltip","PdfExport","Print","CircularGaugeComponent","Injector","ViewContainerRef","Renderer2","__metadata","ElementRef","ComponentMixins","ComponentBase","__decorate","Template","ContentChild","ChangeDetectionStrategy","outputs","Component","CircularGauge","setValue","ContentChildren","Directive","ArrayBase","input","ComplexBase"],"mappings":"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"}
