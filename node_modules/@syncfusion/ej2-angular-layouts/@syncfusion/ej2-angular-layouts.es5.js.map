{"version":3,"file":"ej2-angular-layouts.es5.js","sources":["~/@syncfusion/ej2-angular-layouts/ej2-angular-layouts.ts","~/@syncfusion/ej2-angular-layouts/src/dashboard-layout/dashboardlayout-all.module.ts","~/@syncfusion/ej2-angular-layouts/src/dashboard-layout/dashboardlayout.module.ts","~/@syncfusion/ej2-angular-layouts/src/dashboard-layout/dashboardlayout.component.ts","~/@syncfusion/ej2-angular-layouts/src/dashboard-layout/panels.directive.ts","~/@syncfusion/ej2-angular-layouts/src/splitter/splitter-all.module.ts","~/@syncfusion/ej2-angular-layouts/src/splitter/splitter.module.ts","~/@syncfusion/ej2-angular-layouts/src/splitter/splitter.component.ts","~/@syncfusion/ej2-angular-layouts/src/splitter/panesettings.directive.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {PaneDirective,PanesDirective,SplitterComponent,SplitterModule,SplitterAllModule,PanelDirective,PanelsDirective,DashboardLayoutComponent,DashboardLayoutModule,DashboardLayoutAllModule,PaneProperties,SanitizeSelectors,BeforeSanitizeHtmlArgs,SanitizeRemoveAttrs,Orientation,Splitter,ResizeEventArgs,ResizingEventArgs,BeforeExpandEventArgs,ExpandedEventArgs,PanePropertiesModel,SplitterModel,Panel,DashboardLayout,DragStartArgs,ChangeEventArgs,DraggedEventArgs,DragStopArgs,ResizeArgs,PanelModel,DashboardLayoutModel} from './public_api';\n\nexport {inputs as ɵc,outputs as ɵd} from './src/dashboard-layout/dashboardlayout.component';\nexport {inputs as ɵa,outputs as ɵb} from './src/splitter/splitter.component';","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PanelDirective, PanelsDirective } from './panels.directive';\nimport { DashboardLayoutComponent } from './dashboardlayout.component';\nimport { DashboardLayoutModule } from './dashboardlayout.module';\n/**\n * NgModule definition for the DashboardLayout component with providers.\n */\nexport class DashboardLayoutAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, DashboardLayoutModule],\n    exports: [\n        DashboardLayoutModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DashboardLayoutAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nDashboardLayoutAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDashboardLayoutAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PanelDirective, PanelsDirective } from './panels.directive';\nimport { DashboardLayoutComponent } from './dashboardlayout.component';\n/**\n * NgModule definition for the DashboardLayout component.\n */\nexport class DashboardLayoutModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        DashboardLayoutComponent,\n        PanelDirective,\n        PanelsDirective\n    ],\n    exports: [\n        DashboardLayoutComponent,\n        PanelDirective,\n        PanelsDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DashboardLayoutModule_tsickle_Closure_declarations() {\n/** @type {?} */\nDashboardLayoutModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDashboardLayoutModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, Renderer2, Injector, ChangeDetectionStrategy, QueryList, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, ComponentMixins, IComponentBase, applyMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { DashboardLayout } from '@syncfusion/ej2-layouts';\n\nimport { PanelsDirective } from './panels.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['allowDragging','allowFloating','allowPushing','allowResizing','cellAspectRatio','cellSpacing','columns','draggableHandle','enableHtmlSanitizer','enablePersistence','enableRtl','locale','mediaQuery','panels','resizableHandles','showGridLines'];\nexport const /** @type {?} */ outputs: string[] = ['change','created','destroyed','drag','dragStart','dragStop','resize','resizeStart','resizeStop'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * Represents the Essential JS 2 Angular DashboardLayout Component.\n * ```html\n * <ejs-dashboardlayout></ejs-dashboardlayout>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class DashboardLayoutComponent extends DashboardLayout implements IComponentBase {\npublic containerContext : any;\npublic tagObjects: any;\npublic childPanels: QueryList<PanelsDirective>;\npublic tags: string[] = ['panels'];\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.containerContext  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.containerContext.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.containerContext.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.containerContext.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childPanels;\n        this.containerContext.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-dashboardlayout',\n    inputs: inputs,\n    outputs: outputs,\n    template: `<ng-content select='div'></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childPanels: new ContentChild(PanelsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction DashboardLayoutComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nDashboardLayoutComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDashboardLayoutComponent.ctorParameters;\n/** @type {?} */\nDashboardLayoutComponent.prototype.containerContext;\n/** @type {?} */\nDashboardLayoutComponent.prototype.tagObjects;\n/** @type {?} */\nDashboardLayoutComponent.prototype.childPanels;\n/** @type {?} */\nDashboardLayoutComponent.prototype.tags;\n/** @type {?} */\nDashboardLayoutComponent.prototype.registerEvents;\n/** @type {?} */\nDashboardLayoutComponent.prototype.addTwoWay;\n/** @type {?} */\nDashboardLayoutComponent.prototype.ngEle;\n/** @type {?} */\nDashboardLayoutComponent.prototype.srenderer;\n/** @type {?} */\nDashboardLayoutComponent.prototype.viewContainerRef;\n/** @type {?} */\nDashboardLayoutComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nlet /** @type {?} */ input: string[] = ['col', 'content', 'cssClass', 'enabled', 'header', 'id', 'maxSizeX', 'maxSizeY', 'minSizeX', 'minSizeY', 'row', 'sizeX', 'sizeY', 'zIndex'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * 'e-panels' directive represent a panels of angular dashboardlayout \n * It must be contained in a dashboardlayout component(`ej-dashboardlayout`). \n * ```html\n * <ejs-dashboardlayout> \n *   <e-panels>\n *    <e-panel></e-panel>\n *    <e-panel></e-panel>\n *   </e-panels>\n * </ejs-dashboardlayout>\n * ```\n */\nexport class PanelDirective extends ComplexBase<PanelDirective> {\npublic directivePropList: any;\n/**\n * Defines the column value where the panel to be placed.\n * \\@default 0\n * \\@asptype int\n * \\@blazortype int\n */\npublic col: any;\n/**\n * Defines the CSS class name that can be appended with each panel element.\n * \\@default ''\n */\npublic cssClass: any;\n/**\n * Defines whether to the panel should be enabled or not.\n * \\@default true\n */\npublic enabled: any;\n/**\n * Defines the id of the panel.\n * \\@default ''\n */\npublic id: any;\n/**\n * Specifies the maximum width of the panel in cells count. \n * *\n * \\@default null\n * \\@asptype int\n * \\@blazortype int?\n */\npublic maxSizeX: any;\n/**\n * Specifies the maximum height of the panel in cells count. \n * *\n * \\@default null\n * \\@asptype int\n * \\@blazortype int?\n */\npublic maxSizeY: any;\n/**\n * Specifies the minimum width of the panel in cells count. \n * *\n * \\@default 1\n * \\@blazortype int\n */\npublic minSizeX: any;\n/**\n * Specifies the minimum height of the panel in cells count.\n * \\@default 1\n * \\@blazortype int\n */\npublic minSizeY: any;\n/**\n * Defines a row value where the panel should be placed.\n * \\@default 0\n * \\@asptype int\n * \\@blazortype int\n */\npublic row: any;\n/**\n * Specifies the width of the panel in the layout in cells count.\n * \\@default 1\n * \\@blazortype int\n */\npublic sizeX: any;\n/**\n * Specifies the height of the panel in the layout in cells count.\n * \\@default 1\n * \\@blazortype int\n */\npublic sizeY: any;\n/**\n * Specifies the z-index of the panel \n * *\n * \\@default 1000\n * \\@asptype double\n * \\@blazortype double\n */\npublic zIndex: any;\n/**\n * Defines the template value that should be displayed as the panel's header.\n * \\@blazortype RenderFragment\n */\n@Template()\n    public header: any;\n/**\n * Defines the template value that should be displayed as the panel's content.\n * \\@blazortype RenderFragment\n */\n@Template()\n    public content: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-panels>e-panel',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'header': [{ type: ContentChild, args: ['header', ] },],\n'content': [{ type: ContentChild, args: ['content', ] },],\n};\n}\n\nfunction PanelDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPanelDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPanelDirective.ctorParameters;\n/** @type {?} */\nPanelDirective.propDecorators;\n/** @type {?} */\nPanelDirective.prototype.directivePropList;\n/**\n * Defines the column value where the panel to be placed.\n * \\@default 0\n * \\@asptype int\n * \\@blazortype int\n * @type {?}\n */\nPanelDirective.prototype.col;\n/**\n * Defines the CSS class name that can be appended with each panel element.\n * \\@default ''\n * @type {?}\n */\nPanelDirective.prototype.cssClass;\n/**\n * Defines whether to the panel should be enabled or not.\n * \\@default true\n * @type {?}\n */\nPanelDirective.prototype.enabled;\n/**\n * Defines the id of the panel.\n * \\@default ''\n * @type {?}\n */\nPanelDirective.prototype.id;\n/**\n * Specifies the maximum width of the panel in cells count. \n * *\n * \\@default null\n * \\@asptype int\n * \\@blazortype int?\n * @type {?}\n */\nPanelDirective.prototype.maxSizeX;\n/**\n * Specifies the maximum height of the panel in cells count. \n * *\n * \\@default null\n * \\@asptype int\n * \\@blazortype int?\n * @type {?}\n */\nPanelDirective.prototype.maxSizeY;\n/**\n * Specifies the minimum width of the panel in cells count. \n * *\n * \\@default 1\n * \\@blazortype int\n * @type {?}\n */\nPanelDirective.prototype.minSizeX;\n/**\n * Specifies the minimum height of the panel in cells count.\n * \\@default 1\n * \\@blazortype int\n * @type {?}\n */\nPanelDirective.prototype.minSizeY;\n/**\n * Defines a row value where the panel should be placed.\n * \\@default 0\n * \\@asptype int\n * \\@blazortype int\n * @type {?}\n */\nPanelDirective.prototype.row;\n/**\n * Specifies the width of the panel in the layout in cells count.\n * \\@default 1\n * \\@blazortype int\n * @type {?}\n */\nPanelDirective.prototype.sizeX;\n/**\n * Specifies the height of the panel in the layout in cells count.\n * \\@default 1\n * \\@blazortype int\n * @type {?}\n */\nPanelDirective.prototype.sizeY;\n/**\n * Specifies the z-index of the panel \n * *\n * \\@default 1000\n * \\@asptype double\n * \\@blazortype double\n * @type {?}\n */\nPanelDirective.prototype.zIndex;\n/**\n * Defines the template value that should be displayed as the panel's header.\n * \\@blazortype RenderFragment\n * @type {?}\n */\nPanelDirective.prototype.header;\n/**\n * Defines the template value that should be displayed as the panel's content.\n * \\@blazortype RenderFragment\n * @type {?}\n */\nPanelDirective.prototype.content;\n/** @type {?} */\nPanelDirective.prototype.viewContainerRef;\n}\n\n/**\n * Panel Array Directive\n */\nexport class PanelsDirective extends ArrayBase<PanelsDirective> {\nconstructor() {\n        super('panels');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-dashboardlayout>e-panels',\n    queries: {\n        children: new ContentChildren(PanelDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PanelsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPanelsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPanelsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PaneDirective, PanesDirective } from './panesettings.directive';\nimport { SplitterComponent } from './splitter.component';\nimport { SplitterModule } from './splitter.module';\n/**\n * NgModule definition for the Splitter component with providers.\n */\nexport class SplitterAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, SplitterModule],\n    exports: [\n        SplitterModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SplitterAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSplitterAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSplitterAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PaneDirective, PanesDirective } from './panesettings.directive';\nimport { SplitterComponent } from './splitter.component';\n/**\n * NgModule definition for the Splitter component.\n */\nexport class SplitterModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        SplitterComponent,\n        PaneDirective,\n        PanesDirective\n    ],\n    exports: [\n        SplitterComponent,\n        PaneDirective,\n        PanesDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SplitterModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSplitterModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSplitterModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, Renderer2, Injector, ChangeDetectionStrategy, QueryList, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, ComponentMixins, IComponentBase, applyMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { Splitter } from '@syncfusion/ej2-layouts';\n\nimport { PanesDirective } from './panesettings.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['cssClass','enableHtmlSanitizer','enablePersistence','enableRtl','enabled','height','locale','orientation','paneSettings','separatorSize','width'];\nexport const /** @type {?} */ outputs: string[] = ['beforeCollapse','beforeExpand','beforeSanitizeHtml','collapsed','created','expanded','resizeStart','resizeStop','resizing'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * Represents the Angular Splitter Component\n * ```html\n * <ejs-splitter></ejs-splitter>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class SplitterComponent extends Splitter implements IComponentBase {\npublic containerContext : any;\npublic tagObjects: any;\npublic childPaneSettings: QueryList<PanesDirective>;\npublic tags: string[] = ['paneSettings'];\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.containerContext  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.containerContext.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.containerContext.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.containerContext.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childPaneSettings;\n        this.containerContext.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-splitter',\n    inputs: inputs,\n    outputs: outputs,\n    template: `<ng-content select='div'></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childPaneSettings: new ContentChild(PanesDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction SplitterComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nSplitterComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSplitterComponent.ctorParameters;\n/** @type {?} */\nSplitterComponent.prototype.containerContext;\n/** @type {?} */\nSplitterComponent.prototype.tagObjects;\n/** @type {?} */\nSplitterComponent.prototype.childPaneSettings;\n/** @type {?} */\nSplitterComponent.prototype.tags;\n/** @type {?} */\nSplitterComponent.prototype.registerEvents;\n/** @type {?} */\nSplitterComponent.prototype.addTwoWay;\n/** @type {?} */\nSplitterComponent.prototype.ngEle;\n/** @type {?} */\nSplitterComponent.prototype.srenderer;\n/** @type {?} */\nSplitterComponent.prototype.viewContainerRef;\n/** @type {?} */\nSplitterComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nlet /** @type {?} */ input: string[] = ['collapsed', 'collapsible', 'content', 'cssClass', 'max', 'min', 'resizable', 'size'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * 'e-panesettings' directive represent a panes of angular splitter \n * It must be contained in a Splitter component(`ejs-splitter`). \n * ```html\n * <ejs-splitter id='splitter' > \n *   <e-panes>\n *    <e-pane size ='150px'></e-pane>\n *    <e-pane size = '20%'></e-pane>\n *   </e-panes>\n * </ejs-splitter>\n * ```\n */\nexport class PaneDirective extends ComplexBase<PaneDirective> {\npublic directivePropList: any;\n/**\n * Specifies whether a pane is collapsed or not collapsed at the initial rendering of splitter.\n * \n * {% codeBlock src='splitter/collapsed/index.md' %}{% endcodeBlock %}\n *     \n * \\@default false\n */\npublic collapsed: any;\n/**\n * Specifies whether a pane is collapsible or not collapsible.\n * \n * {% codeBlock src='splitter/collapsible/index.md' %}{% endcodeBlock %}\n *     \n * \\@default false\n */\npublic collapsible: any;\n/**\n * Specifies the CSS class names that defines specific user-defined \n * styles and themes to be appended on corresponding pane of the Splitter. \n * It is used to customize the Splitter control panes. \n * One or more custom CSS classes can be specified to the Splitter panes.\n * \\@default ''\n */\npublic cssClass: any;\n/**\n * Specifies the maximum size of a pane. The pane cannot be resized if it is more than the specified maximum limit.\n * \\@default null\n */\npublic max: any;\n/**\n * Specifies the minimum size of a pane. The pane cannot be resized if it is less than the specified minimum size.\n * \\@default null\n */\npublic min: any;\n/**\n * Specifies the value whether a pane is resizable. By default, the Splitter is resizable in all panes. \n * You can disable this for any specific panes using this property.\n * \\@default true\n */\npublic resizable: any;\n/**\n * Configures the properties for each pane.\n * \\@default ''\n */\npublic size: any;\n/**\n * Specifies the content of split pane as plain text, HTML markup, or any other JavaScript controls.\n * \\@default ''\n * \\@blazortype string\n */\n@Template()\n    public content: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-panes>e-pane',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'content': [{ type: ContentChild, args: ['content', ] },],\n};\n}\n\nfunction PaneDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPaneDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPaneDirective.ctorParameters;\n/** @type {?} */\nPaneDirective.propDecorators;\n/** @type {?} */\nPaneDirective.prototype.directivePropList;\n/**\n * Specifies whether a pane is collapsed or not collapsed at the initial rendering of splitter.\n * \n * {% codeBlock src='splitter/collapsed/index.md' %}{% endcodeBlock %}\n *     \n * \\@default false\n * @type {?}\n */\nPaneDirective.prototype.collapsed;\n/**\n * Specifies whether a pane is collapsible or not collapsible.\n * \n * {% codeBlock src='splitter/collapsible/index.md' %}{% endcodeBlock %}\n *     \n * \\@default false\n * @type {?}\n */\nPaneDirective.prototype.collapsible;\n/**\n * Specifies the CSS class names that defines specific user-defined \n * styles and themes to be appended on corresponding pane of the Splitter. \n * It is used to customize the Splitter control panes. \n * One or more custom CSS classes can be specified to the Splitter panes.\n * \\@default ''\n * @type {?}\n */\nPaneDirective.prototype.cssClass;\n/**\n * Specifies the maximum size of a pane. The pane cannot be resized if it is more than the specified maximum limit.\n * \\@default null\n * @type {?}\n */\nPaneDirective.prototype.max;\n/**\n * Specifies the minimum size of a pane. The pane cannot be resized if it is less than the specified minimum size.\n * \\@default null\n * @type {?}\n */\nPaneDirective.prototype.min;\n/**\n * Specifies the value whether a pane is resizable. By default, the Splitter is resizable in all panes. \n * You can disable this for any specific panes using this property.\n * \\@default true\n * @type {?}\n */\nPaneDirective.prototype.resizable;\n/**\n * Configures the properties for each pane.\n * \\@default ''\n * @type {?}\n */\nPaneDirective.prototype.size;\n/**\n * Specifies the content of split pane as plain text, HTML markup, or any other JavaScript controls.\n * \\@default ''\n * \\@blazortype string\n * @type {?}\n */\nPaneDirective.prototype.content;\n/** @type {?} */\nPaneDirective.prototype.viewContainerRef;\n}\n\n/**\n * Pane Array Directive\n */\nexport class PanesDirective extends ArrayBase<PanesDirective> {\nconstructor() {\n        super('panesettings');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-splitter>e-panes',\n    queries: {\n        children: new ContentChildren(PaneDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PanesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPanesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPanesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["__metadata","__decorate","outputs","inputs","twoWays","input"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AQAA,IAKI,KAAA,GAAkB,CAAA,WAAE,EAAY,aAAA,EAAe,SAAA,EAAW,UAAA,EAAY,KAAA,EAAO,KAAA,EAAO,WAAA,EAAa,MAAA,CAAO,CAAC;AAC7G,IAAI,OAAA,GAAoB,EAAA,CAAG;;;;;;;;;;;;;AAa3B;IACC,iCAAA;;;;IAwDD,uBAEwB,gBAAkB;QAF1C,YACQ,iBAAO,SAIV;QAHmB,KAAxB,CAAA,gBAAwB,GAAA,gBAAA,CAAkB;QAAlC,QAAQ,CAAC,iBAAiB,EAAE,KAAI,EAAE,KAAI,CAAC,gBAAgB,CAAC,CAAC;QACzD,KAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAC7B,KAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;;IACvC,CAAK;;CA9DL,CACC,WAAA;AAgEM,aAAP,CAAA,UAAO,GAAoC;IAD3C,EAEE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBADrB,QAAQ,EAEE,gBAAA;gBADV,MAAM,EAEE,KAAA;gBADR,OAAO,EAEE,OAAA;gBADT,OAAO,EAEE,EAAR;aACJ,EAEC,EAAG;CADJ,CAEC;;;;AAED,aAAD,CAAA,cAAC,GAAA,cAAA,OAAA;IACD,EAAC,IAAI,EAAE,gBAAgB,GAAG;CACzB,EAFA,CAEA,CAAC;AACK,aAAP,CAAA,cAAO,GAAyD;IAChE,SAAS,EAAE,CAAA,EAAG,IAAA,EAAM,YAAA,EAAc,IAAA,EAAM,CAAA,SAAE,EAAS,EAAG,EAAE;CACvD,CAAC;AA5BE,UAAJ,CAAA;IAGK,QAAA,EAAA;;CAHL,EAAA,aAAA,CAAA,SAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAwB,CAAxB;AA+BA;;;AA8EA;IAzEC,kCAAA;IA0ED;eACQ,kBAAM,cAAc,CAAC;IAC7B,CAAK;;CAHL,CAzEC,SAAA;AAIM,cAAP,CAAA,UAAO,GAAoC;IA0E3C,EAzEE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBA0ErB,QAAQ,EAzEE,sBAAA;gBA0EV,OAAO,EAzEE;oBA0EL,QAAQ,EAzEE,IAAI,eAAA,CAAgB,aAAC,CAAa;iBA0E/C;aACJ,EAzEC,EAAG;CA0EJ,CAzEC;;;;AAED,cAAD,CAAA,cAAC,GAAA,cAAA,OAAA,EA4EA,EA5EA,CA4EA,CAAC;;;;;;;;;;;;;;;ADrMF,IAMa,MAAA,GAAmB,CAAA,UAAE,EAAU,qBAAC,EAAqB,mBAAC,EAAmB,WAAC,EAAW,SAAC,EAAS,QAAC,EAAQ,QAAC,EAAQ,aAAC,EAAa,cAAC,EAAc,eAAC,EAAe,OAAC,CAAO,CAAC;AACpL,IAAaE,SAAA,GAAoB,CAAA,gBAAE,EAAgB,cAAC,EAAc,oBAAC,EAAoB,WAAC,EAAW,SAAC,EAAS,UAAC,EAAU,aAAC,EAAa,YAAC,EAAY,UAAC,CAAU,CAAC;AAC/J,IAAa,OAAA,GAAoB,CAAA,EAAE,CAAE,CAAC;;;;;;;AAQtC,IAAa,iBAAiB;IAAS,qCAAQ;;;;;;;IAW/C,2BAFwB,KAAO,EAAoB,SAAW,EAAmB,gBAAkB,EAAyB,QAAU;QAEtI,YAIQ,iBAAO,SAQV;QAdmB,KAAxB,CAAA,KAAwB,GAAA,KAAA,CAAO;QAAoB,KAAnD,CAAA,SAAmD,GAAA,SAAA,CAAW;QAAmB,KAAjF,CAAA,gBAAiF,GAAA,gBAAA,CAAkB;QAAyB,KAA5H,CAAA,QAA4H,GAAA,QAAA,CAAU;QAH3H,KAAX,CAAA,IAAW,GAAiB,CAAA,cAAE,CAAc,CAAC;QAUrC,KAAI,CAAC,OAAO,GAAG,KAAI,CAAC,KAAK,CAAC,aAAa,CAAC;QACxC,KAAI,CAAC,eAAe,GAAG,KAAI,CAAC,eAAe,IAAI,EAAE,CAAC;QAElD,KAAI,CAAC,cAAc,CAACA,SAAO,CAAC,CAAC;QAC7B,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,EAAE,OAAO,CAAC,CAAC;QACnC,QAAQ,CAAC,iBAAiB,EAAE,KAAI,EAAE,KAAI,CAAC,gBAAgB,CAAC,CAAC;QACzD,KAAI,CAAC,gBAAgB,GAAI,IAAI,aAAa,EAAE,CAAC;;IACrD,CAAK;;;;IAHA,oCAAA,GAAA;QAQG,IAAI,CAPC,gBAAC,CAAgB,QAAC,CAAQ,IAAC,CAAI,CAAC;IAQ7C,CAAK;;;;IALA,2CAAA,GAAA;QAUG,IAAI,CATC,gBAAC,CAAgB,eAAC,CAAe,IAAC,CAAI,CAAC;IAUpD,CAAK;;;;IAPA,uCAAA,GAAA;QAYG,IAAI,CAXC,gBAAC,CAAgB,WAAC,CAAW,IAAC,CAAI,CAAC;IAYhD,CAAK;;;;IATA,iDAAA,GAAA;QAcG,IAAI,CAbC,UAAC,CAAU,CAAC,CAAC,CAAC,QAAC,GAAU,IAAA,CAAK,iBAAC,CAAiB;QAcrD,IAAI,CAbC,gBAAC,CAAgB,qBAAC,CAAqB,IAAC,CAAI,CAAC;IAc1D,CAAK;IAwBL,wBAAC;AAAD,CAAC,AAxED,CAAuC,QAAQ,EAwE9C,CAAA;AAjCM,iBAAP,CAAA,UAAO,GAAoC;IAa3C,EAZE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAarB,QAAQ,EAZE,cAAA;gBAaV,MAAM,EAZE,MAAA;gBAaR,OAAO,EAZEA,SAAA;gBAaT,QAAQ,EAZE,wCAAA;gBAaV,eAAe,EAZE,uBAAA,CAAwB,MAAC;gBAG5C,OAAA,EAFW;oBAaL,iBAAiB,EAZE,IAAI,YAAA,CAAa,cAAC,CAAc;iBAatD;aACJ,EAZC,EAAG;CAaJ,CAZC;;;;AAED,iBAAD,CAAA,cAAC,GAAA,cAAA,OAAA;IAeD,EAAC,IAAI,EAAE,UAAU,GAAG;IACpB,EAAC,IAAI,EAAE,SAAS,GAAG;IACnB,EAAC,IAAI,EAAE,gBAAgB,GAAG;IAC1B,EAAC,IAAI,EAAE,QAAQ,GAAG;CACjB,EAnBA,CAmBA,CAAC;AAvEW,iBAAiB,GAA9BD,YAAA,CAAA;IACC,eAAA,CAAA,CAAA,aAAA,CAAA,CAAA;IAQDD,YAAA,CAAA,mBAAA,EAAA,CAA+B,UAAA;QAA+B,SAAA;QAAoC,gBAAC;QAAmC,QAAA,CAAtI,CAAA;CATA,EAAa,iBAAiB,CAwE7B,CAxED;ADZA;;;AAGA;IAAA;;;CAAA;AAEqC,cAArC,CAAA,UAAqC,GAAoC;IADzE,EAEE,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA;gBADpB,OAAO,EAEE,CAAA,YAAE,CAAY;gBADvB,YAAY,EAEE;oBADV,iBAAiB;oBACjB,aAAa;oBACb,cAAc;iBACjB;gBACD,OAAO,EAEE;oBADL,iBAAiB;oBACjB,aAAa;oBACb,cAAc;iBACjB;aACJ,EAEC,EAAG;CADJ,CAEC;;;;AAED,cAAD,CAAA,cAAC,GAAA,cAAA,OAAA,EACA,EADA,CACA,CAAC;ADrBF;;;AAGA;IAAA;;;CAAA;AAMwC,iBAAxC,CAAA,UAAwC,GAAoC;IAL5E,EAME,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA;gBALpB,OAAO,EAME,CAAA,YAAE,EAAa,cAAA,CAAe;gBALvC,OAAO,EAME;oBALL,cAAc;iBACjB;gBACD,SAAS,EAMC,EAJT;aACJ,EAMC,EAAG;CALJ,CAMC;;;;AAED,iBAAD,CAAA,cAAC,GAAA,cAAA,OAAA,EAHA,EAGA,CAHA,CAAC;;;;;;;;;;;;;;;ADvBF,IAKIK,OAAA,GAAkB,CAAA,KAAE,EAAM,SAAA,EAAW,UAAA,EAAY,SAAA,EAAW,QAAA,EAAU,IAAA,EAAM,UAAA,EAAY,UAAA,EAAY,UAAA,EAAY,UAAA,EAAY,KAAA,EAAO,OAAA,EAAS,OAAA,EAAS,QAAA,CAAS,CAAC;AACnK,IAAIH,SAAA,GAAoB,EAAA,CAAG;;;;;;;;;;;;;AAa3B;IACC,kCAAA;;;;IA8FD,wBAIwB,gBAAkB;QAJ1C,YACQ,iBAAO,SAIV;QADmB,KAAxB,CAAA,gBAAwB,GAAA,gBAAA,CAAkB;QAFlC,QAAQ,CAAC,iBAAiB,EAAE,KAAI,EAAE,KAAI,CAAC,gBAAgB,CAAC,CAAC;QACzD,KAAI,CAAC,cAAc,CAACA,SAAO,CAAC,CAAC;QAC7B,KAAI,CAAC,iBAAiB,GAAGG,OAAK,CAAC;;IACvC,CAAK;;CApGL,CACC,WAAA;AAwGM,cAAP,CAAA,UAAO,GAAoC;IAH3C,EAIE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAHrB,QAAQ,EAIE,kBAAA;gBAHV,MAAM,EAIEA,OAAA;gBAHR,OAAO,EAIEH,SAAA;gBAHT,OAAO,EAIE,EAFR;aACJ,EAIC,EAAG;CAHJ,CAIC;;;;AAED,cAAD,CAAA,cAAC,GAAA,cAAA,OAAA;IADD,EAAC,IAAI,EAAE,gBAAgB,GAAG;CACzB,EAAA,CAAA,CAAC;AAGK,cAAP,CAAA,cAAO,GAAyD;IADhE,QAAQ,EAEE,CAAA,EAAG,IAAA,EAAM,YAAA,EAAc,IAAA,EAAM,CAAA,QAAE,EAAQ,EAAG,EAAE;IADtD,SAAS,EAEE,CAAA,EAAG,IAAA,EAAM,YAAA,EAAc,IAAA,EAAM,CAAA,SAAE,EAAS,EAAG,EAAE;CADvD,CAEC;AArCED,YAAJ,CAAA;IAIK,QAAA,EAAA;;CAJL,EAAA,cAAA,CAAA,SAAA,EAAA,QAAA,EAAA,KAAA,CAAA,CAAuB,CAAvB;AAMIA,YAAJ,CAAA;IAKK,QAAA,EAAA;;CALL,EAAA,cAAA,CAAA,SAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAwB,CAAxB;AAgCA;;;AAyHA;IAlHC,mCAAA;IAmHD;eACQ,kBAAM,QAAQ,CAAC;IACvB,CAAK;;CAHL,CAlHC,SAAA;AAIM,eAAP,CAAA,UAAO,GAAoC;IAmH3C,EAlHE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAmHrB,QAAQ,EAlHE,8BAAA;gBAmHV,OAAO,EAlHE;oBAmHL,QAAQ,EAlHE,IAAI,eAAA,CAAgB,cAAC,CAAc;iBAmHhD;aACJ,EAlHC,EAAG;CAmHJ,CAlHC;;;;AAED,eAAD,CAAA,cAAC,GAAA,cAAA,OAAA,EAqHA,EArHA,CAqHA,CAAC;;;;;;;;;;;;;;;ADvRF,IAMaE,QAAA,GAAmB,CAAA,eAAE,EAAe,eAAC,EAAe,cAAC,EAAc,eAAC,EAAe,iBAAC,EAAiB,aAAC,EAAa,SAAC,EAAS,iBAAC,EAAiB,qBAAC,EAAqB,mBAAC,EAAmB,WAAC,EAAW,QAAC,EAAQ,YAAC,EAAY,QAAC,EAAQ,kBAAC,EAAkB,eAAC,CAAe,CAAC;AACrR,IAAaD,SAAA,GAAoB,CAAA,QAAE,EAAQ,SAAC,EAAS,WAAC,EAAW,MAAC,EAAM,WAAC,EAAW,UAAC,EAAU,QAAC,EAAQ,aAAC,EAAa,YAAC,CAAY,CAAC;AACpI,IAAaE,SAAA,GAAoB,CAAA,EAAE,CAAE,CAAC;;;;;;;AAQtC,IAAa,wBAAwB;IAAS,4CAAe;;;;;;;IAW7D,kCAFwB,KAAO,EAAoB,SAAW,EAAmB,gBAAkB,EAAyB,QAAU;QAEtI,YAIQ,iBAAO,SAQV;QAdmB,KAAxB,CAAA,KAAwB,GAAA,KAAA,CAAO;QAAoB,KAAnD,CAAA,SAAmD,GAAA,SAAA,CAAW;QAAmB,KAAjF,CAAA,gBAAiF,GAAA,gBAAA,CAAkB;QAAyB,KAA5H,CAAA,QAA4H,GAAA,QAAA,CAAU;QAH3H,KAAX,CAAA,IAAW,GAAiB,CAAA,QAAE,CAAQ,CAAC;QAU/B,KAAI,CAAC,OAAO,GAAG,KAAI,CAAC,KAAK,CAAC,aAAa,CAAC;QACxC,KAAI,CAAC,eAAe,GAAG,KAAI,CAAC,eAAe,IAAI,EAAE,CAAC;QAElD,KAAI,CAAC,cAAc,CAACF,SAAO,CAAC,CAAC;QAC7B,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,EAAEE,SAAO,CAAC,CAAC;QACnC,QAAQ,CAAC,iBAAiB,EAAE,KAAI,EAAE,KAAI,CAAC,gBAAgB,CAAC,CAAC;QACzD,KAAI,CAAC,gBAAgB,GAAI,IAAI,aAAa,EAAE,CAAC;;IACrD,CAAK;;;;IAHA,2CAAA,GAAA;QAQG,IAAI,CAPC,gBAAC,CAAgB,QAAC,CAAQ,IAAC,CAAI,CAAC;IAQ7C,CAAK;;;;IALA,kDAAA,GAAA;QAUG,IAAI,CATC,gBAAC,CAAgB,eAAC,CAAe,IAAC,CAAI,CAAC;IAUpD,CAAK;;;;IAPA,8CAAA,GAAA;QAYG,IAAI,CAXC,gBAAC,CAAgB,WAAC,CAAW,IAAC,CAAI,CAAC;IAYhD,CAAK;;;;IATA,wDAAA,GAAA;QAcG,IAAI,CAbC,UAAC,CAAU,CAAC,CAAC,CAAC,QAAC,GAAU,IAAA,CAAK,WAAC,CAAW;QAc/C,IAAI,CAbC,gBAAC,CAAgB,qBAAC,CAAqB,IAAC,CAAI,CAAC;IAc1D,CAAK;IAwBL,+BAAC;AAAD,CAAC,AAxED,CAA8C,eAAe,EAwE5D,CAAA;AAjCM,wBAAP,CAAA,UAAO,GAAoC;IAa3C,EAZE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAarB,QAAQ,EAZE,qBAAA;gBAaV,MAAM,EAZED,QAAA;gBAaR,OAAO,EAZED,SAAA;gBAaT,QAAQ,EAZE,wCAAA;gBAaV,eAAe,EAZE,uBAAA,CAAwB,MAAC;gBAG5C,OAAA,EAFW;oBAaL,WAAW,EAZE,IAAI,YAAA,CAAa,eAAC,CAAe;iBAajD;aACJ,EAZC,EAAG;CAaJ,CAZC;;;;AAED,wBAAD,CAAA,cAAC,GAAA,cAAA,OAAA;IAeD,EAAC,IAAI,EAAE,UAAU,GAAG;IACpB,EAAC,IAAI,EAAE,SAAS,GAAG;IACnB,EAAC,IAAI,EAAE,gBAAgB,GAAG;IAC1B,EAAC,IAAI,EAAE,QAAQ,GAAG;CACjB,EAnBA,CAmBA,CAAC;AAvEW,wBAAwB,GAArCD,YAAA,CAAA;IACC,eAAA,CAAA,CAAA,aAAA,CAAA,CAAA;IAQDD,YAAA,CAAA,mBAAA,EAAA,CAA+B,UAAA;QAA+B,SAAA;QAAoC,gBAAC;QAAmC,QAAA,CAAtI,CAAA;CATA,EAAa,wBAAwB,CAwEpC,CAxED;ADZA;;;AAGA;IAAA;;;CAAA;AAE4C,qBAA5C,CAAA,UAA4C,GAAoC;IADhF,EAEE,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA;gBADpB,OAAO,EAEE,CAAA,YAAE,CAAY;gBADvB,YAAY,EAEE;oBADV,wBAAwB;oBACxB,cAAc;oBACd,eAAe;iBAClB;gBACD,OAAO,EAEE;oBADL,wBAAwB;oBACxB,cAAc;oBACd,eAAe;iBAClB;aACJ,EAEC,EAAG;CADJ,CAEC;;;;AAED,qBAAD,CAAA,cAAC,GAAA,cAAA,OAAA,EACA,EADA,CACA,CAAC;ADrBF;;;AAGA;IAAA;;;CAAA;AAM+C,wBAA/C,CAAA,UAA+C,GAAoC;IALnF,EAME,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA;gBALpB,OAAO,EAME,CAAA,YAAE,EAAa,qBAAA,CAAsB;gBAL9C,OAAO,EAME;oBALL,qBAAqB;iBACxB;gBACD,SAAS,EAMC,EAJT;aACJ,EAMC,EAAG;CALJ,CAMC;;;;AAED,wBAAD,CAAA,cAAC,GAAA,cAAA,OAAA,EAHA,EAGA,CAHA,CAAC;ADvBF;;GAEG;;"}
