{"version":3,"file":"ej2-angular-layouts.umd.min.js","sources":["~/@syncfusion/ej2-angular-layouts/src/splitter/panesettings.directive.ts","~/@syncfusion/ej2-angular-layouts/src/splitter/splitter.component.ts","~/@syncfusion/ej2-angular-layouts/src/splitter/splitter.module.ts","~/@syncfusion/ej2-angular-layouts/src/splitter/splitter-all.module.ts","~/@syncfusion/ej2-angular-layouts/src/dashboard-layout/panels.directive.ts","~/@syncfusion/ej2-angular-layouts/src/dashboard-layout/dashboardlayout.component.ts","~/@syncfusion/ej2-angular-layouts/src/dashboard-layout/dashboardlayout.module.ts","~/@syncfusion/ej2-angular-layouts/src/dashboard-layout/dashboardlayout-all.module.ts"],"sourcesContent":["import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nlet /** @type {?} */ input: string[] = ['collapsed', 'collapsible', 'content', 'cssClass', 'max', 'min', 'resizable', 'size'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * 'e-panesettings' directive represent a panes of angular splitter \n * It must be contained in a Splitter component(`ejs-splitter`). \n * ```html\n * <ejs-splitter id='splitter' > \n *   <e-panes>\n *    <e-pane size ='150px'></e-pane>\n *    <e-pane size = '20%'></e-pane>\n *   </e-panes>\n * </ejs-splitter>\n * ```\n */\nexport class PaneDirective extends ComplexBase<PaneDirective> {\npublic directivePropList: any;\n/**\n * Specifies whether a pane is collapsed or not collapsed at the initial rendering of splitter.\n * \n * {% codeBlock src='splitter/collapsed/index.md' %}{% endcodeBlock %}\n *     \n * \\@default false\n */\npublic collapsed: any;\n/**\n * Specifies whether a pane is collapsible or not collapsible.\n * \n * {% codeBlock src='splitter/collapsible/index.md' %}{% endcodeBlock %}\n *     \n * \\@default false\n */\npublic collapsible: any;\n/**\n * Specifies the CSS class names that defines specific user-defined \n * styles and themes to be appended on corresponding pane of the Splitter. \n * It is used to customize the Splitter control panes. \n * One or more custom CSS classes can be specified to the Splitter panes.\n * \\@default ''\n */\npublic cssClass: any;\n/**\n * Specifies the maximum size of a pane. The pane cannot be resized if it is more than the specified maximum limit.\n * \\@default null\n */\npublic max: any;\n/**\n * Specifies the minimum size of a pane. The pane cannot be resized if it is less than the specified minimum size.\n * \\@default null\n */\npublic min: any;\n/**\n * Specifies the value whether a pane is resizable. By default, the Splitter is resizable in all panes. \n * You can disable this for any specific panes using this property.\n * \\@default true\n */\npublic resizable: any;\n/**\n * Configures the properties for each pane.\n * \\@default ''\n */\npublic size: any;\n/**\n * Specifies the content of split pane as plain text, HTML markup, or any other JavaScript controls.\n * \\@default ''\n * \\@blazortype string\n */\n@Template()\n    public content: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-panes>e-pane',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'content': [{ type: ContentChild, args: ['content', ] },],\n};\n}\n\nfunction PaneDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPaneDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPaneDirective.ctorParameters;\n/** @type {?} */\nPaneDirective.propDecorators;\n/** @type {?} */\nPaneDirective.prototype.directivePropList;\n/**\n * Specifies whether a pane is collapsed or not collapsed at the initial rendering of splitter.\n * \n * {% codeBlock src='splitter/collapsed/index.md' %}{% endcodeBlock %}\n *     \n * \\@default false\n * @type {?}\n */\nPaneDirective.prototype.collapsed;\n/**\n * Specifies whether a pane is collapsible or not collapsible.\n * \n * {% codeBlock src='splitter/collapsible/index.md' %}{% endcodeBlock %}\n *     \n * \\@default false\n * @type {?}\n */\nPaneDirective.prototype.collapsible;\n/**\n * Specifies the CSS class names that defines specific user-defined \n * styles and themes to be appended on corresponding pane of the Splitter. \n * It is used to customize the Splitter control panes. \n * One or more custom CSS classes can be specified to the Splitter panes.\n * \\@default ''\n * @type {?}\n */\nPaneDirective.prototype.cssClass;\n/**\n * Specifies the maximum size of a pane. The pane cannot be resized if it is more than the specified maximum limit.\n * \\@default null\n * @type {?}\n */\nPaneDirective.prototype.max;\n/**\n * Specifies the minimum size of a pane. The pane cannot be resized if it is less than the specified minimum size.\n * \\@default null\n * @type {?}\n */\nPaneDirective.prototype.min;\n/**\n * Specifies the value whether a pane is resizable. By default, the Splitter is resizable in all panes. \n * You can disable this for any specific panes using this property.\n * \\@default true\n * @type {?}\n */\nPaneDirective.prototype.resizable;\n/**\n * Configures the properties for each pane.\n * \\@default ''\n * @type {?}\n */\nPaneDirective.prototype.size;\n/**\n * Specifies the content of split pane as plain text, HTML markup, or any other JavaScript controls.\n * \\@default ''\n * \\@blazortype string\n * @type {?}\n */\nPaneDirective.prototype.content;\n/** @type {?} */\nPaneDirective.prototype.viewContainerRef;\n}\n\n/**\n * Pane Array Directive\n */\nexport class PanesDirective extends ArrayBase<PanesDirective> {\nconstructor() {\n        super('panesettings');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-splitter>e-panes',\n    queries: {\n        children: new ContentChildren(PaneDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PanesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPanesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPanesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, Renderer2, Injector, ChangeDetectionStrategy, QueryList, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, ComponentMixins, IComponentBase, applyMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { Splitter } from '@syncfusion/ej2-layouts';\n\nimport { PanesDirective } from './panesettings.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['cssClass','enableHtmlSanitizer','enablePersistence','enableReversePanes','enableRtl','enabled','height','locale','orientation','paneSettings','separatorSize','width'];\nexport const /** @type {?} */ outputs: string[] = ['beforeCollapse','beforeExpand','beforeSanitizeHtml','collapsed','created','expanded','resizeStart','resizeStop','resizing'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * Represents the Angular Splitter Component\n * ```html\n * <ejs-splitter></ejs-splitter>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class SplitterComponent extends Splitter implements IComponentBase {\npublic containerContext : any;\npublic tagObjects: any;\n\tbeforeCollapse: any;\n\tbeforeExpand: any;\n\tbeforeSanitizeHtml: any;\n\tcollapsed: any;\n\tcreated: any;\n\texpanded: any;\n\tresizeStart: any;\n\tresizeStop: any;\npublic resizing: any;\npublic childPaneSettings: QueryList<PanesDirective>;\npublic tags: string[] = ['paneSettings'];\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.containerContext  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.containerContext.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.containerContext.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.containerContext.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childPaneSettings;\n        this.containerContext.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-splitter',\n    inputs: inputs,\n    outputs: outputs,\n    template: `<ng-content select='div'></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childPaneSettings: new ContentChild(PanesDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction SplitterComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nSplitterComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSplitterComponent.ctorParameters;\n/** @type {?} */\nSplitterComponent.prototype.containerContext;\n/** @type {?} */\nSplitterComponent.prototype.tagObjects;\n/** @type {?} */\nSplitterComponent.prototype.beforeCollapse;\n/** @type {?} */\nSplitterComponent.prototype.beforeExpand;\n/** @type {?} */\nSplitterComponent.prototype.beforeSanitizeHtml;\n/** @type {?} */\nSplitterComponent.prototype.collapsed;\n/** @type {?} */\nSplitterComponent.prototype.created;\n/** @type {?} */\nSplitterComponent.prototype.expanded;\n/** @type {?} */\nSplitterComponent.prototype.resizeStart;\n/** @type {?} */\nSplitterComponent.prototype.resizeStop;\n/** @type {?} */\nSplitterComponent.prototype.resizing;\n/** @type {?} */\nSplitterComponent.prototype.childPaneSettings;\n/** @type {?} */\nSplitterComponent.prototype.tags;\n/** @type {?} */\nSplitterComponent.prototype.registerEvents;\n/** @type {?} */\nSplitterComponent.prototype.addTwoWay;\n/** @type {?} */\nSplitterComponent.prototype.ngEle;\n/** @type {?} */\nSplitterComponent.prototype.srenderer;\n/** @type {?} */\nSplitterComponent.prototype.viewContainerRef;\n/** @type {?} */\nSplitterComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PaneDirective, PanesDirective } from './panesettings.directive';\nimport { SplitterComponent } from './splitter.component';\n/**\n * NgModule definition for the Splitter component.\n */\nexport class SplitterModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        SplitterComponent,\n        PaneDirective,\n        PanesDirective\n    ],\n    exports: [\n        SplitterComponent,\n        PaneDirective,\n        PanesDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SplitterModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSplitterModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSplitterModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PaneDirective, PanesDirective } from './panesettings.directive';\nimport { SplitterComponent } from './splitter.component';\nimport { SplitterModule } from './splitter.module';\n/**\n * NgModule definition for the Splitter component with providers.\n */\nexport class SplitterAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, SplitterModule],\n    exports: [\n        SplitterModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SplitterAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSplitterAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSplitterAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nlet /** @type {?} */ input: string[] = ['col', 'content', 'cssClass', 'enabled', 'header', 'id', 'maxSizeX', 'maxSizeY', 'minSizeX', 'minSizeY', 'row', 'sizeX', 'sizeY', 'zIndex'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * 'e-panels' directive represent a panels of angular dashboardlayout \n * It must be contained in a dashboardlayout component(`ej-dashboardlayout`). \n * ```html\n * <ejs-dashboardlayout> \n *   <e-panels>\n *    <e-panel></e-panel>\n *    <e-panel></e-panel>\n *   </e-panels>\n * </ejs-dashboardlayout>\n * ```\n */\nexport class PanelDirective extends ComplexBase<PanelDirective> {\npublic directivePropList: any;\n/**\n * Defines the column value where the panel to be placed.\n * \\@default 0\n * \\@asptype int\n */\npublic col: any;\n/**\n * Defines the CSS class name that can be appended with each panel element.\n * \\@default ''\n */\npublic cssClass: any;\n/**\n * Defines whether to the panel should be enabled or not.\n * \\@default true\n */\npublic enabled: any;\n/**\n * Defines the id of the panel.\n * \\@default ''\n */\npublic id: any;\n/**\n * Specifies the maximum width of the panel in cells count.\n * \\@default null\n * \\@asptype int\n */\npublic maxSizeX: any;\n/**\n * Specifies the maximum height of the panel in cells count.\n * \\@default null\n * \\@asptype int\n */\npublic maxSizeY: any;\n/**\n * Specifies the minimum width of the panel in cells count.\n * \\@default 1\n */\npublic minSizeX: any;\n/**\n * Specifies the minimum height of the panel in cells count.\n * \\@default 1\n */\npublic minSizeY: any;\n/**\n * Defines a row value where the panel should be placed.\n * \\@default 0\n * \\@asptype int\n */\npublic row: any;\n/**\n * Specifies the width of the panel in the layout in cells count.\n * \\@default 1\n */\npublic sizeX: any;\n/**\n * Specifies the height of the panel in the layout in cells count.\n * \\@default 1\n */\npublic sizeY: any;\n/**\n * Specifies the z-index of the panel\n * \\@default 1000\n * \\@asptype double\n */\npublic zIndex: any;\n/**\n * Defines the template value that should be displayed as the panel's header.\n */\n@Template()\n    public header: any;\n/**\n * Defines the template value that should be displayed as the panel's content.\n */\n@Template()\n    public content: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-panels>e-panel',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'header': [{ type: ContentChild, args: ['header', ] },],\n'content': [{ type: ContentChild, args: ['content', ] },],\n};\n}\n\nfunction PanelDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPanelDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPanelDirective.ctorParameters;\n/** @type {?} */\nPanelDirective.propDecorators;\n/** @type {?} */\nPanelDirective.prototype.directivePropList;\n/**\n * Defines the column value where the panel to be placed.\n * \\@default 0\n * \\@asptype int\n * @type {?}\n */\nPanelDirective.prototype.col;\n/**\n * Defines the CSS class name that can be appended with each panel element.\n * \\@default ''\n * @type {?}\n */\nPanelDirective.prototype.cssClass;\n/**\n * Defines whether to the panel should be enabled or not.\n * \\@default true\n * @type {?}\n */\nPanelDirective.prototype.enabled;\n/**\n * Defines the id of the panel.\n * \\@default ''\n * @type {?}\n */\nPanelDirective.prototype.id;\n/**\n * Specifies the maximum width of the panel in cells count.\n * \\@default null\n * \\@asptype int\n * @type {?}\n */\nPanelDirective.prototype.maxSizeX;\n/**\n * Specifies the maximum height of the panel in cells count.\n * \\@default null\n * \\@asptype int\n * @type {?}\n */\nPanelDirective.prototype.maxSizeY;\n/**\n * Specifies the minimum width of the panel in cells count.\n * \\@default 1\n * @type {?}\n */\nPanelDirective.prototype.minSizeX;\n/**\n * Specifies the minimum height of the panel in cells count.\n * \\@default 1\n * @type {?}\n */\nPanelDirective.prototype.minSizeY;\n/**\n * Defines a row value where the panel should be placed.\n * \\@default 0\n * \\@asptype int\n * @type {?}\n */\nPanelDirective.prototype.row;\n/**\n * Specifies the width of the panel in the layout in cells count.\n * \\@default 1\n * @type {?}\n */\nPanelDirective.prototype.sizeX;\n/**\n * Specifies the height of the panel in the layout in cells count.\n * \\@default 1\n * @type {?}\n */\nPanelDirective.prototype.sizeY;\n/**\n * Specifies the z-index of the panel\n * \\@default 1000\n * \\@asptype double\n * @type {?}\n */\nPanelDirective.prototype.zIndex;\n/**\n * Defines the template value that should be displayed as the panel's header.\n * @type {?}\n */\nPanelDirective.prototype.header;\n/**\n * Defines the template value that should be displayed as the panel's content.\n * @type {?}\n */\nPanelDirective.prototype.content;\n/** @type {?} */\nPanelDirective.prototype.viewContainerRef;\n}\n\n/**\n * Panel Array Directive\n */\nexport class PanelsDirective extends ArrayBase<PanelsDirective> {\nconstructor() {\n        super('panels');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-dashboardlayout>e-panels',\n    queries: {\n        children: new ContentChildren(PanelDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PanelsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPanelsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPanelsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, Renderer2, Injector, ChangeDetectionStrategy, QueryList, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, ComponentMixins, IComponentBase, applyMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { DashboardLayout } from '@syncfusion/ej2-layouts';\n\nimport { PanelsDirective } from './panels.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['allowDragging','allowFloating','allowPushing','allowResizing','cellAspectRatio','cellSpacing','columns','draggableHandle','enableHtmlSanitizer','enablePersistence','enableRtl','locale','mediaQuery','panels','resizableHandles','showGridLines'];\nexport const /** @type {?} */ outputs: string[] = ['change','created','destroyed','drag','dragStart','dragStop','resize','resizeStart','resizeStop'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * Represents the Essential JS 2 Angular DashboardLayout Component.\n * ```html\n * <ejs-dashboardlayout></ejs-dashboardlayout>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class DashboardLayoutComponent extends DashboardLayout implements IComponentBase {\npublic containerContext : any;\npublic tagObjects: any;\n\tchange: any;\n\tcreated: any;\n\tdestroyed: any;\n\tdrag: any;\n\tdragStart: any;\n\tdragStop: any;\n\tresize: any;\n\tresizeStart: any;\npublic resizeStop: any;\npublic childPanels: QueryList<PanelsDirective>;\npublic tags: string[] = ['panels'];\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.containerContext  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.containerContext.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.containerContext.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.containerContext.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childPanels;\n        this.containerContext.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-dashboardlayout',\n    inputs: inputs,\n    outputs: outputs,\n    template: `<ng-content select='div'></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childPanels: new ContentChild(PanelsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction DashboardLayoutComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nDashboardLayoutComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDashboardLayoutComponent.ctorParameters;\n/** @type {?} */\nDashboardLayoutComponent.prototype.containerContext;\n/** @type {?} */\nDashboardLayoutComponent.prototype.tagObjects;\n/** @type {?} */\nDashboardLayoutComponent.prototype.change;\n/** @type {?} */\nDashboardLayoutComponent.prototype.created;\n/** @type {?} */\nDashboardLayoutComponent.prototype.destroyed;\n/** @type {?} */\nDashboardLayoutComponent.prototype.drag;\n/** @type {?} */\nDashboardLayoutComponent.prototype.dragStart;\n/** @type {?} */\nDashboardLayoutComponent.prototype.dragStop;\n/** @type {?} */\nDashboardLayoutComponent.prototype.resize;\n/** @type {?} */\nDashboardLayoutComponent.prototype.resizeStart;\n/** @type {?} */\nDashboardLayoutComponent.prototype.resizeStop;\n/** @type {?} */\nDashboardLayoutComponent.prototype.childPanels;\n/** @type {?} */\nDashboardLayoutComponent.prototype.tags;\n/** @type {?} */\nDashboardLayoutComponent.prototype.registerEvents;\n/** @type {?} */\nDashboardLayoutComponent.prototype.addTwoWay;\n/** @type {?} */\nDashboardLayoutComponent.prototype.ngEle;\n/** @type {?} */\nDashboardLayoutComponent.prototype.srenderer;\n/** @type {?} */\nDashboardLayoutComponent.prototype.viewContainerRef;\n/** @type {?} */\nDashboardLayoutComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PanelDirective, PanelsDirective } from './panels.directive';\nimport { DashboardLayoutComponent } from './dashboardlayout.component';\n/**\n * NgModule definition for the DashboardLayout component.\n */\nexport class DashboardLayoutModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        DashboardLayoutComponent,\n        PanelDirective,\n        PanelsDirective\n    ],\n    exports: [\n        DashboardLayoutComponent,\n        PanelDirective,\n        PanelsDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DashboardLayoutModule_tsickle_Closure_declarations() {\n/** @type {?} */\nDashboardLayoutModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDashboardLayoutModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PanelDirective, PanelsDirective } from './panels.directive';\nimport { DashboardLayoutComponent } from './dashboardlayout.component';\nimport { DashboardLayoutModule } from './dashboardlayout.module';\n/**\n * NgModule definition for the DashboardLayout component with providers.\n */\nexport class DashboardLayoutAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, DashboardLayoutModule],\n    exports: [\n        DashboardLayoutModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DashboardLayoutAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nDashboardLayoutAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDashboardLayoutAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["input","outputs","PaneDirective","_super","viewContainerRef","_this","call","this","setValue","registerEvents","directivePropList","__extends","ComplexBase","decorators","type","Directive","args","selector","inputs","queries","ctorParameters","ViewContainerRef","propDecorators","content","ContentChild","__decorate","Template","prototype","PanesDirective","ArrayBase","children","ContentChildren","twoWays","exports","SplitterComponent","ngEle","srenderer","injector","tags","element","nativeElement","injectedModules","addTwoWay","containerContext","ComponentBase","ngOnInit","ngAfterViewInit","ngOnDestroy","ngAfterContentChecked","tagObjects","instance","childPaneSettings","Splitter","Component","template","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","Renderer2","Injector","ComponentMixins","__metadata","SplitterModule","NgModule","imports","CommonModule","declarations","SplitterAllModule","providers","PanelDirective","header","PanelsDirective","DashboardLayoutComponent","childPanels","DashboardLayout","DashboardLayoutModule","DashboardLayoutAllModule"],"mappings":"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"}
